import tournamentEngine from '../../tests/engines/tournamentEngine';
import { getAllDrawMatchUps } from '../../query/matchUps/drawMatchUps';
import { validDrawPositions } from '../validDrawPositions';
import askEngine from '../../tests/engines/askEngine';
import { expect, it } from 'vitest';

// static examples (not generated by mocksEngine)
import tournament from '../../tests/queries/matchUps/checkValidMatchUps/tournament.tods.json';
import { mutation } from '../../tests/queries/matchUps/checkValidMatchUps/mutation.payload';

it('can recognize invalid matchUps', () => {
  let result = tournamentEngine.setState(tournament);
  expect(result.success).toEqual(true);
  result = askEngine.allTournamentMatchUps();
  expect(result.matchUps).toEqual([]);

  result = validDrawPositions({ matchUps: result.matchUps });
  expect(result).toEqual(true);

  expect(mutation.tournamentId).toEqual(tournament.tournamentId);

  mutation.executionQueue.forEach((queueItem) => {
    const { method, params } = queueItem;
    const result = tournamentEngine[method](params);
    expect(result.success).toEqual(true);
  });

  const { drawDefinition } = mutation.executionQueue[0].params;
  const { matchUps: drawMatchUps } = getAllDrawMatchUps({
    inContext: true,
    drawDefinition,
  });
  result = validDrawPositions({ matchUps: drawMatchUps });
  expect(result).toEqual(true);

  const { matchUps: postExecutionMatchUps } = askEngine.allTournamentMatchUps();

  result = validDrawPositions({
    matchUps: postExecutionMatchUps,
  });
  expect(result).toEqual(true);
});
