(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{XScD:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return p}));var a=n("Fcif"),i=n("+I+c"),r=n("/FXl"),c=n("TjRS"),o=(n("aD51"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/tournamentEngine/documentation/api.md"}});var s={_frontmatter:o},l=c.a;function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)(l,Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"tournamentengine-api-reference"},"tournamentEngine API Reference"),Object(r.b)("p",null,"All tournamentEngine methods return either ",Object(r.b)("inlineCode",{parentName:"p"},"{ success: true }")," or ",Object(r.b)("inlineCode",{parentName:"p"},"{ error }")),Object(r.b)("h2",{id:"addcourt"},"addCourt"),Object(r.b)("p",null,"Add a court to a Venue."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const court = {\n  altitude, // optional\n  courtDimensions, // optional\n  courtId, // generated automatically if not provided\n  courtName,\n  dateAvailability, // optional - see below\n  latitude, // optional\n  longitude, // optional\n  onlineResources,  // optional\n  pace, // optional - string;\n  surfaceCategory, SurfaceCategoryEnum;\n  surfaceType, // string; see: https://www.itftennis.com/en/about-us/tennis-tech/recognised-courts/\n  surfacedDate?: Date;\n}\ntournamentEngine.addCourt({ venueId, court });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"addcourts"},"addCourts"),Object(r.b)("p",null,"Convenience function to bulk add courts to a Venue. Only adds ",Object(r.b)("strong",{parentName:"p"},"dataAvailability")," and ",Object(r.b)("strong",{parentName:"p"},"courtName"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const dateAvailability = [\n  {\n    date: '2020-01-01T00:00',\n    startTime: '07:00',\n    endTime: '19:00',\n    bookings: [\n      { startTime: '07:00', endTime: '08:30', bookingType: 'PRACTICE' },\n      { startTime: '08:30', endTime: '09:00', bookingType: 'MAINTENANCE' },\n      { startTime: '13:30', endTime: '14:00', bookingType: 'MAINTENANCE' },\n    ],\n  },\n];\ntournamentEngine.addCourts({\n  venueId,\n  courtsCount: 3, // optional, can be added/modified later\n  courtNames: ['Court 1', 'Court 2', 'Court 3'], // optional\n  dateAvailability, // optional\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"adddrawdefinition"},"addDrawDefinition"),Object(r.b)("p",null,"Adds a drawDefinition to an event in a tournamentRecord. Called after ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#generateDrawDefinition"}),"generateDrawDefinition"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { drawDefinition, error } = generateDrawDefinition(drawDefinitionValues);\nif (!error) {\n  const result = tournamentEngine.addDrawDefinition({\n    eventId,\n    drawDefinition,\n  });\n}\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"adddrawentries"},"addDrawEntries"),Object(r.b)("p",null,"Bulk add an array of ",Object(r.b)("strong",{parentName:"p"},"participantIds")," to a specific draw ",Object(r.b)("strong",{parentName:"p"},"stage")," with a specific ",Object(r.b)("strong",{parentName:"p"},"entryStatus"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.addDrawEntries({\n  drawId,\n  eventId,\n  participantIds,\n  stage: MAIN, // optional\n  entryStatus: ALTERNATE, // optional\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"addevent"},"addEvent"),Object(r.b)("p",null,"Add an event object to a tournamentRecord."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.addEvent({ event });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"addevententries"},"addEventEntries"),Object(r.b)("p",null,"Adds participantIds to the entries array in an event"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.addEventEntries({\n  eventId,\n  participantIds,\n  stage: MAIN, // optional\n  entryStatus: ALTERNATE, // optional\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"addevententrypairs"},"addEventEntryPairs"),Object(r.b)("p",null,"Add ",Object(r.b)("strong",{parentName:"p"},"PAIR")," participant to an event. Creates new ",Object(r.b)("inlineCode",{parentName:"p"},"{ participantType: PAIR }")," participants if the combination of ",Object(r.b)("inlineCode",{parentName:"p"},"individualParticipantIds")," does not already exist."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.addEventEntryPairs({\n  eventId,\n  participantIdPairs,\n  entryStatus: ALTERNATE, // optional\n  entryStage: QUALIFYING, // optional\n  uuids, // optional - array of UUIDs to use for newly created pairs\n  allowDuplicateParticipantIdPairs, // optional - boolean - allow multiple pair participants with the same individualParticpantIds\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"addmatchupendtime"},"addMatchUpEndTime"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const endTime = '2020-01-01T09:05:00Z';\ntournamentEngine.addMatchUpEndTime({ drawId, matchUpId, endTime });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"addmatchupofficial"},"addMatchUpOfficial"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.addMatchUpOfficial({\n  drawId,\n  matchUpId,\n  participantId,\n  officialType,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"addparticipant"},"addParticipant"),Object(r.b)("p",null,"Adds an INDIVIDUAL, PAIR or TEAM participant to tournament participants. Includes integrity checks for ",Object(r.b)("inlineCode",{parentName:"p"},"{ participantType: PAIR }")," to insure ",Object(r.b)("inlineCode",{parentName:"p"},"participant.individualParticipantIds")," are valid."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const participantId = UUID();\nconst participant = {\n  participantId, // automatically generated if not provided\n  participantRole: COMPETITOR,\n  participantType: INDIVIDUAL,\n  person: {\n    standardFamilyName: 'Family',\n    standardGivenName: 'Given',\n    nationalityCode, // optional\n    sex, // optional\n  },\n};\n\ntournamentEngine.addParticipant({ participant });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"addparticipants"},"addParticipants"),Object(r.b)("p",null,"Bulk add participants to a tournamentRecord."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.addParticipants({ participants });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"addindividualparticipantids"},"addIndividualParticipantIds"),Object(r.b)("p",null,"Adds individualParticipantIds to GROUP or TEAM participants"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.addIndividualParticipantIds({\n  groupingParticipantId,\n  individualParticipantIds,\n  removeFromOtherTeams, // optional boolean\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"addpenalty"},"addPenalty"),Object(r.b)("p",null,"Add a penaltyItem to one or more particpants."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const createdAt = new Date().toISOString();\nconst penaltyData = {\n  refereeParticipantId, // optional\n  participantIds: [participantId],\n  penaltyType: BALL_ABUSE,\n  penaltyCode: 'Organization specific code', // optional\n  matchUpId,\n  issuedAt, // optional ISO timeStamp for time issued to participant\n  createdAt,\n  notes: 'Hit ball into sea',\n};\nlet result = tournamentEngine.addPenalty(penaltyData);\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"addplayoffstructures"},"addPlayoffStructures"),Object(r.b)("p",null,"Adds playoff structures to an existing drawDefinition."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.addPlayoffStructures({\n  drawId,\n  structureId,\n  roundNumbers: [3], // requires if not provided playoffPositions\n  playoffPositions: [3, 4], // required if not provided roundNumbers\n  playoffAttributes, // optional - object mapping exitProfiles to structure names, e.g. 0-1-1 for SOUTH\n  playoffStructureNameBase, // optional - base word for default playoff naming, e.g. 'Playoff'\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"setsuborder"},"setSubOrder"),Object(r.b)("p",null,"Assigns a subOrder value to a participant within a structure by drawPosition where participant has been assigned"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.setSubOrder({\n  drawId,\n  structureId,\n  drawPosition: 1,\n  subOrder: 2,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"addvenue"},"addVenue"),Object(r.b)("p",null,"Adds ",Object(r.b)("strong",{parentName:"p"},"venueId")," if not provided."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.addVenue({ venue: { venueName } });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"alloweddrawtypes"},"allowedDrawTypes"),Object(r.b)("p",null,"Returns an array of names of allowed Draw Types, if any applicable policies have been applied to the tournamentRecord."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const drawTypes = tournamentEngine.allowedDrawTypes();\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"allowedmatchupformats"},"allowedMatchUpFormats"),Object(r.b)("p",null,"Returns an array of TODS matchUpFormat codes for allowed scoring formats, if any applicable policies have been applied to the tournamentRecord."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const drawTypes = tournamentEngine.allowedDrawTypes();\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"alleventmatchups"},"allEventMatchUps"),Object(r.b)("p",null,"Returns all matchUps for an event."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { matchUps } = allEventMatchUps({\n  eventId,\n  inContext: true, // include contextual details\n  nextMatchUps: true, // include winner/loser target matchUp details\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"alltournamentmatchups"},"allTournamentMatchUps"),Object(r.b)("p",null,"Return an array of all matchUps contained within a tournament. These matchUps are returned ",Object(r.b)("strong",{parentName:"p"},"inContext"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { matchUps } = tournamentEngine.allTournamentMatchUps();\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"alternatedrawpositionassignment"},"alternateDrawPositionAssignment"),Object(r.b)("p",null,"Replaces an existing drawPosition assignment with an alternateParticipantId. This method is included in ",Object(r.b)("inlineCode",{parentName:"p"},"validActions")," for ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/positionActions"}),"positionActions")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.alternateDrawPositionAssignment({\n  drawId,\n  structureId,\n  drawPosition,\n  alternateParticipantId,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"assigndrawposition"},"assignDrawPosition"),Object(r.b)("p",null,"Low level function normally called by higher order convenience functions."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.assignDrawPosition({\n  drawId,\n  structureId,\n  drawPosition,\n  participantId, // optional - if assigning position to a participant\n  qualifier, // optional boolean, if assigning a space for a qualifier\n  bye, // optional boolean, if assigning a bye\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"assignmatchupcourt"},"assignMatchUpCourt"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.assignMatchUpCourt({\n  drawId, // drawId where matchUp is found\n  matchUpId,\n  courtId,\n  courtDayDate, // ISO date string\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"assignseedpositions"},"assignSeedPositions"),Object(r.b)("p",null,"Assign ",Object(r.b)("strong",{parentName:"p"},"seedNumbers")," to ",Object(r.b)("strong",{parentName:"p"},"participantIds")," within a target draw structure."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Provides the ability to assign seeding ",Object(r.b)("em",{parentName:"li"},"after")," a structure has been generated"),Object(r.b)("li",{parentName:"ul"},"To be used ",Object(r.b)("em",{parentName:"li"},"before")," participants are positioned")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"seedNumber")," is unique while ",Object(r.b)("strong",{parentName:"p"},"seedValue")," can be any string representation, e.g ",Object(r.b)("inlineCode",{parentName:"p"},'"5-8"')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let assignments = [{ seedNumber: 1, seedValue: 1, participantId }];\ntournamentEngine.assignSeedPositions({\n  eventId,\n  drawId,\n  structureId,\n  assignments,\n\n  stage, // opional; defaults to { stage: MAIN }\n  stageSequence, // optional; defaults to { stageSequence: 1 }\n  useExistingSeedLimits, // optional; restrict ability to assign seedNumbers beyond established limit\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"assigntiematchupparticipantid"},"assignTieMatchUpParticipantId"),Object(r.b)("p",null,"Used when interactively creating ",Object(r.b)("inlineCode",{parentName:"p"},"{ participantType: PAIR }")," participants."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"attacheventpolicy"},"attachEventPolicy"),Object(r.b)("p",null,"Attaches a policy to an event within a tournamentRecord."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/policies"}),"Policies"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.attachEventPolicy({\n  eventId,\n  policyDefinition: SEEDING_POLICY,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"attachpolicy"},"attachPolicy"),Object(r.b)("p",null,"Attaches a policy to a tournamentRecord."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/policies"}),"Policies"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.attachPolicy({ policyDefinition: SEEDING_POLICY });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"automatedpositioning"},"automatedPositioning"),Object(r.b)("p",null,"Positions participants in a draw structure."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/policies"}),"Policies"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.automatedPositioning({ drawId, structureId });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"bulkmatchupstatusupdate"},"bulkMatchUpStatusUpdate"),Object(r.b)("p",null,"Provides the ability to update the outcomes of multiple matchUps at once."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const outcomes = [\n  {\n    eventId,\n    drawId,\n    matchUpId,\n    matchUpFormat,\n    matchUpStatus,\n    winningSide,\n    score,\n  },\n];\ntournamentEngine.bulkMatchUpStatusUpdate({ outcomes });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"bulkschedulematchups"},"bulkScheduleMatchUps"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const schedule = {\n  scheduledTime: '08:00',\n  scheduledDayDate: '2021-01-01T00:00', // best practice to provide ISO date string\n  venueId,\n};\ntournamentEngine.bulkScheduleMatchUps({ matchUpIds, schedule });\n")),Object(r.b)("h2",{id:"bulkupdatepublishedeventids"},"bulkUpdatePublishedEventIds"),Object(r.b)("p",null,"Returns a filtered array of publishedEventIds from all eventIds which are included in a bulkMatchUpStatusUpdate. publishedEventIds can be used to determine which events to re-publish."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { publishedEventIds } = tournamentEngine.bulkUpdatePublishedEventIds({\n  outcomes,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"checkinparticipant"},"checkInParticipant"),Object(r.b)("p",null,"Set the check-in state for a participant. Used to determine when both participants in a matchUp are available to be assigned to a court."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.checkInParticipant({\n  drawId,\n  matchUpId,\n  participantId,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"checkoutparticipant"},"checkOutParticipant"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.checkOutParticipant({\n  drawId,\n  matchUpId,\n  participantId,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"deletecourt"},"deleteCourt"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.deleteCourt({\n  courtId,\n  force, // override warnings about matchUps scheduled on specified court\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"deletedrawdefinitions"},"deleteDrawDefinitions"),Object(r.b)("p",null,"Remove drawDefinitions from an event. An audit timeItem is added to the tournamentRecord whenever this method is called."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.deleteDrawDefinitions({\n  eventId,\n  drawIds: [drawId],\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"deleteflightandflightdraw"},"deleteFlightAndFlightDraw"),Object(r.b)("p",null,"Removes flight from event's flightProfile as well as associated drawDefinition (if generated)."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.deleteFlightAndFlightDraw({ eventId, drawId });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"deleteflightprofileandflightdraws"},"deleteFlightProfileAndFlightDraws"),Object(r.b)("p",null,"Removes flightProfiles and all associated drawDefinitions from a specified event."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.deleteFlightProfileAndFlightDraws({ eventId });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"deleteevents"},"deleteEvents"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.deleteEvents({ eventIds });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"deleteparticipants"},"deleteParticipants"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.deleteParticipants({ paricipantIds });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"deletevenue"},"deleteVenue"),Object(r.b)("p",null,"If a venue has scheduled matchUps then it will not be deleted unless ",Object(r.b)("inlineCode",{parentName:"p"},"{ force: true }")," in which case all relevant matchUps will be unscheduled."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.deleteVenue({ venueId, force });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"deletevenues"},"deleteVenues"),Object(r.b)("p",null,"If a venue has scheduled matchUps then it will not be deleted unless ",Object(r.b)("inlineCode",{parentName:"p"},"{ force: true }")," in which case all relevant matchUps will be unscheduled."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.deleteVenues({ venueIds, force });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"destroypairentry"},"destroyPairEntry"),Object(r.b)("p",null,"Removes a ",Object(r.b)("inlineCode",{parentName:"p"},"{ participantType: PAIR }")," entry from an event and adds the individualParticipantIds to entries as entryStatus: UNPAIRED"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.destroyPairEntry({\n  eventId,\n  participantId,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"devcontext"},"devContext"),Object(r.b)("p",null,"Setting devContext(true) bypasses ",Object(r.b)("strong",{parentName:"p"},"try {} catch (err) {}")," code block and in some cases enables enhanced logging"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.devContext(true);\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"eventmatchups"},"eventMatchUps"),Object(r.b)("p",null,"Returns matchUps for an event grouped by status."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  abandonedMatchUps,\n  byeMatchUps,\n  completedMatchUps,\n  pendingMatchUps,\n  upcomingMatchUps,\n} = tournamentEngine.eventMatchUps({\n  eventId,\n  nextMatchUps, // optional boolean; include winner/loser target matchUp details\n  matchUpFilters,\n  contextFilters,\n  tournamentAppliedPolicies,\n  inContext: true, // optional - adds context details to all matchUps\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"findcourt"},"findCourt"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { court } = tournamentEngine.findCourt({ courtId });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"findmatchup"},"findMatchUp"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  matchUp,\n  structure, // returned for convenience\n} = tournamentEngine.findMatchUp({\n  drawId,\n  matchUpId,\n  inContext, // optional - boolean - returns matchUp with additional attributes\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"findparticipant"},"findParticipant"),Object(r.b)("p",null,"Find tournament participant by either ",Object(r.b)("inlineCode",{parentName:"p"},"participantId")," or ",Object(r.b)("inlineCode",{parentName:"p"},"personId"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { participant } = tournamentEngine.findParticipant({\n  participantId,\n  personId, // required only if no participantId provided\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"findvenue"},"findVenue"),Object(r.b)("p",null,"Returns a complete venue object. Primarily used internally."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.findVenue({ venueId });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"generatedrawdefinition"},"generateDrawDefinition"),Object(r.b)("p",null,"This is a convenience method which handles most use cases for draw generation."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const drawDefinitionValues = {\n  eventId, // optional - used to find any avoidance policies to be applied\n  drawSize, // number of drawPositions in the first draw structure\n  drawType, // optional - defaults to SINGLE_ELIMINATION\n  drawName, // cutom name for generated draw structure(s)\n  automated, // optional - whether or not to automatically place participants in structures\n  matchUpType, // optional - SINGLES, DOUBLES, or TEAM\n  matchUpFormat, // optional - default matchUpFormatCode for all contained matchUps\n  playoffMatchUpFormat, // optional - relevant for ROUND_ROBIN_WITH_PLAYOFFS\n  tieFormat, // optional - { collectionDefinitions, winCriteria } for 'dual' or 'tie' matchUps\n  seedsCount, // optional - number of seeds to generate if no seededParticipants provided\n  seededParticipants, // optional - { participantId, seedNumber, seedValue }\n  seedingProfile, // optional - used to specify WATERFALL seeding for ROUND_ROBIN\n  qualifyingRound, // optional - used to derive roundLimit\n  structureOptions, // optional - for ROUND_ROBIN - { groupSize, playoffGroups }\n  policyDefinitions, // optional - seeding or avoidance policies to be used when placing participants\n  qualifyingPositions, // optional - number of positions in draw structure to be filled by qualifiers\n};\n\nconst { drawDefinition } = tournamentEngine.generateDrawDefinition(\n  drawDefinitionValues\n);\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"generateflightprofile"},"generateFlightProfile"),Object(r.b)("p",null,"Splits event entries into # of draws. ",Object(r.b)("inlineCode",{parentName:"p"},"flightProfile")," is an extension on an event which contains attributes to be used by ",Object(r.b)("inlineCode",{parentName:"p"},"generateDrawDefinition"),"."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/scaleItems"}),"Scale Items"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const scaleAttributes = {\n  scaleType: RATING,\n  eventType: SINGLES,\n  scaleName: 'WTN',\n  accessor, // optional - string determining how to access attribute if scaleValue is an object\n};\n\nconst { flightProfile, splitEntries } = tournamentEngine.generateFlightProfile({\n  eventId, // event for which entries will be split\n  scaleAttributes, // defines participant sort method prior to split\n  scaleSortMethod, // optional - function(a, b) {} sort method, useful when scaleValue is an object or further proessing is required\n  sortDescending, // optional - default sorting is ASCENDING; only applies to default sorting method.\n  flightsCount: 3, // number of draws to be created\n  deleteExisting: true, // optional - remove existing flightProfile\n  splitMethod: SPLIT_WATERFALL, // optional - defaults to SPLIT_LEVEL_BASED\n  drawNames: ['Green Flight', 'Blue Flight'], // optional\n  drawNameRoot: 'Flight', // optional - used to generate drawNames, e.g. 'Flight 1', 'Flight 2'\n});\n\nconst {\n  flights: [\n    {\n      drawId, // unique identifier for generating drawDefinitions\n      drawName, // custom name for generated draw\n      drawEntries, // entries allocated to target draw\n    },\n  ],\n} = flightProfile;\n\n// use flight information to generate drawDefinition\nconst {\n  flights: [flight],\n} = flightProfile;\n\nObject.assign(drawDefinitionValues, flight);\nconst { drawDefinition } = tournamentEngine.generateDrawDefinition(\n  drawDefinitionValues\n);\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"generateteamsfromparticipantattribute"},"generateTeamsFromParticipantAttribute"),Object(r.b)("p",null,"Uses attributes of individual participnts or persons to generate ",Object(r.b)("inlineCode",{parentName:"p"},"{ participantType: TEAM }")," participants."),Object(r.b)("p",null,"Returns count of # of TEAM participants added;"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  participantsAdded,\n} = tournamentEngine.generateTeamsFromParticipantAttribute({\n  participantAttribute,\n  personAttribute, // optional - attribute of person object\n  uuids, // optional - uuids to assign to generated participants\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getavailableplayoffrounds"},"getAvailablePlayoffRounds"),Object(r.b)("p",null,"Returns rounds of a structure which are available for adding playoff structures."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  playoffRounds,\n  playoffRoundsRanges,\n} = tournamentEngine.getAvailablePlayoffRounds({\n  drawId,\n  structureId,\n});\n")),Object(r.b)("p",null,"...For a SINGLE_ELIMINATION struture with drawSize: 16 would return:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"    {\n      playoffRounds: [ 1, 2, 3 ],\n      playoffRoundsRanges: [\n        { round: 1, range: '9-16' },\n        { round: 2, range: '5-8' },\n        { round: 3, range: '3-4' }\n      ]\n    }\n\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getcourtinfo"},"getCourtInfo"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  altitude,\n  courtId,\n  courtName,\n  courtDimensions,\n  latitude,\n  longitude,\n  surfaceCategory,\n  surfaceType,\n  surfaceDate,\n  pace,\n  notes,\n} = tournamentEngine.getCourtInfo({ courtId });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getcourts"},"getCourts"),Object(r.b)("p",null,"Returns courts associated with a tournaments; optionall filter by venue(s)."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { courts } = tournamentEngine.getCourts({\n  venueId, // optional - return courts for a specific venue\n  venueIds, // optional - return courts for specified venues\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getdrawdata"},"getDrawData"),Object(r.b)("p",null,"Primarily used by ",Object(r.b)("inlineCode",{parentName:"p"},"getEventData")," for publishing purposes."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  drawInfo: {\n    drawActive, // boolean - draw has active matchUps\n    drawCompleted, // boolean - all draw matchUps are complete\n    drawGenerated, // boolean - draw has structures containing matchUps\n  },\n  structures,\n} = getDrawData({ drawDefinition });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getevent"},"getEvent"),Object(r.b)("p",null,"Get an event by either its ",Object(r.b)("inlineCode",{parentName:"p"},"eventId")," or by a ",Object(r.b)("inlineCode",{parentName:"p"},"drawId")," which it contains. Also returns ",Object(r.b)("inlineCode",{parentName:"p"},"drawDefinition")," if a ",Object(r.b)("inlineCode",{parentName:"p"},"drawId")," is specified."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  event,\n  drawDefinition, // only returned if drawId is specified\n} = tournamentEngine.getEvent({\n  eventId, // optional - find event by eventId\n  drawId, // optional - find the event which contains specified drawId\n});\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"@param {string} eventId - id of the event to retreive"),Object(r.b)("li",{parentName:"ul"},"@param {object} context - attributes to be added into each event object.")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"geteventappliedpolicies"},"getEventAppliedPolicies"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { appliedPolicies } = tournamentEngine.getEventAppliedPolicies({\n  eventId,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getevents"},"getEvents"),Object(r.b)("p",null,"Return ",Object(r.b)("strong",{parentName:"p"},"deepCopies")," of all events in a tournament record."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { events } = tournamentEngine.getEvents();\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"geteventproperties"},"getEventProperties"),Object(r.b)("p",null,"Gather attributes of events which come from other tournament elements, e.g. participants which have rankings/ratings/seedings for a given event."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  entryScaleAttributes,\n  hasSeededParticipants,\n  hasRankedParticipants,\n  hasRatedParticipants,\n} = tournamentEngine.getEventProperties({ eventId });\n")),Object(r.b)("p",null,"... where ",Object(r.b)("strong",{parentName:"p"},"entryScaleAttributes")," is an array of { prticipantId, participantName, seed, ranking, rating }"),Object(r.b)("hr",null),Object(r.b)("h2",{id:"geteventdata"},"getEventData"),Object(r.b)("p",null,"Returns event information optimized for publishing: ",Object(r.b)("inlineCode",{parentName:"p"},"matchUps")," have context and separated into rounds for consumption by visualization libraries such as ",Object(r.b)("inlineCode",{parentName:"p"},"tods-react-draws"),"."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#publishEvent"}),"publishEvent")," for details on ",Object(r.b)("inlineCode",{parentName:"p"},"policyDefinition"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { eventData } = tournamentEngine.getEventData({\n  drawId,\n  policyDefinition, // optional\n});\nconst { drawsData, venuesData, eventInfo, tournamentInfo } = eventData;\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getmatchupformat"},"getMatchUpFormat"),Object(r.b)("p",null,"Returns ",Object(r.b)("inlineCode",{parentName:"p"},"matchUpFormat")," codes for specified context(s). Refer to ",Object(r.b)("inlineCode",{parentName:"p"},"getMatchUpFormat.test.js")," for specfic use cases."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"matchUpFormat")," for each matchUp is determined by traversing the hierarchy: ",Object(r.b)("inlineCode",{parentName:"p"},"matchUp => stucture => drawDefinition => event")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  matchUpFormat,\n  structureDefaultMatchUpFormat,\n  drawDefaultMatchUpFormat,\n  eventDefaultMatchUpFormat,\n} = tournamentEngine.getMatchUpFormat({\n  eventId,\n  drawId,\n  structureId,\n  matchUpId,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getmatchupscheduledetails"},"getMatchUpScheduleDetails"),Object(r.b)("p",null,"Returns the latest values for all ",Object(r.b)("inlineCode",{parentName:"p"},"matchUp.timeItems"),", along with calculated values, that relate to the scheduling of a ",Object(r.b)("inlineCode",{parentName:"p"},"matchUp"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  schedule: {\n    time,\n    courtId,\n    venueId,\n    startTime,\n    endTime,\n    milliseconds,\n    scheduledDate,\n    scheduledTime,\n  },\n} = tournamentEngine.getMatchUpScheduleDetails({ matchUp });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getpairedparticipant"},"getPairedParticipant"),Object(r.b)("p",null,"Returns the ",Object(r.b)("inlineCode",{parentName:"p"},"{ participantType: PAIR }"),", if any, which contains the specified ",Object(r.b)("inlineCode",{parentName:"p"},"individualParticipantIds"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { participant } = tournamentEngine.getPairedParticipant({\n  participantIds: individualParticipantIds,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getparticipanteventdetails"},"getParticipantEventDetails"),Object(r.b)("p",null,"Returns an array of eventDetails in which a specified ",Object(r.b)("inlineCode",{parentName:"p"},"participantId")," appears. Used primarily by ",Object(r.b)("inlineCode",{parentName:"p"},"tournamentEngine.tournamentParticipants()")," to add context."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { eventDetails } = tournamentEngine.getParticipantEventDetails({\n  participantId,\n});\n\nconst [{ eventName, eventId }] = eventDetails;\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getparticipantidfinishingpositions"},"getParticipantIdFinishingPositions"),Object(r.b)("p",null,"Returns the Range of finishing positions possible for all participantIds within a draw"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const idMap = tournamentEngine.getParticipantIdFinishingPositions({\n  drawId,\n  byeAdvancements, // optional boolean - whether or not to consider byeAdvancements\n});\n\nconst {\n  relevantMatchUps,\n  finishingPositionRanges,\n  finishingPositionRange,\n} = idMap[participantId];\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getparticipantmembership"},"getParticipantMembership"),Object(r.b)("p",null,"Returns all grouping participants which include ",Object(r.b)("inlineCode",{parentName:"p"},"participantId")," in ",Object(r.b)("inlineCode",{parentName:"p"},"{ individualParticipantIds }"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  [PAIR]: doublesParticipantIds,\n  [GROUP]: groupParticipantIds,\n  [TEAM]: teamParticipantIds,\n} = tournamentEngine.getParticipantMembership({\n  participantId,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getparticipantscaleitem"},"getParticipantScaleItem"),Object(r.b)("p",null,"Return a ranking or rating or seeding value for a participant, referenced by participantId."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/scaleItems"}),"Scale Items"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const scaleAttributes = {\n  scaleType: RATING,\n  eventType: SINGLES,\n  scaleName: 'WTN',\n  accessor, // optional - string determining how to access attribute if scaleValue is an object\n};\nconst {\n  scaleItem: { scaleValue },\n} = tournamentEngine.getParticipantScaleItem({\n  participantId,\n  scaleAttributes,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getparticipantsigninstatus"},"getParticipantSignInStatus"),Object(r.b)("p",null,"Participant signInStatus can be either 'SIGNED_IN' or 'SIGNED_OUT' (or undefined). See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#modifyParticipantsSignInStatus"}),"modifyParticipantsSignInStatus"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const signInStatus = tournamentEngine.getParticipantSignInStatus({\n  participantId,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getpolicydefinition"},"getPolicyDefinition"),Object(r.b)("p",null,"Finds policyDefinition for either draw (if drawId), event (if eventId), or tournament, in that order. This enables a default policy to be attached to the tournament record and for event-specific or draw-specific policies to override the default(s)."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/policies"}),"Policies"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { policyDefinition } = tournamentEngine.getPolicyDefinition({\n  policyType: POLICY_TYPE_SEEDING,\n  eventId, // optional\n  drawId, // optional\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getpositionassignments"},"getPositionAssignments"),Object(r.b)("p",null,"Returns an array of ",Object(r.b)("inlineCode",{parentName:"p"},"positionAssignments")," for a structure. Combines ",Object(r.b)("inlineCode",{parentName:"p"},"positionAssginments")," for child structures in the case of ROUND_ROBIN where ",Object(r.b)("inlineCode",{parentName:"p"},"{ structureType: CONTAINER }"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let { positionAssignments } = getPositionAssignments({\n  drawDefinition, // optional if { structure } is provided\n  structureId, // optional if { structure } is provided\n  structure, // optional if { drawDefinition, structureId } are provided\n});\n\nconst [{ drawPosition, participantId, qualifier, bye }] = positionAssignments;\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getscaledentries"},"getScaledEntries"),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/scaleItems"}),"Scale Items"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { scaledEntries } = tournamentEngine.getScaledEntries({\n  eventId,\n  stage, // optional - filter entries by stage\n\n  scaleAttributes,\n  scaleSortMethod, // optional - function(a, b) {} sort method, useful when scaleValue is an object or further proessing is required\n  sortDescending, // optional - default sorting is ASCENDING; only applies to default sorting method.\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getseedscount"},"getSeedsCount"),Object(r.b)("p",null,"Takes a policyDefinition, drawSize and participantCount and returrns the number of seeds valid for the specified drawSize"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { seedsCount, error } = getSeedsCount({\n  drawSizeProgression, // optional - fits the seedsCount to the participantsCount rather than the drawSize\n  policyDefinition: SEEDING_USTA,\n  participantCount: 15,\n  drawSize: 128,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getstate"},"getState"),Object(r.b)("p",null,"Returns a deep copy of the current tournamentEngine state."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { tournamentRecord } = tournamentEngine.getState({\n  convertExtensions, // optional - convert extensions to '_' prefixed attributes\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"gettournamentparticipants"},"getTournamentParticipants"),Object(r.b)("p",null,"Returns ",Object(r.b)("strong",{parentName:"p"},"deepCopies")," of tournament participants filtered by participantFilters which are arrays of desired participant attribute values"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { tournamentParticipants } = tournamentEngine.getTournamentParticipants({\n  participantFilters: { participantTypes: [INDIVIDUAL] },\n  inContext, // optional - adds individualParticipants for all individualParticipantIds\n  withStatistics, // optional - adds events, machUps and statistics, e.g. 'winRatio'\n  withOpponents, // optional - include opponent participantIds\n  withMatchUps, // optional - include all matchUps in which the participant appears\n  convertExtensions, // optional - BOOLEAN - convert extensions so _extensionName attributes\n  policyDefinition, // optional - can accept a privacy policy to filter participant attributes\n});\n")),Object(r.b)("p",null,"participantFilters imlemented: eventIds, participantTypes, participantRoles, signInStatus"),Object(r.b)("hr",null),Object(r.b)("h2",{id:"gettournamentpenalties"},"getTournamentPenalties"),Object(r.b)("p",null,"Returns an array of all penalties issued during a tournament."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { penalties } = tournamentEngine.getTournamentPenalties();\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"gettournamentinfo"},"getTournamentInfo"),Object(r.b)("p",null,"Returns tournament attributes. Used to attach details to publishing payload by ",Object(r.b)("inlineCode",{parentName:"p"},"getEventData"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { tournamentInfo } = getTournamentInfo({ tournamentRecord });\nconst {\n  tournamentId,\n  tournamentRank,\n\n  formalName,\n  tournamentName,\n  promotionalName,\n  onlineResources,\n\n  localTimeZone,\n  startDate,\n  endDate,\n\n  hostCountryCode,\n  tournamentContacts,\n  tournamentAddresses,\n} = tournamentInfo;\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getvenues"},"getVenues"),Object(r.b)("p",null,"Returns an array of all Venues which are part of a tournamentRecord."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { venues } = tournamentEngine.getVenues();\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"getvenuedata"},"getVenueData"),Object(r.b)("p",null,"Returns restricted venue attributes along with information for all associated courts. Used primarily by ",Object(r.b)("inlineCode",{parentName:"p"},"getEventData")," to return a subset of venue/courts information for publishing purposes."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  venueName,\n  venueAbbreviation,\n  courtsInfo, // array of courts and associated attributes\n} = tournamentEngine.getVenueData({ venueId });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"luckyloserdrawpositionassignment"},"luckyLoserDrawPositionAssignment"),Object(r.b)("p",null,"Replaces an existing drawPosition assignment with a luckyLoserParticipantId. This method is included in ",Object(r.b)("inlineCode",{parentName:"p"},"validActions")," for ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/positionActions"}),"positionActions")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.luckyLoserDrawPositionAssignment({\n  drawId,\n  structureId,\n  drawPosition,\n  luckyLoserParticipantId,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"matchupactions"},"matchUpActions"),Object(r.b)("p",null,"Return an array of all validActions for a specific matchUp."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  isByeMatchUp, // boolean; true if matchUp includes a BYE\n  structureIsComplete, // boolean; true if structure is ready for positioning\n  validActions, // array of possible actions given current matchUpStatus\n} = tournamentEngine.matchUpActions({\n  drawId, // optional - not strictly required; method will find matchUp by brute force without it\n  matchUpId,\n});\n\nconst {\n  type, // 'REFEREE', 'SCHEDULE', 'PENALTY', 'STATUS', 'SCORE', 'START', 'END'.\n  method, // tournamentEngine method relating to action type\n  payload, // attributes to be passed to method\n  // additional method-specific options for values to be added to payload when calling method\n} = validAction;\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"mergeparticipants"},"mergeParticipants"),Object(r.b)("p",null,"Merge ",Object(r.b)("inlineCode",{parentName:"p"},"participants")," array with existing tournament participants. Useful when synchronizing with a remote registration service, for example."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.mergeParticipants({ participants });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"modifycourtavailability"},"modifyCourtAvailability"),Object(r.b)("p",null,"Modifies the ",Object(r.b)("inlineCode",{parentName:"p"},"dateAvailability")," attribute of a specified court. Warns if existing scheduled matchUps would be affected."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const result = tournamentEngine.modifyCourtAvailability({\n  courtId,\n  dateAvailability,\n  force, // override warning that existing scheduled matchUps exist\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"modifyevententries"},"modifyEventEntries"),Object(r.b)("p",null,"Modify the entries for an event. For DOUBLES events automatically create PAIR participants if not already present."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.modifyEventEntries({\n  eventId,\n  entryStage = MAIN,\n  participantIdPairs = [],\n  unpairedParticipantIds = [],\n  entryStatus = DIRECT_ACCEPTANCE,\n})\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"modifyindividualparticipantids"},"modifyIndividualParticipantIds"),Object(r.b)("p",null,"Modify ",Object(r.b)("inlineCode",{parentName:"p"},"individualParticipantIds")," of a grouping participant ",Object(r.b)("inlineCode",{parentName:"p"},"{ participantType: TEAM || GROUP }"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.devContext(true).modifyIndividualParticipantIds({\n  groupingParticipantId, // participant (TEAM or GROUP) to which participantIds are to be added\n  individualParticipantIds: newIndividualParticipantIds,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"modifyparticipant"},"modifyParticipant"),Object(r.b)("p",null,"Modifies attributes of a participant with integrity checks to insure valid values for e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"{ participantType, participantRole }"),". Adds participant if not found."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.modifyParticipant({\n  participant: updatedIndividualParticipant,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"modifypenalty"},"modifyPenalty"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const penaltyData = {\n  participantIds: [participantId],\n  penaltyType: BALL_ABUSE,\n  matchUpId,\n  issuedAt,\n  notes: 'Hit ball into sea',\n};\nlet result = tournamentEngine.addPenalty(penaltyData);\nconst { penaltyId } = result;\n\nconst notes = 'Hit ball into spectator';\nconst modifications = { notes };\ntournamentEngine.modifyPenalty({ penaltyId, modifications });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"modifyparticipantssigninstatus"},"modifyParticipantsSignInStatus"),Object(r.b)("p",null,"Modify the signInStatus of multiple participants, referenced by participantId."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.modifyParticipantsSignInStatus({\n  participantIds: [participantId],\n  signInState: SIGNED_IN,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"modifyseedassignment"},"modifySeedAssignment"),Object(r.b)("p",null,"Change the display representation of a seedNumber for a specified ",Object(r.b)("inlineCode",{parentName:"p"},"participantId"),". This method is included in ",Object(r.b)("inlineCode",{parentName:"p"},"validActions")," for ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/positionActions"}),"positionActions"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.modifySeedAssignment({\n  drawId,\n  structureId,\n  participantId,\n  seedValue, // display representation such as '5-8'\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"newtournamentrecord"},"newTournamentRecord"),Object(r.b)("p",null,"Creates a new tournamentRecord in tournamentEngine state."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.newTournamentRecord({\n  tournamentId, // optional - will be generated if not provided\n});\n\nconst { tournamentRecord } = tournamentEngine.getState();\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"participantscaleitem"},"participantScaleItem"),Object(r.b)("p",null,"Similar to ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#getParticipantScaleItem"}),"getParticipantScaleItem")," but takes a ",Object(r.b)("inlineCode",{parentName:"p"},"participant")," object and doesn't require ",Object(r.b)("inlineCode",{parentName:"p"},"tournamentEngine.setState(tournamentRecord)"),"."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/scaleItems"}),"Scale Items"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const scaleAttributes = {\n  scaleType: RATING,\n  eventType: SINGLES,\n  scaleName: 'WTN',\n  accessor, // optional - string determining how to access attribute if scaleValue is an object\n};\nconst {\n  scaleItem: { scaleValue },\n} = tournamentEngine.participantScaleItem({\n  participant,\n  scaleAttributes,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"positionactions"},"positionActions"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const positionActions = tournamentEngine.positionActions({\n  drawId,\n  structureId,\n  drawPosition,\n  policyDefinition: positionActionsPolicy, // optional - policy definiting what actions are allowed in client context\n});\n\nconst {\n  isActiveDrawPosition, // boolean\n  isByePosition, // boolean\n  isDrawPosition, // boolean\n  hasPositionAssiged, // boolean\n  validActions,\n} = positionActions;\n\nconst {\n  type, // 'ASSIGN', 'LUCKY', 'SWAP', 'BYE', 'REMOVE'\n  method, // tournamentEngine method relating to action type\n  payload, // attributes to be passed to method\n  // additional method-specific options for values to be added to payload when calling method\n} = validAction;\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"publishevent"},"publishEvent"),Object(r.b)("p",null,"Utilizes ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#getEventData"}),"getEventData")," to prepare data for display. Differs from ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#getEventData"}),"getEventData")," in that it modifies the ",Object(r.b)("inlineCode",{parentName:"p"},"publishState")," of the event. Subscriptions or middleware may be used to deliver the generated payload for presentation on a public website."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/policies"}),"Policies")," for more details on ",Object(r.b)("inlineCode",{parentName:"p"},"policyDefinitions"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const policyDefinition = Object.assign(\n  {},\n  ROUND_NAMING_POLICY,\n  PARTICIPANT_PRIVACY_DEFAULT\n);\n\nconst { eventData } = tournamentEngine.publishEvent({\n  eventId,\n  policyDefinition,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"rankbyratings"},"rankByRatings"),Object(r.b)("hr",null),Object(r.b)("h2",{id:"regeneratedrawdefinition"},"regenerateDrawDefinition"),Object(r.b)("hr",null),Object(r.b)("h2",{id:"removedrawpositionassignment"},"removeDrawPositionAssignment"),Object(r.b)("p",null,"Clear draw position and optionally replace with a BYE, change entryStatus, or decompose a PAIR particpant into UNPAIRED participants (DOUBLES only)."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"removeDrawPositionAssignment({\n  drawDefinition,\n  mappedMatchUps,\n  structureId,\n  drawPosition,\n  replaceWithBye, // optional\n  entryStatus, // optional - change the entryStatus of the removed participant\n  destroyPair, // optional - decompose PAIR participant into UNPAIRED participants\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"removedrawentries"},"removeDrawEntries"),Object(r.b)("p",null,"Removes participantIds from ",Object(r.b)("inlineCode",{parentName:"p"},"drawDefinition.entries")," (if generated) as well as any relevent ",Object(r.b)("inlineCode",{parentName:"p"},"flightProfile.flights"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.removeDrawEntries({ drawId, eventId, participantIds });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"removeevententries"},"removeEventEntries"),Object(r.b)("p",null,"Removes ",Object(r.b)("inlineCode",{parentName:"p"},"participantIds")," from ",Object(r.b)("inlineCode",{parentName:"p"},"event.entries")," with integrity checks."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.removeEventEntries({ eventId, participantIds });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"removeparticipantidsfromallteams"},"removeParticipantIdsFromAllTeams"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.removeParticipantIdsFromAllTeams({\n  individualParticipantIds,\n  groupingType, // optional - restrict to removing from only specified groupingType\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"removeindividualparticipantids"},"removeIndividualParticipantIds"),Object(r.b)("p",null,"Remove an array of individualParticipantIds from a grouping participant ","[TEAM, GROUP]"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.removeIndividualParticipantIds({\n  groupingParticipantId,\n  individualParticipantIds,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"removepenalty"},"removePenalty"),Object(r.b)("p",null,"Removes a penalty from all relevant tournament participants."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.removePenalty({ penaltyId });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"setdrawdefaultmatchupformat"},"setDrawDefaultMatchUpFormat"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.setDrawDefaultMatchUpFormat({\n  drawId,\n  matchUpFormat, // TODS matchUpFormatCode\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"setdrawparticipantrepresentatives"},"setDrawParticipantRepresentatives"),Object(r.b)("p",null,"Set the participantIds of participants in the draw who are representing players by observing the creation of the draw."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.setDrawParticipantRepresentatives({\n  drawId,\n  representativeParticipantIds,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"seteventdefaultmatchupformat"},"setEventDefaultMatchUpFormat"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.setEventDefaultMatchUpFormat({\n  eventId,\n  matchUpFormat, // TODS matchUpFormatCode\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"setmatchupstatus"},"setMatchUpStatus"),Object(r.b)("p",null,"Sets either matchUpStatus or score and winningSide; values to be set are passed in outcome object. Handles any winner/loser participant movements within or across structures."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const outcome = {\n  score,\n  winningSide,\n  matchUpStatus,\n};\n\ntournamentEngine.setMatchUpStatus({\n  drawId,\n  matchUpId,\n  matchUpTieId, // optional - if part of a TIE matchUp\n  outcome,\n  matchUpStatus, // optional - if matchUpFormat differs from event/draw/structure defaults\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"setparticipantscaleitem"},"setParticipantScaleItem"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"scaleItem = {\n  scaleValue: 12,\n  scaleName: 'U16',\n  scaleType: RANKING,\n  eventType: SINGLES,\n  scaleDate: '2020-06-06',\n};\n\nresult = tournamentEngine.setParticipantScaleItem({\n  participantId,\n  scaleItem,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"setparticipantscaleitems"},"setParticipantScaleItems"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const scaleItemsWithParticipantIds = [\n  {\n    participantId,\n    scaleItems: [\n      {\n        scaleValue: 8.3,\n        scaleName: 'WTN',\n        scaleType: RATING,\n        eventType: SINGLES,\n        scaleDate: '2021-01-01',\n      },\n    ],\n  },\n];\ntournamentEngine.setParticipantScaleItems({ scaleItemsWithParticipantIds });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"setstructuredefaultmatchupformat"},"setStructureDefaultMatchUpFormat"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.setStructureDefaultMatchUpFormat({\n  drawId,\n  structureId,\n  matchUpFormat, // TODS matchUpFormatCode\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"setstate"},"setState"),Object(r.b)("p",null,"Loads a tournament record into tournamentEngine."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.setsState(tournamentRecord, deepCopy);\n")),Object(r.b)("p",null,"By default a deep copy of the tournament record is made so that mutations made by tournamentEngine do not affect the source object. An optional boolean parameter, ",Object(r.b)("em",{parentName:"p"},"deepCopy")," can be set to false to override this default behavior."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"setsubscriptions"},"setSubscriptions"),Object(r.b)("p",null,"Please refer to the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/subscriptions"}),"Subscriptions")," in General Concepts."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"settournamentcategories"},"setTournamentCategories"),Object(r.b)("p",null,"Define categories to be used in event creation for tournament record."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const categories = [\n  {\n    categoryName: 'U18',\n    type: eventConstants.AGE,\n  },\n  {\n    categoryName: 'U16',\n    type: eventConstants.AGE,\n  },\n  {\n    categoryName: 'WTN',\n    type: eventConstants.RATING,\n  },\n];\ntournamentEngine.setTournamentCategories({ categories });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"settournamentenddate"},"setTournamentEndDate"),Object(r.b)("p",null,"Accepts an ISO String Date;"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.setTournamentEndDate({ endDate });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"settournamentname"},"setTournamentName"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const tournamentName = 'CourtHive Challenge';\ntournamentEngine.setTournamentName({\n  tournamentName,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"settournamentnotes"},"setTournamentNotes"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.setTournamentNotes({ notes });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"settournamentstartdate"},"setTournamentStartDate"),Object(r.b)("p",null,"Accepts an ISO String Date;"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.setTournamentStartDate({ StartDate });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"toggleparticipantcheckinstate"},"toggleParticipantCheckInState"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.toggleParticipantCheckInState({\n  drawId,\n  matchUpId,\n  participantId,\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"tournamentmatchups"},"tournamentMatchUps"),Object(r.b)("p",null,"Returns tournament matchUps grouped by matchUpStatus. These matchUps are returned with ",Object(r.b)("em",{parentName:"p"},"context"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const {\n  abandonedMatchUps,\n  byeMatchUps,\n  completedMatchUps,\n  pendingMatchUps,\n  upcomingMatchUps,\n} = tournamentEngine.tournamentMatchUps();\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"unpublishevent"},"unPublishEvent"),Object(r.b)("p",null,"Modifies the ",Object(r.b)("inlineCode",{parentName:"p"},"publishState")," of an event. ",Object(r.b)("inlineCode",{parentName:"p"},"Subscriptions")," or middleware can be used to trigger messaging to services which make event data visible on public websites."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.unPublishEvent({ eventId });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"updatedrawidsorder"},"updateDrawIdsOrder"),Object(r.b)("p",null,"Updates the ",Object(r.b)("inlineCode",{parentName:"p"},"drawOrder")," attribute of all ",Object(r.b)("inlineCode",{parentName:"p"},"drawDefinitions")," within an event. The ",Object(r.b)("inlineCode",{parentName:"p"},"drawOrder")," attribute can be used for sorting or for differentiating ",Object(r.b)("inlineCode",{parentName:"p"},"drawDefinitions"),' for the award of rankings points, when "flighting" separates participants by some ',Object(r.b)("inlineCode",{parentName:"p"},"scaleValue"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.updateDrawIdsOrder({\n  event,\n  orderedDrawIdsMap: {\n    'id-Of-draw-1': 1,\n    'id-of-draw-2': 2,\n  },\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"withdrawparticipantatdrawposition"},"withdrawParticipantAtDrawPosition"),Object(r.b)("p",null,"Thin wrapper around ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#removeDrawPositionAssignment"}),"removeDrawPositionAssignment"),". This method is included in ",Object(r.b)("inlineCode",{parentName:"p"},"validActions")," for ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/positionActions"}),"positionActions"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"withdrawParticipantAtDrawPosition({\n  drawDefinition,\n  mappedMatchUps,\n  structureId,\n  drawPosition,\n  replaceWithBye, // optional\n  entryStatus = WITHDRAWN,\n  destroyPair, // optional - decompose PAIR participant into UNPAIRED participants\n});\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"version"},"version"),Object(r.b)("p",null,"Returns NPM package version. Can be used in configurations that utilize Competition Factory engines on both client and server to ensure equivalency."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const version = tournamentEngine.version();\n")),Object(r.b)("hr",null))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/tournamentEngine/documentation/api.md"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-tournament-engine-documentation-api-md-bd26b81f63a1606e3db4.js.map