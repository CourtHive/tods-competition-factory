(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{FIPt:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return c})),a.d(t,"default",(function(){return l}));var n=a("Fcif"),r=a("+I+c"),i=a("/FXl"),o=a("TjRS"),c=(a("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/mocksEngine/documentation/api.md"}});var p={_frontmatter:c},b=o.a;function l(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)(b,Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"mocksengine-api-reference"},"mocksEngine API Reference"),Object(i.b)("h2",{id:"generateoutcomefromscorestring"},"generateOutcomeFromScoreString"),Object(i.b)("p",null,"Generates TODS score object from parseable score string."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {string} scoreString - parseable score string, e.g. '6-0 6-0'"),Object(i.b)("li",{parentName:"ul"},"@param {number} winningSide - optional - valid values are ","[1, 2, undefined]")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"generateparticipants"},"generateParticipants"),Object(i.b)("p",null,"Generate mock participants. This method is used within ",Object(i.b)("inlineCode",{parentName:"p"},"generateTournamentRecord")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {string[]} nationalityCodes - an array of ISO codes to randomly assign to participants"),Object(i.b)("li",{parentName:"ul"},"@param {number} nationalityCodesCount - number of nationality codes to use when generating participants"),Object(i.b)("li",{parentName:"ul"},"@param {number} participantsCount - number of participants to generate"),Object(i.b)("li",{parentName:"ul"},"@param {string} participantType - ","[INDIVIDUAL, PAIR, TEAM]"),Object(i.b)("li",{parentName:"ul"},"@param {string} matchUpType - optional - ","[SINGLES, DOUBLES]"," - forces PAIR participant generation if DOUBLES"),Object(i.b)("li",{parentName:"ul"},"@param {string} sex - optional - ","[MALE, FEMALE]"),Object(i.b)("li",{parentName:"ul"},"@param {number} valuesInstanceLimit - maximum number of values which can be the same"),Object(i.b)("li",{parentName:"ul"},"@param {number} valuesCount - number of values to generate"),Object(i.b)("li",{parentName:"ul"},"@param {boolean} inContext - whether to expand PAIR and TEAM individualParticipantIds => individualParticipant objects")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"generatetournamentrecord"},"generateTournamentRecord"),Object(i.b)("p",null,"Generate a complete tournamentRecord from the following attributes"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {string} startDate - optional - ISO string date"),Object(i.b)("li",{parentName:"ul"},"@param {string} endDate - optional - ISO string date"),Object(i.b)("li",{parentName:"ul"},"@param {object} participantsProfile - { participantsCount, participantType }"),Object(i.b)("li",{parentName:"ul"},"@param {object[]} drawProfiles - ","[{ category, drawSize, drawType, eventType, matchUpFormat }]"),Object(i.b)("li",{parentName:"ul"},"@param {object[]} outcomes - ","[{ roundNumber, roundPosition, scoreString, winningSide, ... }]")))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/mocksEngine/documentation/api.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-mocks-engine-documentation-api-md-7b4cc64e2d0d873f039f.js.map