(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{XScD:function(t,e,a){"use strict";a.r(e),a.d(e,"_frontmatter",(function(){return c})),a.d(e,"default",(function(){return o}));var n=a("Fcif"),r=a("+I+c"),i=a("/FXl"),b=a("TjRS"),c=(a("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/tournamentEngine/documentation/api.md"}});var l={_frontmatter:c},p=b.a;function o(t){var e=t.components,a=Object(r.a)(t,["components"]);return Object(i.b)(p,Object(n.a)({},l,a,{components:e,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"tournamentengine-api-reference"},"tournamentEngine API Reference"),Object(i.b)("h2",{id:"addcourt"},"addCourt"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {string} venueId"),Object(i.b)("li",{parentName:"ul"},"@param {object} court - court object")),Object(i.b)("p",null,"{ courtId, courtName, altitude, latitude, longitude, surfaceCategory, surfaceType, surfaceDate, dateAvailability, onlineResources, courtDimensions, notes }"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addcourts"},"addCourts"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {string} venueId"),Object(i.b)("li",{parentName:"ul"},"@param {number} courtsCount - number of courts to add"),Object(i.b)("li",{parentName:"ul"},"@param {string[]} courtNames - array of names to assign to generated courts"),Object(i.b)("li",{parentName:"ul"},"@param {object[]} dataAvailability - dataAvailability object")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"adddrawdefinition"},"addDrawDefinition"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"adddrawentries"},"addDrawEntries"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addevent"},"addEvent"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addevententries"},"addEventEntries"),Object(i.b)("p",null,"Adds participantIds to the entries array in an event"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - passed in automatically by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} eventId - tournamentEngine automatically retrieves event"),Object(i.b)("li",{parentName:"ul"},"@param {string[]} participantIds - ids of all participants to add to event"),Object(i.b)("li",{parentName:"ul"},"@param {string} enryStatus - entryStatus enum, e.g. DIRECT_ACCEPTANCE, ALTERNATE, UNPAIRED"),Object(i.b)("li",{parentName:"ul"},"@param {string} entryStage - entryStage enum, e.g. QUALIFYING, MAIN")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addevententrypairs"},"addEventEntryPairs"),Object(i.b)("p",null,"Add PAIR participant to an event. Creates new participantType: PAIR participants if necessary"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - passed in automatically by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} eventId - tournamentEngine automatically retrieves event"),Object(i.b)("li",{parentName:"ul"},"@param {string","[][]","} participantIdPairs - array of paired id arrays for all participants to add to event"),Object(i.b)("li",{parentName:"ul"},"@param {string} enryStatus - entryStatus enum, e.g. DIRECT_ACCEPTANCE, ALTERNATE, UNPAIRED"),Object(i.b)("li",{parentName:"ul"},"@param {string} entryStage - entryStage enum, e.g. QUALIFYING, MAIN")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addparticipant"},"addParticipant"),Object(i.b)("p",null,"Adds an INDIVIDUAL, PAIR or TEAM participant to tournament participants\nGenerates participant.participantId if none is provided\nIncludes integrity checks for PAIR participants to insure participant.individualParticipantIds are valid"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} participant - participant object")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addparticipants"},"addParticipants"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addindividualparticipantids"},"addIndividualParticipantIds"),Object(i.b)("p",null,"Adds individualParticipantIds to GROUP or TEAM participants"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - passed in automatically by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} groupingParticipantId - grouping participant to which participantIds are to be added"),Object(i.b)("li",{parentName:"ul"},"@param {string[]} individualParticipantIds - individual participantIds to be added to grouping participant"),Object(i.b)("li",{parentName:"ul"},"@param {boolean} removeFromOtherTeams - whether or not to remove from other teams")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addpenalty"},"addPenalty"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addplayoffstructures"},"addPlayoffStructures"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} drawDefinition - passed in automatically by drawEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} structureId - id of structure to which playoff structures are to be added"),Object(i.b)("li",{parentName:"ul"},"@param {number[]} roundNumbers - source roundNumbers which will feed target structures"),Object(i.b)("li",{parentName:"ul"},"@param {number[]} playoffPositions - positions to be played off"),Object(i.b)("li",{parentName:"ul"},"@param {object} playoffAttributes - mapping of exitProfile to structure names, e.g. 0-1-1 for SOUTH"),Object(i.b)("li",{parentName:"ul"},"@param {string} playoffStructureNameBase - Root word for default playoff naming, e.g. 'Playoff' for 'Playoff 3-4'")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.addPlayoffStructures({\n  drawId,\n  structureId,\n  roundNumbers: [3], // either target roundNumbers or playoffPositions\n  playoffPositions: [3, 4],\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setsuborder"},"setSubOrder"),Object(i.b)("p",null,"Assigns a subOrder value to a participant within a structure by drawPosition where participant has been assigned"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} drawDefinition - added automatically by tournamentEngine with drawId"),Object(i.b)("li",{parentName:"ul"},"@param {string} drawId - used by tournamentEngine to retrieve drawDefinition"),Object(i.b)("li",{parentName:"ul"},"@param {string} structureId - structure identifier within drawDefinition"),Object(i.b)("li",{parentName:"ul"},"@param {number} drawPosition - drawPosition of the participant where subOrder is to be added"),Object(i.b)("li",{parentName:"ul"},"@param {number} subOrder - order in which tied participant should receive finishing position")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addvenue"},"addVenue"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"alloweddrawtypes"},"allowedDrawTypes"),Object(i.b)("p",null,"No parameters."),Object(i.b)("p",null,"Returns an array of names of allowed Draw Types, if any applicable policies have been applied to the tournamentRecord."),Object(i.b)("hr",null),Object(i.b)("h2",{id:"allowedmatchupformats"},"allowedMatchUpFormats"),Object(i.b)("p",null,"No parameters."),Object(i.b)("p",null,"Returns an array of TODS matchUpFormat codes for allowed scoring formats, if any applicable policies have been applied to the tournamentRecord."),Object(i.b)("hr",null),Object(i.b)("h2",{id:"alleventmatchups"},"allEventMatchUps"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"alltournamentmatchups"},"allTournamentMatchUps"),Object(i.b)("p",null,"Return an array of all matchUps contained within a tournament. These matchUps are returned ",Object(i.b)("strong",{parentName:"p"},"inContext"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const { matchUps } = tournamentEngine.allTournamentMatchUps();\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"alternatedrawpositionassignment"},"alternateDrawPositionAssignment"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {string} drawId - id of drawDefinition within which structure is found"),Object(i.b)("li",{parentName:"ul"},"@param {string} structureId - id of structure of drawPosition"),Object(i.b)("li",{parentName:"ul"},"@param {number} drawPosition - drawPosition where alternate participantId will be assigned"),Object(i.b)("li",{parentName:"ul"},"@param {string} alternateParticipantId - id of participant")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"assigndrawposition"},"assignDrawPosition"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"assignmatchupcourt"},"assignMatchUpCourt"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"assignseedpositions"},"assignSeedPositions"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Provides the ability to assign seedPositions ",Object(i.b)("em",{parentName:"li"},"after")," a structure has been generated"),Object(i.b)("li",{parentName:"ul"},"To be used ",Object(i.b)("em",{parentName:"li"},"before")," participants are positioned")),Object(i.b)("p",null,"Assign ",Object(i.b)("strong",{parentName:"p"},"participantIds")," to ",Object(i.b)("strong",{parentName:"p"},"seedNumbers")," within a target draw structure."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),"Defaults to { stage: 'MAIN', stageSequence: 1 } if { structureId: undefined }\n")),Object(i.b)("p",null,"The structure of an ",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"assignment object"))," is as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "seedNumber": 1,\n  "seedValue": 1,\n  "participantId": "uuid-of-participant"\n}\n')),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"seedNumber")," is unique while ",Object(i.b)("strong",{parentName:"p"},"seedValue")," can be any string representation."),Object(i.b)("p",null,"This allows seeds 5-8 to be visually represented as all having a seed value of '5' or '5-8'."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Parameters"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"drawId"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Unique identifier for target drawDefinition")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"assignments"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"array"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Array of assignment objects")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"eventId"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Not required; optimizes locating draw witthin tournamentRecord")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"structureId"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Apply assignments to a specific structure, identified by structureId")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"stage"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Locate target structure by stage; used together with stageSequence")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"stageSequence"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"number"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Locate target structure by stageSequence; used together with stage")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"useExistingSeedLimits"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Restrict ability to assign seedNumbers beyond established limit")))),Object(i.b)("hr",null),Object(i.b)("h2",{id:"assigntiematchupparticipantid"},"assignTieMatchUpParticipantId"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"bulkmatchupstatusupdate"},"bulkMatchUpStatusUpdate"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"bulkschedulematchups"},"bulkScheduleMatchUps"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - passed in automatically by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string[]} matchUpIds - array of matchUpIds to be scheduled"),Object(i.b)("li",{parentName:"ul"},"@param {object} schedule - { venueId?: string; scheduledDayDate?: string; scheduledTime?: string }")),Object(i.b)("h2",{id:"bulkupdatepublishedeventids"},"bulkUpdatePublishedEventIds"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - passed in automatically by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {object[]} outcomes - array of outcomes to be applied to matchUps, relevent attributes: { eventId: string; drawId: string; }")),Object(i.b)("p",null,"Returns a filtered array of publishedEventIds from all eventIds which are included in a bulkMatchUpStatusUpdate"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"checkinparticipant"},"checkInParticipant"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"checkoutparticipant"},"checkOutParticipant"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"deletecourt"},"deleteCourt"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"deletedrawdefinitions"},"deleteDrawDefinitions"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"removeevententries"},"removeEventEntries"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"deleteevents"},"deleteEvents"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"deleteparticipants"},"deleteParticipants"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"deletevenue"},"deleteVenue"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"deletevenues"},"deleteVenues"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"destroypairentry"},"destroyPairEntry"),Object(i.b)("p",null,"Removes a participantType: PAIR entry from an event and adds the individualParticipantIds to entries as entryStatus: UNPAIRED"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - passed in by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} eventId - resolved to event by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} participantId - id of PAIR participant to remove; individualParticipantIds will be added as UNPAIRED participant entries")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"devcontext"},"devContext"),Object(i.b)("p",null,"Setting devContext(true) bypasses ",Object(i.b)("strong",{parentName:"p"},"try {} catch (err) {}")," code block and in some cases enables enhanced logging"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.devContext(true);\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"eventmatchups"},"eventMatchUps"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"findcourt"},"findCourt"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"findmatchup"},"findMatchUp"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"findparticipant"},"findParticipant"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"findvenue"},"findVenue"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"generatedrawdefinition"},"generateDrawDefinition"),Object(i.b)("p",null,"This is a convenience method which handles most use cases for draw generation."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Parameters"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"eventId"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Unique identifier for the event within the current tournament")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"drawSize"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"number"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Number of draw postions there will be in the draw structure")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"drawType"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"ELIMININATION, ROUND_ROBIN & etc, defaults to SINGLE_ELIMINATION")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"automated"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Whether or not to automatically generate draw structure(s); defaults to true")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"matchUpType"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"SINGLES, DOUBLES, or TEAM")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"matchUpFormat"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"ITF TODS matchUpFormat code which describes scoring format")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"playoffMatchUpFormat"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Alternate matchUpformat for connected playoff structures")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"tieFormat"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"object"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"includes collectionDefinitions and winCriteria")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"customName"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Custom name for the generated draw structure")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"seedsCount"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"number"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Desired seeds to be generated from rankings if no seededParticipants data")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"seedingProfile"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Used to specify WATERFALL seeding, for instance, for Round Robin structures")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"seedByRanking"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Defaults to TRUE; use rankings for seeding if no seededParticipants provided")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"seededParticipants"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"array"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Array of seeding objects including seedValue and participantId")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"qualifyingRound"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"number"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Round of the strucrure which qualifies participants for connected structure")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"structureOptions"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"object"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Defines groupSize and playoffGroups for Round Robin structures")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"policyDefinitions"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"array"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Seeding or avoidance policies to be used when placing participants in draw")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"qualifyingPositions"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"number"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Number of positions in this draw structure to will be filled by qualifiers")))),Object(i.b)("hr",null),Object(i.b)("h2",{id:"generateteamsfromparticipantattribute"},"generateTeamsFromParticipantAttribute"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getcourtinfo"},"getCourtInfo"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getcourts"},"getCourts"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getdrawdata"},"getDrawData"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getevent"},"getEvent"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {string} eventId - id of the event to retreive"),Object(i.b)("li",{parentName:"ul"},"@param {object} context - attributes to be added into each event object.")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getevents"},"getEvents"),Object(i.b)("p",null,"Return an array of deepCopies of all event objects."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} context - attributes to be added into each event object."),Object(i.b)("li",{parentName:"ul"},"@param {boolean} inContext - whether or not to add tournament context into event (not yet implemented).")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"geteventproperties"},"getEventProperties"),Object(i.b)("p",null,"Gather attributes of events which come from other tournament elements, e.g. participants which have rankings/ratings/seedings for a given event."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const {\n  entryScaleAttributes,\n  hasSeededParticipants,\n  hasRankedParticipants,\n  hasRatedParticipants,\n} = tournamentEngine.getEventProperties({ eventId });\n")),Object(i.b)("p",null,"... where ",Object(i.b)("strong",{parentName:"p"},"entryScaleAttributes")," is an array of { prticipantId, participantName, seed, ranking, rating }"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"geteventdata"},"getEventData"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getmatchupformat"},"getMatchUpFormat"),Object(i.b)("p",null,"Returns the matchUpFormat code for a given matchUp, along with any"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - passed in automatically by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} drawId - optional - avoid brute force search for matchUp"),Object(i.b)("li",{parentName:"ul"},"@param {object} drawDefinition - passed in automatically by tournamentEngine when drawId provided"),Object(i.b)("li",{parentName:"ul"},"@param {string} eventId - optional - if only the default matchUpFormat for an event is required"),Object(i.b)("li",{parentName:"ul"},"@param {object} event - passed in automatically by tournamentEngine when drawId or eventId provided"),Object(i.b)("li",{parentName:"ul"},"@param {string} structureId - optional - if only the default matchUpFormat for a structure is required"),Object(i.b)("li",{parentName:"ul"},"@param {string} matchUpId - id of matchUp for which the scoped matchUpFormat(s) are desired")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getmatchupscheduledetails"},"getMatchUpScheduleDetails"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getpairedparticipant"},"getPairedParticipant"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {string[]} participantIds - ids of the participants")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getparticipanteventdetails"},"getParticipantEventDetails"),Object(i.b)("p",null,"Returns { eventDetails: { eventName, eventId }} for events in which participantId or TEAM/PAIR including participantId appears"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - tournament object (passed automatically from tournamentEngine state)"),Object(i.b)("li",{parentName:"ul"},"@param {string} participantId - id of participant for which events (eventName, eventId) are desired")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getparticipantidfinishingpositions"},"getParticipantIdFinishingPositions"),Object(i.b)("p",null,"Returns the Range of finishing positions possible for all participantIds within a draw"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {string} drawId - drawId of target draw within a tournament"),Object(i.b)("li",{parentName:"ul"},"@param {boolean} byeAdvancements - whether or not to consider byeAdancements in returns finishingPositionRange")),Object(i.b)("h2",{id:"getparticipantscaleitem"},"getParticipantScaleItem"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getparticipantsigninstatus"},"getParticipantSignInStatus"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getpolicydefinition"},"getPolicyDefinition"),Object(i.b)("p",null,"Finds policyDefinition for either tournament, event (if eventId), or draw (if drawId);\nTakes policyType as a parameter ('seeding', 'avoidance', or 'scoring')"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getpositionassignments"},"getPositionAssignments"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getseedscount"},"getSeedsCount"),Object(i.b)("p",null,"Takes a policyDefinition, drawSize and participantCount and returrns the number of seeds valid for the specified drawSize"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {boolean} drawSizeProgression - drawSizeProgression indicates that rules for all smaller drawSizes should be considered"),Object(i.b)("li",{parentName:"ul"},"@param {object} policyDefinition - polictyDefinition object"),Object(i.b)("li",{parentName:"ul"},"@param {number} participantCount - number of participants in draw structure"),Object(i.b)("li",{parentName:"ul"},"@param {number} drawSize - number of positions available in draw structure")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getstate"},"getState"),Object(i.b)("p",null,"No parameters."),Object(i.b)("p",null,"Returns a deep copy of the current tournamentEngine state."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const { tournamentRecord } = tournamentEngine.getState();\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"gettournamentparticipants"},"getTournamentParticipants"),Object(i.b)("p",null,"Returns deepCopies of tournament participants filtered by participantFilters which are arrays of desired participant attribute values"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - tournament object (passed automatically from tournamentEngine state)"),Object(i.b)("li",{parentName:"ul"},"@param {object} participantFilters - attribute arrays with filter value strings"),Object(i.b)("li",{parentName:"ul"},"@param {boolean} inContext - adds individualParticipants for all individualParticipantIds"),Object(i.b)("li",{parentName:"ul"},"@param {boolean} withStatistics - adds events: { ","[eventId]",": eventName }, matchUps: { ","[matchUpId]",": score }, statistics: ","[{ statCode: 'winRatio'}]"),Object(i.b)("li",{parentName:"ul"},"@param {boolean} withOpponents - include opponent participantIds"),Object(i.b)("li",{parentName:"ul"},"@param {boolean} withMatchUps - include all matchUps in which participant appears")),Object(i.b)("p",null,"participantFilters imlemented: eventIds, participantTypes, participantRoles, signInStatus"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const { tournamentParticipants } = tournamentEngine.getTournamentParticipants({\n  participantFilters: { participantTypes: [INDIVIDUAL] },\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"gettournamentpenalties"},"getTournamentPenalties"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"gettournamentinfo"},"getTournamentInfo"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getvenues"},"getVenues"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getvenuedata"},"getVenueData"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"matchupactions"},"matchUpActions"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"return an array of all validActions for a given matchUp"),Object(i.b)("li",{parentName:"ul"}),Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - provided automatically if tournamentEngine state has been set"),Object(i.b)("li",{parentName:"ul"},"@param {string} drawId - if provided then drawDefinition will be found automatically"),Object(i.b)("li",{parentName:"ul"},"@param {object} drawDefinition"),Object(i.b)("li",{parentName:"ul"},"@param {string} matchUpId - id of matchUp for which validActions will be returned")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"mergeparticipants"},"mergeParticipants"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"modifycourtavailability"},"modifyCourtAvailability"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"modifyindividualparticipantids"},"modifyIndividualParticipantIds"),Object(i.b)("p",null,"Modify grouping participant ","[TEAM, GROUP]"," individualParticipantIds"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - passed in automatically by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} groupingParticipantId - grouping participant to which participantIds are to be added"),Object(i.b)("li",{parentName:"ul"},"@param {string[]} individualParticipantIds - new value for individualParticipantIds array")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"modifypenalty"},"modifyPenalty"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"newtournamentrecord"},"newTournamentRecord"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"participantmembership"},"participantMembership"),Object(i.b)("p",null,"Returns all grouping participants which include participantId"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - passed automatically by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} participantId - id of individual participant")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"participantscaleitem"},"participantScaleItem"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"modifyparticipantssigninstatus"},"modifyParticipantsSignInStatus"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"modifyseedassignment"},"modifySeedAssignment"),Object(i.b)("p",null,"Change the display representation of a seedNumber"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {string} drawId - id of drawDefinition within which structure occurs"),Object(i.b)("li",{parentName:"ul"},"@param {object} drawDefinition - added automatically by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} participantId - id of participant which will receive the seedValue"),Object(i.b)("li",{parentName:"ul"},"@param {string} structureId - id of structure within drawDefinition"),Object(i.b)("li",{parentName:"ul"},"@param {string} seedValue - supports value of e.g. '5-8'")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"publishevent"},"publishEvent"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"rankbyratings"},"rankByRatings"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"regeneratedrawdefinition"},"regenerateDrawDefinition"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"removedrawpositionassignment"},"removeDrawPositionAssignment"),Object(i.b)("p",null,"Clear draw position."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {string} drawId - id of drawDefinition within which structure is found"),Object(i.b)("li",{parentName:"ul"},"@param {string} structureId - id of structure of drawPosition"),Object(i.b)("li",{parentName:"ul"},"@param {number} drawPosition - number of drawPosition for which actions are to be returned"),Object(i.b)("li",{parentName:"ul"},"@param {boolean} replaceWithBye - boolean whether or not to replace with BYE"),Object(i.b)("li",{parentName:"ul"},"@param {boolean} destroyPair - if { participantType: PAIR } it is possible to destroy pair entry before modifying entryStatus"),Object(i.b)("li",{parentName:"ul"},"@param {string} entryStatus - change the entry status of the removed participant to either ALTERNATE or WITHDRAWN")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"removeparticipantidsfromallteams"},"removeParticipantIdsFromAllTeams"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"removeindividualparticipantids"},"removeIndividualParticipantIds"),Object(i.b)("p",null,"Remove individualParticipantIds from a grouping participant ","[TEAM, GROUP]"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - passed in automatically by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} groupingParticipantId - grouping participant to which participantIds are to be added"),Object(i.b)("li",{parentName:"ul"},"@param {string[]} individualParticipantIds - individual participantIds to be removed to grouping participant")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"removepenalty"},"removePenalty"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setdrawdefinitiondefaultmatchupformat"},"setDrawDefinitionDefaultMatchUpFormat"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - passed automatically by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} drawId - id of the draw for which matchUpFormat is being set"),Object(i.b)("li",{parentName:"ul"},"@param {string} matchUpFormat - TODS matchUpFormatCode defining scoring format")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setdrawparticipantrepresentatives"},"setDrawParticipantRepresentatives"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"seteventdefaultmatchupformat"},"setEventDefaultMatchUpFormat"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - passed automatically by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} eventId - id of the event for which matchUpFormat is being set"),Object(i.b)("li",{parentName:"ul"},"@param {string} matchUpFormat - TODS matchUpFormatCode defining scoring format")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setmatchupstatus"},"setMatchUpStatus"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Sets either matchUpStatus or score and winningSide; values to be set are passed in outcome object.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"@param {string} drawId - id of draw within which matchUp is found")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"@param {string} matchUpId - id of matchUp to be modified")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"@param {string} matchUpTieId - id of matchUpTie, if relevant")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"@param {string} matchUpFormat - optional - matchUpFormat if different from draw/event default")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"@param {object} outcome - { score, winningSide, matchUpStatus }"))),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setparticipantscaleitem"},"setParticipantScaleItem"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"scaleItem = {\n  scaleValue: 12,\n  scaleName: 'U16',\n  scaleType: RANKING,\n  eventType: SINGLES,\n  scaleDate: '2020-06-06',\n};\n\nresult = tournamentEngine.setParticipantScaleItem({\n  participantId,\n  scaleItem,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setparticipantscaleitems"},"setParticipantScaleItems"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const scaleItemsWithParticipantIds = [\n  {\n    participantId,\n    scaleItems: [\n      {\n        scaleValue: 8.3,\n        scaleName: 'WTN',\n        scaleType: RATING,\n        eventType: SINGLES,\n        scaleDate: '2021-01-01',\n      },\n    ],\n  },\n];\ntournamentEngine.setParticipantScaleItems({ scaleItemsWithParticipantIds });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setstructuredefaultmatchupformat"},"setStructureDefaultMatchUpFormat"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {object} tournamentRecord - passed automatically by tournamentEngine"),Object(i.b)("li",{parentName:"ul"},"@param {string} drawId - id of the draw within which structure is found"),Object(i.b)("li",{parentName:"ul"},"@param {object} drawDefinition - passed automatically by tournamentEngine when drawId is provided"),Object(i.b)("li",{parentName:"ul"},"@param {string} matchUpFormat - TODS matchUpFormatCode defining scoring format"),Object(i.b)("li",{parentName:"ul"},"@param {string} structureId - id of the structure for which the matchUpFormat is being set")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setstate"},"setState"),Object(i.b)("p",null,"Loads a tournament record into tournamentEngine."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"tournamentEngine.setsState(tournamentRecord, deepCopy);\n")),Object(i.b)("p",null,"By default a deep copy of the tournament record is made so that mutations made by tournamentEngine do not affect the source object. An optional boolean parameter, ",Object(i.b)("em",{parentName:"p"},"deepCopy")," can be set to false to override this default behavior."),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setsubscriptions"},"setSubscriptions"),Object(i.b)("p",null,"Please refer to the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/subscriptions"}),"Subscriptions")," in General Concepts."),Object(i.b)("hr",null),Object(i.b)("h2",{id:"settournamentcategories"},"setTournamentCategories"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"settournamentenddate"},"setTournamentEndDate"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"settournamentname"},"setTournamentName"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"settournamentnotes"},"setTournamentNotes"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"settournamentstartdate"},"setTournamentStartDate"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setvenueaddress"},"setVenueAddress"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"tournamentmatchups"},"tournamentMatchUps"),Object(i.b)("p",null,"Returns all matchUups in a tournamentRecord, assuming that ",Object(i.b)("inlineCode",{parentName:"p"},"tournament.setState(tournamentRecord)")," has already been called. These matchUps are returned ",Object(i.b)("strong",{parentName:"p"},"inContext"),"."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Parameters"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"matchUpFilters"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"array"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"contestFilters"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"array"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}))))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const {\n  abandonedMatchUps,\n  byeMatchUps,\n  completedMatchUps,\n  pendingMatchUps,\n  upcomingMatchUps,\n} = tournamentEngine.tournamentMatchUps();\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"unpublishevent"},"unPublishEvent"),Object(i.b)("hr",null),Object(i.b)("h2",{id:"withdrawparticipantatdrawposition"},"withdrawParticipantAtDrawPosition"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"@param {string} drawId - id of drawDefinition within which structure is found"),Object(i.b)("li",{parentName:"ul"},"@param {string} structureId - id of structure of drawPosition"),Object(i.b)("li",{parentName:"ul"},"@param {number} drawPosition - number of drawPosition for which actions are to be returned"),Object(i.b)("li",{parentName:"ul"},"@param {boolean} replaceWithBye - boolean whether or not to replace with BYE"),Object(i.b)("li",{parentName:"ul"},"@param {boolean} destroyPair - if { participantType: PAIR } it is possible to destroy pair entry before modifying entryStatus")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"version"},"version"),Object(i.b)("p",null,"Returns NPM package version"),Object(i.b)("hr",null))}void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/tournamentEngine/documentation/api.md"}}),o.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-tournament-engine-documentation-api-md-8c7b5edb9bd8aeaa8b3c.js.map