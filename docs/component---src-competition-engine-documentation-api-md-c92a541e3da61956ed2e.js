(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{uZQL:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return p}));var c=n("Fcif"),a=n("+I+c"),o=n("/FXl"),i=n("TjRS"),s=(n("aD51"),{});void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/competitionEngine/documentation/api.md"}});var r={_frontmatter:s},b=i.a;function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)(b,Object(c.a)({},r,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"competition-api-reference"},"competition API Reference"),Object(o.b)("h2",{id:"allcompetitionmatchups"},"allCompetitionMatchUps"),Object(o.b)("pre",null,Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-js"}),"const { matchUps } = competitionEngine.allCompetitionMatchUps();\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"competitionmatchups"},"competitionMatchUps"),Object(o.b)("p",null,'Return an array of all matchUps, "inContext", contained within the collection of tournaments loaded into `competitionEngine.'),Object(o.b)("pre",null,Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-js"}),"const { matchUps } = competitionEngine.competitionMatchUps();\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"competitionschedulematchups"},"competitionScheduleMatchUps"),Object(o.b)("pre",null,Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-js"}),"const matchUpFilters = {\n  isMatchUpTie: false,\n  scheduledDate, // scheduled date of matchUps to return\n\n  localTimeZone, // optional - used to convert scheduleDate\n  localPerspective: true,\n};\n\nconst {\n  completedMatchUps,\n  dateMatchUps,\n  courtsData,\n  venues,\n} = competitionEngine.competitionScheduleMatchUps({ matchUpFilters });\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"devcontext"},"devContext"),Object(o.b)("p",null,"Setting devContext(true) bypasses ",Object(o.b)("strong",{parentName:"p"},"try {} catch (err) {}")," code block and in some cases enables enhanced logging"),Object(o.b)("pre",null,Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-js"}),"competitionEngine.devContext(true);\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"getstate"},"getState"),Object(o.b)("p",null,"Returns a deep copy of the current competitionEngine state."),Object(o.b)("pre",null,Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-js"}),"const { tournaentRecords } = competition.getState({\n  convertExtensions, // optional - convert extensions to '_' prefixed attributes\n});\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"getvenuesandcourts"},"getVenuesAndCourts"),Object(o.b)("p",null,"Returns an aggregate view of venues and courts across all tournamentRecords loaded into ",Object(o.b)("inlineCode",{parentName:"p"},"competitionEngine"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-js"}),"const { courts, venues } = competitionEngine.getVenuesAndCourts();\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"matchupschedulechange"},"matchUpScheduleChange"),Object(o.b)("p",null,"Swaps the schedule details of two scheduled matchUps."),Object(o.b)("pre",null,Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-js"}),"competitionEngine.matchUpScheduleChange({\n  sourceMatchUpContextIds,\n  targetMatchUpContextIds,\n  sourceCourtId,\n  targetCourtId,\n  courtDayDate: dateSelected,\n});\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"removematchupcourtassignment"},"removeMatchUpCourtAssignment"),Object(o.b)("pre",null,Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-js"}),"competitionEngine.removeMatchUpCourtAssignment({\n  drawId,\n  matchUpId,\n  tournamentId,\n  courtDayDate,\n});\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"reorderupcomingmatchups"},"reorderUpcomingMatchUps"),Object(o.b)("pre",null,Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-js"}),"const matchUpContextIds = [{ tournamentId, drawId, matchUpId }];\ncompetitionEngine.reorderUpcomingMatchUps({\n  matchUpContextIds,\n  firstToLast, // boolean - direction of reorder\n});\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"schedulematchups"},"scheduleMatchUps"),Object(o.b)("hr",null),Object(o.b)("h2",{id:"setstate"},"setState"),Object(o.b)("p",null,"Loads tournament records into competitionEngine."),Object(o.b)("pre",null,Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-js"}),"competitionEngine.setsState(tournamentRecords, deepCopy);\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"setsubscriptions"},"setSubscriptions"),Object(o.b)("p",null,"Please refer to the ",Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"/tods-competition-factory/concepts/subscriptions"}),"Subscriptions")," in General Concepts."),Object(o.b)("hr",null),Object(o.b)("h2",{id:"toggleparticipantcheckinstate"},"toggleParticipantCheckInState"),Object(o.b)("hr",null),Object(o.b)("h2",{id:"version"},"version"),Object(o.b)("p",null,"Returns NPM package version. Can be used in configurations that utilize Competition Factory engines on both client and server to ensure equivalency."),Object(o.b)("pre",null,Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-js"}),"const version = competitionEngine.version();\n")),Object(o.b)("hr",null))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/competitionEngine/documentation/api.md"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-competition-engine-documentation-api-md-c92a541e3da61956ed2e.js.map