{"version":3,"sources":["webpack:///../src/drawEngine/documentation/api.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-draw-engine-documentation-api-md-8d090c5b41a7d64c4287.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/charlesallen/Development/CourtHive/tods-competition-factory/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"drawengine-api-reference\"\n    }}>{`drawEngine API Reference`}</h1>\n    <h2 {...{\n      \"id\": \"adddrawentries\"\n    }}>{`addDrawEntries`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.addDrawEntries({\n  participantIds, // an array of participantIds, should all be of the same participantType\n  entryStatus, // optional - defaults to DIRECT_ACCEPTANCE\n  stage, // optional - stage into which participantIds have been entered; defaults to MAIN\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"adddrawentry\"\n    }}>{`addDrawEntry`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.addDrawEntry({\n  participantId,\n  entryStage, // optional - stage into which participantIds have been entered; defaults to MAIN\n  entryStatus, // optional - defaults to DIRECT_ACCEPTANCE\n  entryPosition, // optional - used to order entries, e.g. { entryPosition: 1 } for 1st alternate\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addmatchupendtime\"\n    }}>{`addMatchUpEndTime`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const endTime = '2020-01-01T09:05:00Z';\ndrawEngine.addMatchUpEndTime({ matchUpId, endTime });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addmatchupofficial\"\n    }}>{`addMatchUpOfficial`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.addMatchUpOfficial({ matchUpId, participantId, officialType });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addmatchupresumetime\"\n    }}>{`addMatchUpResumeTime`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const resumeTime = '2020-01-01T09:00:00Z';\ndrawEngine.addMatchUpResumeTime({ matchUpId, resumeTime });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addmatchupscheduleddaydate\"\n    }}>{`addMatchUpScheduledDayDate`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const scheduledDayDate = '2020-01-01';\ndrawEngine.addMatchUpScheduledDayDate({ matchUpId, scheduledDayDate });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addmatchupscheduledtime\"\n    }}>{`addMatchUpScheduledTime`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const scheduledTime = '08:00';\ndrawEngine.addMatchUpScheduledTime({ matchUpId, scheduledTime });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addmatchupstarttime\"\n    }}>{`addMatchUpStartTime`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const startTime = '2020-01-01T08:05:00Z';\ndrawEngine.addMatchUpStartTime({ matchUpId, startTime });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addmatchupstoptime\"\n    }}>{`addMatchUpStopTime`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const stopTime = '2020-01-01T08:15:00Z';\ndrawEngine.addMatchUpStopTime({ matchUpId, stopTime });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addplayoffstructures\"\n    }}>{`addPlayoffStructures`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`@param {object} drawDefinition - passed in automatically by drawEngine`}</li>\n      <li parentName=\"ul\">{`@param {string} structureId - id of structure to which playoff structures are to be added`}</li>\n      <li parentName=\"ul\">{`@param {number[]} roundNumbers - source roundNumbers which will feed target structures`}</li>\n      <li parentName=\"ul\">{`@param {number[]} playoffPositions - positions to be played off`}</li>\n      <li parentName=\"ul\">{`@param {object} playoffAttributes - mapping of exitProfile to structure names, e.g. 0-1-1 for SOUTH`}</li>\n      <li parentName=\"ul\">{`@param {string} playoffStructureNameBase - Root word for default playoff naming, e.g. 'Playoff' for 'Playoff 3-4'`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.addPlayoffStructures({\n  structureId,\n  roundNumbers: [3], // optional if playoffPositions not provided; roundNumbers of structure to be played off.\n  playoffPositions: [3, 4], // optional if roundNumbers not provided; finishing positions to be played off.\n  playoffAttributes, // optional - mapping of exitProfile to structure names, e.g. 0-1-1 for SOUTH\n  playoffStructureNameBase, // optional - Root word for default playoff naming, e.g. 'Playoff' for 'Playoff 3-4'\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addmatchuptimeitem\"\n    }}>{`addMatchUpTimeItem`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const timeItem = {\n  itemType: SCHEDULED_DATE,\n  itemValue: scheduledDayDate,\n};\ndrawEngine.addMatchUpTimeItem({\n  matchUpId,\n  timeItem,\n  duplicateValues: false,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setsuborder\"\n    }}>{`setSubOrder`}</h2>\n    <p>{`Assigns a subOrder value to a participant within a structure by drawPosition where participant has been assigned`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.setSubOrder({\n  structureId, // structure identifier within drawDefinition\n  drawPosition: 1, // drawPosition of the participant where subOrder is to be added\n  subOrder: 2, // order in which tied participant should receive finishing position\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"alldrawmatchups\"\n    }}>{`allDrawMatchUps`}</h2>\n    <p>{`Returns all matchUps from all structures within a draw.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { matchUps } = drawEngine.allDrawMatchUps({\n  context, // optional context to be added into matchUps\n  inContext, // boolean - add context { drawId, structureId, participant, individualParticipants ... }\n  roundFilter, // filter to target matchUps from specified rounds\n  nextMatchUps, // optioanl - boolean - to include winnerGoesTo and loserGoesTo\n  matchUpFilters, // attribute filters\n  contextFilters, // filters based on context attributes\n  includeByeMatchUps, // return matchUps with { matchUpStatus: BYE }\n  tournamentParticipants, // optional - provide an array of tournamentParticipants to add into matchUps\n  requireParticipants, // optional - require that participants be loaded into drawEngine or passed into method\n  tournamentAppliedPolicies, // any policies, such as privacy, to be applied to matchUps\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"allstructurematchups\"\n    }}>{`allStructureMatchUps`}</h2>\n    <p>{`Returns all matchUps from a single structure within a draw.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { matchUps } = drawEngine.allDrawMatchUps({\n  structureId,\n  context, // optional context to be added into matchUps\n  inContext, // boolean - add context { drawId, structureId, participant, individualParticipants ... }\n  roundFilter, // filter to target matchUps from specified rounds\n  nextMatchUps, // optioanl - boolean - to include winnerGoesTo and loserGoesTo\n  matchUpFilters, // attribute filters\n  contextFilters, // filters based on context attributes\n  includeByeMatchUps, // return matchUps with { matchUpStatus: BYE }\n  tournamentParticipants, // optional - provide an array of tournamentParticipants to add into matchUps\n  requireParticipants, // optional - require that participants be loaded into drawEngine or passed into method\n  tournamentAppliedPolicies, // any policies, such as privacy, to be applied to matchUps\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"analyzematchup\"\n    }}>{`analyzeMatchUp`}</h2>\n    <p>{`Method used internally by the `}<inlineCode parentName=\"p\">{`scoreGovernor`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`keyValueScore`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  isActiveSet,\n  isExistingSet,\n  existingValue,\n  hasExistingValue,\n  isValidSideNumber,\n  completedSetsCount,\n  isCompletedMatchUp,\n  isLastSetWithValues,\n  validMatchUpOutcome,\n  matchUpScoringFormat,\n  calculatedWinningSide,\n  validMatchUpWinningSide,\n  completedSetsHaveValidOutcomes,\n  specifiedSetAnalysis: {\n    expectTiebreakSet,\n    expectTimedSet,\n    hasTiebreakCondition,\n    isCompletedSet,\n    isDecidingSet,\n    isTiebreakSet,\n    isValidSet,\n    isValidSetNumber,\n    isValidSetOutcome,\n    setFormat,\n    sideGameScores,\n    sideGameScoresCount,\n    sidePointScores,\n    sidePointScoresCount,\n    sideTiebreakScores,\n    sideTiebreakScoresCount,\n    winningSide,\n  },\n} = drawEngine.analyzeMatchUp({\n  matchUp,\n  sideNumber,\n  setNumber,\n  matchUpFormat,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"analyzeset\"\n    }}>{`analyzeSet`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  expectTiebreakSet,\n  expectTimedSet,\n  hasTiebreakCondition,\n  isCompletedSet,\n  isDecidingSet,\n  isTiebreakSet,\n  isValidSet,\n  isValidSetNumber,\n  isValidSetOutcome,\n  setFormat,\n  sideGameScores,\n  sideGameScoresCount,\n  sidePointScores,\n  sidePointScoresCount,\n  sideTiebreakScores,\n  sideTiebreakScoresCount,\n  winningSide,\n} = drawEngine.analyzeSet({\n  setObject,\n  matchUpScoringFormat,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"assigndrawposition\"\n    }}>{`assignDrawPosition`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.assignDrawPosition({\n  structureId,\n  drawPosition,\n  participantId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"assigndrawpositionbye\"\n    }}>{`assignDrawPositionBye`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.assignDrawPositionBye({\n  structureId,\n  drawPosition,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"assignseed\"\n    }}>{`assignSeed`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`result = drawEngine.assignSeed({\n  structureId,\n  seedNumber,\n  seedValue, // optional - display value, e.g. '5-8'\n  participantId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"attacheventpolicy\"\n    }}>{`attachEventPolicy`}</h2>\n    <p>{`Attaches a policy to an event within a tournamentRecord.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/policies\"\n      }}>{`Policies`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.attachEventPolicy({\n  eventId,\n  policyDefinition: SEEDING_POLICY,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"attachpolicy\"\n    }}>{`attachPolicy`}</h2>\n    <p>{`Attaches a policy to a drawDefinition.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/policies\"\n      }}>{`Policies`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.attachPolicy({ policyDefinition: SEEDING_POLICY });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"automatedpositioning\"\n    }}>{`automatedPositioning`}</h2>\n    <p>{`Positions participants in a draw structure. `}<inlineCode parentName=\"p\">{`drawEngine`}</inlineCode>{` is agnostic about the type of participants that are placed in a draw structure, but requires tournament participants for avoidance policies to work.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/policies\"\n      }}>{`Policies`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.automatedPositioning({\n  structureId,\n  participants, // optional - participants must be passed in for Avoidance Policies to be effective\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"checkinparticipant\"\n    }}>{`checkInParticipant`}</h2>\n    <p>{`Set the check-in state for a participant. Used to determine when both participants in a matchUp are available to be assigned to a court.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.checkInParticipant({\n  matchUpId,\n  participantId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"checkoutparticipant\"\n    }}>{`checkOutParticipant`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.checkOutParticipant({\n  matchUpId,\n  participantId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"cleardrawposition\"\n    }}>{`clearDrawPosition`}</h2>\n    <p>{`Removes a `}<inlineCode parentName=\"p\">{`participantId`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`bye`}</inlineCode>{` from a specified `}<inlineCode parentName=\"p\">{`drawPosition`}</inlineCode>{` within a `}<inlineCode parentName=\"p\">{`structure`}</inlineCode>{` or, optionally, removes a specified `}<inlineCode parentName=\"p\">{`participantId`}</inlineCode>{` from a `}<inlineCode parentName=\"p\">{`structure`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.clearDrawPosition({\n  structureId,\n  drawPosition, // optional if participantId is provided\n  participantId, // optional if drawPosition is provided\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"devcontext\"\n    }}>{`devContext`}</h2>\n    <p>{`Setting devContext(true) bypasses `}<strong parentName=\"p\">{`try {} catch (err) {}`}</strong>{` code block and in some cases enables logging`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.devContext(true);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"drawmatchups\"\n    }}>{`drawMatchUps`}</h2>\n    <p>{`Returns categorized matchUps from all structures within a draw.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  upcomingMatchUps,\n  pendingMatchUps,\n  completedMatchUps,\n  abandonedMatchUps,\n  byeMatchUps,\n} = drawEngine.allDrawMatchUps({\n  context, // optional context to be added into matchUps\n  inContext, // boolean - add context { drawId, structureId, participant, individualParticipants ... }\n  roundFilter, // filter to target matchUps from specified rounds\n  nextMatchUps, // optioanl - boolean - to include winnerGoesTo and loserGoesTo\n  matchUpFilters, // attribute filters\n  contextFilters, // filters based on context attributes\n  includeByeMatchUps, // return matchUps with { matchUpStatus: BYE }\n  tournamentParticipants, // optional - provide an array of tournamentParticipants to add into matchUps\n  requireParticipants, // optional - require that participants be loaded into drawEngine or passed into method\n  tournamentAppliedPolicies, // any policies, such as privacy, to be applied to matchUps\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"findmatchup\"\n    }}>{`findMatchUp`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  matchUp,\n  structure, // returned for convenience\n} = drawEngine.findMatchUp({\n  matchUpId,\n  inContext, // optional - boolean - returns matchUp with additional attributes\n  tournamentParticipants, // optional - enables inContext matchUp to contain full participant objects\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"generatedrawtype\"\n    }}>{`generateDrawType`}</h2>\n    <p>{`Convenience method to generate pre-defined drawTypes.`}</p>\n    <p>{`For more information on `}<inlineCode parentName=\"p\">{`feedPolicy`}</inlineCode>{` see `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/drawEngine/feedPolicies\"\n      }}>{`Feed Policies`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.generateDrawType({\n  drawType, // defaults to SINGLE_ELIMINATION\n\n  matchUpFormat, // optional - default matchUpFormat\n  playoffMatchUpFormat, // optional - default playoffMatchUpFormat\n\n  seedingProfile, // optional - applies only to WATERFALL seeding in ROUND_ROBIN structures\n  feedPolicy, // optional - provides fine-grain control for FEED_IN_CONSOLATION feed links\n\n  qualifyingRound, // optional - for qualifying draw structures, roundNumber to win to qualify\n  qualifyingPositions, // optional - number of drawPositions to be filled by qualifiers\n  finishingPositionLimit, // optional - for playoff structures, limit to the number of positions to be played off\n\n  structureOptions: {\n    groupSize, // e.g. 4 participants per group\n    groupSizeLimit: 8,\n  },\n\n  goesTo, // optional - generate winnerGoesTo and loserGoesTo attributes\n  uuids, // optional - array of UUIDs to be used for structureIds and matchUpIds\n\n  stage, // optional - defaults to MAIN\n  structureName, // optional - defaults to stage\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"generatequalifyinglink\"\n    }}>{`generateQualifyingLink`}</h2>\n    <p>{`Generates and adds a `}<inlineCode parentName=\"p\">{`link`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`drawDefinition.links`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.generateQualifyingLink({\n  qualifyingStructureId,\n  mainStructureId,\n  qualifyingRound,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"generatescorestring\"\n    }}>{`generateScoreString`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const sets = [\n  {\n    side1Score: 6,\n    side2Score: 7,\n    side1TiebreakScore: 3,\n    side2TiebreakScore: 7,\n    winningSide: 2,\n  },\n  {\n    side1Score: 7,\n    side2Score: 6,\n    side1TiebreakScore: 14,\n    side2TiebreakScore: 12,\n    winningSide: 1,\n  },\n  { side1Score: 3 },\n];\nlet result = generateScoreString({\n    sets, // TODS sets object\n    winningSide, // optional - 1 or 2\n    reversed, // optional - reverse the score\n    winnerFirst = true, // optional - boolean - tranform sets so that winningSide is first (on left)\n    matchUpStatus, // optional - used to annotate scoreString\n    addOutcomeString, // optional - tranform matchUpStatus into outcomeString appended to scoreString\n    autoComplete: true, // optional - complete missing set score\n  });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"generatetiematchupscorestring\"\n    }}>{`generateTieMatchUpScoreString`}</h2>\n    <p>{`Returns string representation of current tieMatchUp score.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.generateTieMatchUpScoreString({\n  matchUp,\n  separator, // optional - defaults to '-'\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getavailableplayoffrounds\"\n    }}>{`getAvailablePlayoffRounds`}</h2>\n    <p>{`Returns rounds of a structure which are available for adding playoff structures.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  playoffRounds,\n  playoffRoundsRanges,\n} = drawEngine.getAvailablePlayoffRounds({\n  structureId,\n});\n`}</code></pre>\n    <p>{`...For a SINGLE_ELIMINATION struture with drawSize: 16 would return:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`    {\n      playoffRounds: [ 1, 2, 3 ],\n      playoffRoundsRanges: [\n        { round: 1, range: '9-16' },\n        { round: 2, range: '5-8' },\n        { round: 3, range: '3-4' }\n      ]\n    }\n\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getcheckedinparticipantids\"\n    }}>{`getCheckedInParticipantIds`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  allParticipantsCheckedIn, // boolean\n  checkedInParticipantIds, // array of participantIds\n} = drawEngine.getCheckedInParticipantIds({ matchUp });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getdrawstructures\"\n    }}>{`getDrawStructures`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { structures } = drawEngine.getDrawStructures({\n  stage, // optional - filter by stage\n  stageSequence, // optiona - filter by stageSequence\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getmatchupcontextids\"\n    }}>{`getMatchUpContextIds`}</h2>\n    <p>{`Convenience method to find a `}<inlineCode parentName=\"p\">{`matchUp`}</inlineCode>{` by `}<inlineCode parentName=\"p\">{`matchUpId`}</inlineCode>{` and return \"context ids\". Does NOT require that drawEngine state be set, but does require an array of \"inContext\" `}<inlineCode parentName=\"p\">{`matchUps`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  matchUpId,\n  drawId,\n  eventId,\n  structureId,\n  tournamentId,\n} = drawEngine.getMatchUpContextIds({ matchUps, matchUpId });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getmatchupparticipantids\"\n    }}>{`getMatchUpParticipantIds`}</h2>\n    <p>{`Convenience function; requires inContext matchUp.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  sideParticipantIds,\n  individualParticipantIds,\n} = drawEngine.getMatchUpParticipantIds({ matchUp });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getmatchupscheduledetails\"\n    }}>{`getMatchUpScheduleDetails`}</h2>\n    <p>{`Returns the latest values for all `}<inlineCode parentName=\"p\">{`matchUp.timeItems`}</inlineCode>{`, along with calculated values, that relate to the scheduling of a `}<inlineCode parentName=\"p\">{`matchUp`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  schedule: {\n    time,\n    courtId,\n    venueId,\n    startTime,\n    endTime,\n    milliseconds,\n    scheduledDate,\n    scheduledTime,\n  },\n} = drawEngine.getMatchUpScheduleDetails({ matchUp });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getnextseedblock\"\n    }}>{`getNextSeedBlock`}</h2>\n    <p>{`Returns the next block of drawPositions which are to be assigned seeded participants.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  nextSeedBlock,\n  unplacedSeedParticipantIds,\n  unplacedSeedNumbers,\n  unfilledPositions,\n  unplacedSeedAssignments,\n} = drawEngine.getNextSeedBlock({\n  structureId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getnextunfilleddrawpositions\"\n    }}>{`getNextUnfilledDrawPositions`}</h2>\n    <p>{`Returns the next valid block of unfilled drawPositions. Useful for UI to give visual indication of drawPostions valid to assign.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { nextUnfilledDrawPositions } = drawEngine.getNextUnfilledDrawPositions({\n  structureId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getparticipantidfinishingpositions\"\n    }}>{`getParticipantIdFinishingPositions`}</h2>\n    <p>{`Returns the Range of finishing positions possible for all participantIds within a draw`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const idMap = drawEngine.getParticipantIdFinishingPositions({\n  byeAdvancements, // optional boolean - whether or not to consider byeAdvancements\n});\n\nconst {\n  relevantMatchUps,\n  finishingPositionRanges,\n  finishingPositionRange,\n} = idMap[participantId];\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getpositionsplayedoff\"\n    }}>{`getPositionsPlayedOff`}</h2>\n    <p>{`Determines which finishing positions will be returned by a draw. For example, a First Match Loser Consolation with a draw size of 16 will playoff possitions 1, 2, 9 and 10.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { positionsPlayedOff } = getPositionsPlayedOff({ drawDefinition });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getroundmatchups\"\n    }}>{`getRoundMatchUps`}</h2>\n    <p>{`Organizes matchUps by roundNumber. `}<strong parentName=\"p\">{`roundMatchUps`}</strong>{` contains matchUp objects; `}<strong parentName=\"p\">{`roundProfile`}</strong>{` provides an overview of drawPositions which have advanced to each round, a matchUpsCount, finishingPositionRange for winners and losers, and finishingRound.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { roundMatchUps, roundProfile } = getRoundMatchUps({ matchUps });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getsourcerounds\"\n    }}>{`getSourceRounds`}</h2>\n    <p>{`Returns the round numbers for desired playoff positions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  sourceRounds, // all source rounds for playedOff positions and specified playoffPositions\n  playoffSourceRounds,\n  playedOffSourceRounds,\n  playoffPositionsReturned,\n} = getSourceRounds({\n  drawDefinition,\n  structureId,\n  playoffPositions: [3, 4],\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getstructureseedassignments\"\n    }}>{`getStructureSeedAssignments`}</h2>\n    <p>{`Returns seedAssignments for a specific structure based on structureId or structure`}</p>\n    <p>{`The structure of an `}<strong parentName=\"p\"><em parentName=\"strong\">{`assignment object`}</em></strong>{` is as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"seedNumber\": 1,\n  \"seedValue\": 1,\n  \"participantId\": \"uuid-of-participant\"\n}\n`}</code></pre>\n    <p>{`The most basic usage is to retrieve seed assignments for a draw which has a single main stage structure`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { seedAssignments } = drawEngine.getStructureSeedAssignments({\n  structureId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getstate\"\n    }}>{`getState`}</h2>\n    <p>{`No parameters.`}</p>\n    <p>{`Returns a deep copy of the current drawEngine state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { drawDefinition } = drawEngine.getState();\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"initializestructureseedassignments\"\n    }}>{`initializeStructureSeedAssignments`}</h2>\n    <p>{`Creates the `}<inlineCode parentName=\"p\">{`seedAssignments`}</inlineCode>{` attribute for the specified structure.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.initializeStructureSeedAssignments({\n  structureId,\n  seedsCount,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"iscompletedstructure\"\n    }}>{`isCompletedStructure`}</h2>\n    <p>{`Returns boolean whether all matchUps in a given structure have been completed`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const structureIsComplete = isCompletedStructure({\n  structureId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"matchupactions\"\n    }}>{`matchUpActions`}</h2>\n    <p>{`Return an array of all validActions for a specific matchUp.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  isByeMatchUp, // boolean; true if matchUp includes a BYE\n  structureIsComplete, // boolean; true if structure is ready for positioning\n  validActions, // array of possible actions given current matchUpStatus\n} = drawEngine.matchUpActions({\n  matchUpId,\n});\n\nconst {\n  type, // 'REFEREE', 'SCHEDULE', 'PENALTY', 'STATUS', 'SCORE', 'START', 'END'.\n  method, // tournamentEngine method relating to action type\n  payload, // attributes to be passed to method\n  // additional method-specific options for values to be added to payload when calling method\n} = validAction;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"matchupduration\"\n    }}>{`matchUpDuration`}</h2>\n    <p>{`Calculates matchUp duration from START, STOP, RESUME, END timeItems.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  milliseconds,\n  time, // string representation of elapsed time, e.g. \"01:10:00\" for an hour and 10 seconds\n  relevantTimeItems,\n} = drawEngine.matchUpDuration({\n  matchUp,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"matchupsort\"\n    }}>{`matchUpSort`}</h2>\n    <p>{`Sorting function to arrange matchUps by stage, stageSequence, roundNumber, roundPosition (where applicable)`}</p>\n    <p>{`Used by `}<inlineCode parentName=\"p\">{`mocksEngine`}</inlineCode>{` for automatically scoring all matchUps in connected draw structures as part of test suites.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { matchUps } = drawEngine.allDrawMatchUps();\nconst sortedMatchUps = matchUps.sort(drawEngine.matchUpSort);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"newdrawdefinition\"\n    }}>{`newDrawDefinition`}</h2>\n    <p>{`Creates a new drawDefinition within drawEngine state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { drawId } = drawEngine.newDrawDefinition();\nconst { drawDefinition } = drawEngine.getState();\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"positionactions\"\n    }}>{`positionActions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const positionActions = drawEngine.positionActions({\n  structureId,\n  drawPosition,\n  policyDefinition: positionActionsPolicy, // optional - policy definiting what actions are allowed in client context\n});\n\nconst {\n  isActiveDrawPosition, // boolean\n  isByePosition, // boolean\n  isDrawPosition, // boolean\n  hasPositionAssiged, // boolean\n  validActions,\n} = positionActions;\n\nconst {\n  type, // 'ASSIGN', 'LUCKY', 'SWAP', 'BYE', 'REMOVE'\n  method, // tournamentEngine method relating to action type\n  payload, // attributes to be passed to method\n  // additional method-specific options for values to be added to payload when calling method\n} = validAction;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"removeentry\"\n    }}>{`removeEntry`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.removeEntry({ participantId });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"reset\"\n    }}>{`reset`}</h2>\n    <p>{`Clears the drawEngine state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.reset();\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"resetmatchuptimeitems\"\n    }}>{`resetMatchUpTimeItems`}</h2>\n    <p>{`Removes all timeItems from a specified matchUp.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.resetMatchUpTimeItems({ matchUpId });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setdrawdescription\"\n    }}>{`setDrawDescription`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const drawDescription = 'Draw Description';\ndrawEngine.setDrawDescription({ description: drawDescription });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setmatchupformat\"\n    }}>{`setMatchUpFormat`}</h2>\n    <p>{`Sets the default `}<inlineCode parentName=\"p\">{`matchUpFormat`}</inlineCode>{` for a `}<inlineCode parentName=\"p\">{`drawDefintion`}</inlineCode>{` or a `}<inlineCode parentName=\"p\">{`structure`}</inlineCode>{`, or for a specific `}<inlineCode parentName=\"p\">{`matchUp`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.setMatchUpFormat({\n  matchUpFormat,\n  matchUpType, // optional - insures that a matchUpFormat is not set on a tieMatchUp\n  tieFormat, // optional - when setting the format for a tieMatchUp\n\n  structureId, // optional - if structureId is present and not matchUpId is present, then set for structure\n  matchUpId, // optional - if matchUpId is present then only set for matchUp\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setmatchupstatus\"\n    }}>{`setMatchUpStatus`}</h2>\n    <p>{`Sets either matchUpStatus or score and winningSide. Handles any winner/loser participant movements within or across structures.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.setMatchUpStatus({\n  matchUpId,\n  matchUpTieId, // optional - if part of a TIE matchUp\n  matchUpStatus, // optional - if matchUpFormat differs from event/draw/structure defaults\n  winningSide,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setparticipants\"\n    }}>{`setParticipants`}</h2>\n    <p>{`Participants are not managed by the `}<inlineCode parentName=\"p\">{`drawEngine`}</inlineCode>{`, but they can be used when returning 'inContext' matchUps as well as when automated positioning relies on avoidance policies.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.setParticipants(participants);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setstagealternatescount\"\n    }}>{`setStageAlternatesCount`}</h2>\n    <p>{`Sets an (optional) limit to the number of accepted alternates.`}</p>\n    <p>{`Modifies the 'entryProfile' of a drawDefinition before the structures have been generated.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.setStageAlternatesCount({ alternatesCount: 8 });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setstagedrawsize\"\n    }}>{`setStageDrawSize`}</h2>\n    <p>{`Modifies the 'entryProfile' of a drawDefinition before the structures have been generated.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.setStageDrawSize({ stage: QUALIFYING, drawSize: 8 });\ndrawEngine.setStageDrawSize({ stage: MAIN, drawSize: 16 });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setstagequalifierscount\"\n    }}>{`setStageQualifiersCount`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.setStageQualifiersCount({ qualifiersCount: 4 });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setstagewildcardscount\"\n    }}>{`setStageWildcardsCount`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.setStageWildcardsCount({ wildcardsCount: 2 });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setstate\"\n    }}>{`setState`}</h2>\n    <p>{`Loads a drawDefinition into drawEngine.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.setsState(drawDefinition, deepCopy);\n`}</code></pre>\n    <p>{`By default a deep copy of the tournament record is made so that mutations made by drawEngine do not affect the source object. An optional boolean parameter, `}<em parentName=\"p\">{`deepCopy`}</em>{` can be set to false to override this default behavior.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setsubscriptions\"\n    }}>{`setSubscriptions`}</h2>\n    <p>{`Please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/subscriptions\"\n      }}>{`Subscriptions`}</a>{` in General Concepts.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"structuresort\"\n    }}>{`structureSort`}</h2>\n    <p>{`Sorting function to arrange structures by stage, positionAssignments count (size) then stageSequence\nUsed internally to order Compass structures`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const sortedStructures = drawDefinition.structures.sort(structureSort);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"swapdrawpositionassignments\"\n    }}>{`swapDrawPositionAssignments`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`@param {string} drawId - id of drawDefinition within which structure is found`}</li>\n      <li parentName=\"ul\">{`@param {string} structureId - id of structure of drawPosition`}</li>\n      <li parentName=\"ul\">{`@param {number[]} drawPositions - drawPositions for which particpants will be swapped`}</li>\n    </ul>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getstructurematchups\"\n    }}>{`getStructureMatchUps`}</h2>\n    <p>{`Returns categorized matchUps from a single structure.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  upcomingMatchUps,\n  pendingMatchUps,\n  completedMatchUps,\n  abandonedMatchUps,\n  byeMatchUps,\n} = drawEngine.allDrawMatchUps({\n  structureId,\n  context, // optional context to be added into matchUps\n  inContext, // boolean - add context { drawId, structureId, participant, individualParticipants ... }\n  roundFilter, // filter to target matchUps from specified rounds\n  nextMatchUps, // optioanl - boolean - to include winnerGoesTo and loserGoesTo\n  matchUpFilters, // attribute filters\n  contextFilters, // filters based on context attributes\n  includeByeMatchUps, // return matchUps with { matchUpStatus: BYE }\n  tournamentParticipants, // optional - provide an array of tournamentParticipants to add into matchUps\n  requireParticipants, // optional - require that participants be loaded into drawEngine or passed into method\n  tournamentAppliedPolicies, // any policies, such as privacy, to be applied to matchUps\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"tallyparticipantresults\"\n    }}>{`tallyParticipantResults`}</h2>\n    <p>{`Method used to calculate finishing positions within a ROUND_ROBIN group.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { participantResults } = drawEngine.tallyParticipantResults({\n  matchUps: structureMatchUps,\n  matchUpFormat,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"validdrawpositions\"\n    }}>{`validDrawPositions`}</h2>\n    <p>{`Returns boolean indicating whether all matchUps have valid draw positions`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`drawEngine.validDrawPositions({ matchUps });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"version\"\n    }}>{`version`}</h2>\n    <p>{`Returns NPM package version. Can be used in configurations that utilize Competition Factory engines on both client and server to ensure equivalency.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const version = drawEngine.version();\n`}</code></pre>\n    <hr></hr>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}