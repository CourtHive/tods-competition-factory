{"version":3,"sources":["webpack:///../src/tournamentEngine/documentation/api.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-tournament-engine-documentation-api-md-0e0a3ecfd3df643212c2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/charlesallen/Development/CourtHive/tods-competition-factory/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tournamentengine-api-reference\"\n    }}>{`tournamentEngine API Reference`}</h1>\n    <p>{`All tournamentEngine methods return either `}<inlineCode parentName=\"p\">{`{ success: true }`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`{ error }`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"addcourt\"\n    }}>{`addCourt`}</h2>\n    <p>{`Add a court to a Venue.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const court = {\n  altitude, // optional\n  courtDimensions, // optional\n  courtId, // generated automatically if not provided\n  courtName,\n  dateAvailability, // optional - see below\n  latitude, // optional\n  longitude, // optional\n  onlineResources,  // optional\n  pace, // optional - string;\n  surfaceCategory, SurfaceCategoryEnum;\n  surfaceType, // string; see: https://www.itftennis.com/en/about-us/tennis-tech/recognised-courts/\n  surfacedDate?: Date;\n}\ntournamentEngine.addCourt({ venueId, court });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addcourts\"\n    }}>{`addCourts`}</h2>\n    <p>{`Convenience function to bulk add courts to a Venue. Only adds `}<strong parentName=\"p\">{`dataAvailability`}</strong>{` and `}<strong parentName=\"p\">{`courtName`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const dateAvailability = [\n  {\n    date: '2020-01-01T00:00',\n    startTime: '07:00',\n    endTime: '19:00',\n    bookings: [\n      { startTime: '07:00', endTime: '08:30', bookingType: 'PRACTICE' },\n      { startTime: '08:30', endTime: '09:00', bookingType: 'MAINTENANCE' },\n      { startTime: '13:30', endTime: '14:00', bookingType: 'MAINTENANCE' },\n    ],\n  },\n];\ntournamentEngine.addCourts({\n  venueId,\n  courtsCount: 3, // optional, can be added/modified later\n  courtNames: ['Court 1', 'Court 2', 'Court 3'], // optional\n  dateAvailability, // optional\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"adddrawdefinition\"\n    }}>{`addDrawDefinition`}</h2>\n    <p>{`Adds a drawDefinition to an event in a tournamentRecord. Called after `}<a parentName=\"p\" {...{\n        \"href\": \"#generateDrawDefinition\"\n      }}>{`generateDrawDefinition`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { drawDefinition, error } = generateDrawDefinition(drawDefinitionValues);\nif (!error) {\n  const result = tournamentEngine.addDrawDefinition({\n    eventId,\n    drawDefinition,\n  });\n}\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"adddrawentries\"\n    }}>{`addDrawEntries`}</h2>\n    <p>{`Bulk add an array of `}<strong parentName=\"p\">{`participantIds`}</strong>{` to a specific draw `}<strong parentName=\"p\">{`stage`}</strong>{` with a specific `}<strong parentName=\"p\">{`entryStatus`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.addDrawEntries({\n  drawId,\n  eventId,\n  participantIds,\n  stage: MAIN, // optional\n  entryStatus: ALTERNATE, // optional\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addevent\"\n    }}>{`addEvent`}</h2>\n    <p>{`Add an event object to a tournamentRecord.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.addEvent({ event });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addevententries\"\n    }}>{`addEventEntries`}</h2>\n    <p>{`Adds participantIds to the entries array in an event`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.addEventEntries({\n  eventId,\n  participantIds,\n  stage: MAIN, // optional\n  entryStatus: ALTERNATE, // optional\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addevententrypairs\"\n    }}>{`addEventEntryPairs`}</h2>\n    <p>{`Add `}<strong parentName=\"p\">{`PAIR`}</strong>{` participant to an event. Creates new `}<inlineCode parentName=\"p\">{`{ participantType: PAIR }`}</inlineCode>{` participants if the combination of `}<inlineCode parentName=\"p\">{`individualParticipantIds`}</inlineCode>{` does not already exist.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.addEventEntryPairs({\n  eventId,\n  participantIdPairs,\n  entryStatus: ALTERNATE, // optional\n  entryStage: QUALIFYING, // optional\n  uuids, // optional - array of UUIDs to use for newly created pairs\n  allowDuplicateParticipantIdPairs, // optional - boolean - allow multiple pair participants with the same individualParticpantIds\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addmatchupendtime\"\n    }}>{`addMatchUpEndTime`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const endTime = '2020-01-01T09:05:00Z';\ntournamentEngine.addMatchUpEndTime({ drawId, matchUpId, endTime });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addmatchupofficial\"\n    }}>{`addMatchUpOfficial`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.addMatchUpOfficial({\n  drawId,\n  matchUpId,\n  participantId,\n  officialType,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addparticipant\"\n    }}>{`addParticipant`}</h2>\n    <p>{`Adds an INDIVIDUAL, PAIR or TEAM participant to tournament participants. Includes integrity checks for `}<inlineCode parentName=\"p\">{`{ participantType: PAIR }`}</inlineCode>{` to insure `}<inlineCode parentName=\"p\">{`participant.individualParticipantIds`}</inlineCode>{` are valid.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const participantId = UUID();\nconst participant = {\n  participantId, // automatically generated if not provided\n  participantRole: COMPETITOR,\n  participantType: INDIVIDUAL,\n  person: {\n    standardFamilyName: 'Family',\n    standardGivenName: 'Given',\n    nationalityCode, // optional\n    sex, // optional\n  },\n};\n\ntournamentEngine.addParticipant({ participant });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addparticipants\"\n    }}>{`addParticipants`}</h2>\n    <p>{`Bulk add participants to a tournamentRecord.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.addParticipants({ participants });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addindividualparticipantids\"\n    }}>{`addIndividualParticipantIds`}</h2>\n    <p>{`Adds individualParticipantIds to GROUP or TEAM participants`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.addIndividualParticipantIds({\n  groupingParticipantId,\n  individualParticipantIds,\n  removeFromOtherTeams, // optional boolean\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addpenalty\"\n    }}>{`addPenalty`}</h2>\n    <p>{`Add a penaltyItem to one or more particpants.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const createdAt = new Date().toISOString();\nconst penaltyData = {\n  refereeParticipantId, // optional\n  participantIds: [participantId],\n  penaltyType: BALL_ABUSE,\n  penaltyCode: 'Organization specific code', // optional\n  matchUpId,\n  issuedAt, // optional ISO timeStamp for time issued to participant\n  createdAt,\n  notes: 'Hit ball into sea',\n};\nlet result = tournamentEngine.addPenalty(penaltyData);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addplayoffstructures\"\n    }}>{`addPlayoffStructures`}</h2>\n    <p>{`Adds playoff structures to an existing drawDefinition.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.addPlayoffStructures({\n  drawId,\n  structureId,\n  roundNumbers: [3], // requires if not provided playoffPositions\n  playoffPositions: [3, 4], // required if not provided roundNumbers\n  playoffAttributes, // optional - object mapping exitProfiles to structure names, e.g. 0-1-1 for SOUTH\n  playoffStructureNameBase, // optional - base word for default playoff naming, e.g. 'Playoff'\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setsuborder\"\n    }}>{`setSubOrder`}</h2>\n    <p>{`Assigns a subOrder value to a participant within a structure by drawPosition where participant has been assigned`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.setSubOrder({\n  drawId,\n  structureId,\n  drawPosition: 1,\n  subOrder: 2,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"addvenue\"\n    }}>{`addVenue`}</h2>\n    <p>{`Adds `}<strong parentName=\"p\">{`venueId`}</strong>{` if not provided.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.addVenue({ venue: { venueName } });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"alloweddrawtypes\"\n    }}>{`allowedDrawTypes`}</h2>\n    <p>{`Returns an array of names of allowed Draw Types, if any applicable policies have been applied to the tournamentRecord.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const drawTypes = tournamentEngine.allowedDrawTypes();\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"allowedmatchupformats\"\n    }}>{`allowedMatchUpFormats`}</h2>\n    <p>{`Returns an array of TODS matchUpFormat codes for allowed scoring formats, if any applicable policies have been applied to the tournamentRecord.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const drawTypes = tournamentEngine.allowedDrawTypes();\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"alleventmatchups\"\n    }}>{`allEventMatchUps`}</h2>\n    <p>{`Returns all matchUps for an event.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { matchUps } = allEventMatchUps({\n  eventId,\n  inContext: true, // include contextual details\n  nextMatchUps: true, // include winner/loser target matchUp details\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"alltournamentmatchups\"\n    }}>{`allTournamentMatchUps`}</h2>\n    <p>{`Return an array of all matchUps contained within a tournament. These matchUps are returned `}<strong parentName=\"p\">{`inContext`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { matchUps } = tournamentEngine.allTournamentMatchUps();\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"alternatedrawpositionassignment\"\n    }}>{`alternateDrawPositionAssignment`}</h2>\n    <p>{`Replaces an existing drawPosition assignment with an alternateParticipantId. This method is included in `}<inlineCode parentName=\"p\">{`validActions`}</inlineCode>{` for `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/positionActions\"\n      }}>{`positionActions`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.alternateDrawPositionAssignment({\n  drawId,\n  structureId,\n  drawPosition,\n  alternateParticipantId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"assigndrawposition\"\n    }}>{`assignDrawPosition`}</h2>\n    <p>{`Low level function normally called by higher order convenience functions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.assignDrawPosition({\n  drawId,\n  structureId,\n  drawPosition,\n  participantId, // optional - if assigning position to a participant\n  qualifier, // optional boolean, if assigning a space for a qualifier\n  bye, // optional boolean, if assigning a bye\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"assignmatchupcourt\"\n    }}>{`assignMatchUpCourt`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.assignMatchUpCourt({\n  drawId, // drawId where matchUp is found\n  matchUpId,\n  courtId,\n  courtDayDate, // ISO date string\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"assignseedpositions\"\n    }}>{`assignSeedPositions`}</h2>\n    <p>{`Assign `}<strong parentName=\"p\">{`seedNumbers`}</strong>{` to `}<strong parentName=\"p\">{`participantIds`}</strong>{` within a target draw structure.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Provides the ability to assign seeding `}<em parentName=\"li\">{`after`}</em>{` a structure has been generated`}</li>\n      <li parentName=\"ul\">{`To be used `}<em parentName=\"li\">{`before`}</em>{` participants are positioned`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`seedNumber`}</strong>{` is unique while `}<strong parentName=\"p\">{`seedValue`}</strong>{` can be any string representation, e.g `}<inlineCode parentName=\"p\">{`\"5-8\"`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let assignments = [{ seedNumber: 1, seedValue: 1, participantId }];\ntournamentEngine.assignSeedPositions({\n  eventId,\n  drawId,\n  structureId,\n  assignments,\n\n  stage, // opional; defaults to { stage: MAIN }\n  stageSequence, // optional; defaults to { stageSequence: 1 }\n  useExistingSeedLimits, // optional; restrict ability to assign seedNumbers beyond established limit\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"assigntiematchupparticipantid\"\n    }}>{`assignTieMatchUpParticipantId`}</h2>\n    <p>{`Used when interactively creating `}<inlineCode parentName=\"p\">{`{ participantType: PAIR }`}</inlineCode>{` participants.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"attacheventpolicy\"\n    }}>{`attachEventPolicy`}</h2>\n    <p>{`Attaches a policy to an event within a tournamentRecord.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/policies\"\n      }}>{`Policies`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.attachEventPolicy({\n  eventId,\n  policyDefinition: SEEDING_POLICY,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"attachpolicy\"\n    }}>{`attachPolicy`}</h2>\n    <p>{`Attaches a policy to a tournamentRecord.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/policies\"\n      }}>{`Policies`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.attachPolicy({ policyDefinition: SEEDING_POLICY });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"automatedpositioning\"\n    }}>{`automatedPositioning`}</h2>\n    <p>{`Positions participants in a draw structure.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/policies\"\n      }}>{`Policies`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.automatedPositioning({ drawId, structureId });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"bulkmatchupstatusupdate\"\n    }}>{`bulkMatchUpStatusUpdate`}</h2>\n    <p>{`Provides the ability to update the outcomes of multiple matchUps at once.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const outcomes = [\n  {\n    eventId,\n    drawId,\n    matchUpId,\n    matchUpFormat,\n    matchUpStatus,\n    winningSide,\n    score,\n  },\n];\ntournamentEngine.bulkMatchUpStatusUpdate({ outcomes });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"bulkschedulematchups\"\n    }}>{`bulkScheduleMatchUps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const schedule = {\n  scheduledTime: '08:00',\n  scheduledDayDate: '2021-01-01T00:00', // best practice to provide ISO date string\n  venueId,\n};\ntournamentEngine.bulkScheduleMatchUps({ matchUpIds, schedule });\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"bulkupdatepublishedeventids\"\n    }}>{`bulkUpdatePublishedEventIds`}</h2>\n    <p>{`Returns a filtered array of publishedEventIds from all eventIds which are included in a bulkMatchUpStatusUpdate. publishedEventIds can be used to determine which events to re-publish.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { publishedEventIds } = tournamentEngine.bulkUpdatePublishedEventIds({\n  outcomes,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"checkinparticipant\"\n    }}>{`checkInParticipant`}</h2>\n    <p>{`Set the check-in state for a participant. Used to determine when both participants in a matchUp are available to be assigned to a court.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.checkInParticipant({\n  drawId,\n  matchUpId,\n  participantId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"checkoutparticipant\"\n    }}>{`checkOutParticipant`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.checkOutParticipant({\n  drawId,\n  matchUpId,\n  participantId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"deletecourt\"\n    }}>{`deleteCourt`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.deleteCourt({\n  courtId,\n  force, // override warnings about matchUps scheduled on specified court\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"deletedrawdefinitions\"\n    }}>{`deleteDrawDefinitions`}</h2>\n    <p>{`Remove drawDefinitions from an event. An audit timeItem is added to the tournamentRecord whenever this method is called.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.deleteDrawDefinitions({\n  eventId,\n  drawIds: [drawId],\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"deleteflightandflightdraw\"\n    }}>{`deleteFlightAndFlightDraw`}</h2>\n    <p>{`Removes flight from event's flightProfile as well as associated drawDefinition (if generated).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.deleteFlightAndFlightDraw({ eventId, drawId });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"deleteflightprofileandflightdraws\"\n    }}>{`deleteFlightProfileAndFlightDraws`}</h2>\n    <p>{`Removes flightProfiles and all associated drawDefinitions from a specified event.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.deleteFlightProfileAndFlightDraws({ eventId });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"deleteevents\"\n    }}>{`deleteEvents`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.deleteEvents({ eventIds });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"deleteparticipants\"\n    }}>{`deleteParticipants`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.deleteParticipantIds({ paricipantIds });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"deletevenue\"\n    }}>{`deleteVenue`}</h2>\n    <p>{`If a venue has scheduled matchUps then it will not be deleted unless `}<inlineCode parentName=\"p\">{`{ force: true }`}</inlineCode>{` in which case all relevant matchUps will be unscheduled.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.deleteVenue({ venueId, force });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"deletevenues\"\n    }}>{`deleteVenues`}</h2>\n    <p>{`If a venue has scheduled matchUps then it will not be deleted unless `}<inlineCode parentName=\"p\">{`{ force: true }`}</inlineCode>{` in which case all relevant matchUps will be unscheduled.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.deleteVenues({ venueIds, force });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"destroypairentry\"\n    }}>{`destroyPairEntry`}</h2>\n    <p>{`Removes a `}<inlineCode parentName=\"p\">{`{ participantType: PAIR }`}</inlineCode>{` entry from an event and adds the individualParticipantIds to entries as entryStatus: UNPAIRED`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.destroyPairEntry({\n  eventId,\n  participantId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"devcontext\"\n    }}>{`devContext`}</h2>\n    <p>{`Setting devContext(true) bypasses `}<strong parentName=\"p\">{`try {} catch (err) {}`}</strong>{` code block and in some cases enables enhanced logging`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.devContext(true);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"eventmatchups\"\n    }}>{`eventMatchUps`}</h2>\n    <p>{`Returns matchUps for an event grouped by status.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  abandonedMatchUps,\n  byeMatchUps,\n  completedMatchUps,\n  pendingMatchUps,\n  upcomingMatchUps,\n} = tournamentEngine.eventMatchUps({\n  eventId,\n  nextMatchUps, // optional boolean; include winner/loser target matchUp details\n  matchUpFilters,\n  contextFilters,\n  tournamentAppliedPolicies,\n  inContext: true, // optional - adds context details to all matchUps\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"findcourt\"\n    }}>{`findCourt`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { court } = tournamentEngine.findCourt({ courtId });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"findmatchup\"\n    }}>{`findMatchUp`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  matchUp,\n  structure, // returned for convenience\n} = tournamentEngine.findMatchUp({\n  drawId,\n  matchUpId,\n  inContext, // optional - boolean - returns matchUp with additional attributes\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"findparticipant\"\n    }}>{`findParticipant`}</h2>\n    <p>{`Find tournament participant by either `}<inlineCode parentName=\"p\">{`participantId`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`personId`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { participant } = tournamentEngine.findParticipant({\n  participantId,\n  personId, // required only if no participantId provided\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"findvenue\"\n    }}>{`findVenue`}</h2>\n    <p>{`Returns a complete venue object. Primarily used internally.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.findVenue({ venueId });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"generatedrawdefinition\"\n    }}>{`generateDrawDefinition`}</h2>\n    <p>{`This is a convenience method which handles most use cases for draw generation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const drawDefinitionValues = {\n  eventId, // optional - used to find any avoidance policies to be applied\n  drawSize, // number of drawPositions in the first draw structure\n  drawType, // optional - defaults to SINGLE_ELIMINATION\n  drawName, // cutom name for generated draw structure(s)\n  automated, // optional - whether or not to automatically place participants in structures\n  matchUpType, // optional - SINGLES, DOUBLES, or TEAM\n  matchUpFormat, // optional - default matchUpFormatCode for all contained matchUps\n  playoffMatchUpFormat, // optional - relevant for ROUND_ROBIN_WITH_PLAYOFFS\n  tieFormat, // optional - { collectionDefinitions, winCriteria } for 'dual' or 'tie' matchUps\n  seedsCount, // optional - number of seeds to generate if no seededParticipants provided\n  seededParticipants, // optional - { participantId, seedNumber, seedValue }\n  seedingProfile, // optional - used to specify WATERFALL seeding for ROUND_ROBIN\n  qualifyingRound, // optional - used to derive roundLimit\n  structureOptions, // optional - for ROUND_ROBIN - { groupSize, playoffGroups }\n  policyDefinitions, // optional - seeding or avoidance policies to be used when placing participants\n  qualifyingPositions, // optional - number of positions in draw structure to be filled by qualifiers\n};\n\nconst { drawDefinition } = tournamentEngine.generateDrawDefinition(\n  drawDefinitionValues\n);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"generateflightprofile\"\n    }}>{`generateFlightProfile`}</h2>\n    <p>{`Splits event entries into # of draws. `}<inlineCode parentName=\"p\">{`flightProfile`}</inlineCode>{` is an extension on an event which contains attributes to be used by `}<inlineCode parentName=\"p\">{`generateDrawDefinition`}</inlineCode>{`.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/scaleItems\"\n      }}>{`Scale Items`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const scaleAttributes = {\n  scaleType: RATING,\n  eventType: SINGLES,\n  scaleName: 'WTN',\n  accessor, // optional - string determining how to access attribute if scaleValue is an object\n};\n\nconst { flightProfile, splitEntries } = tournamentEngine.generateFlightProfile({\n  eventId, // event for which entries will be split\n  scaleAttributes, // defines participant sort method prior to split\n  scaleSortMethod, // optional - function(a, b) {} sort method, useful when scaleValue is an object or further proessing is required\n  sortDescending, // optional - default sorting is ASCENDING; only applies to default sorting method.\n  flightsCount: 3, // number of draws to be created\n  deleteExisting: true, // optional - remove existing flightProfile\n  splitMethod: SPLIT_WATERFALL, // optional - defaults to SPLIT_LEVEL_BASED\n  drawNames: ['Green Flight', 'Blue Flight'], // optional\n  drawNameRoot: 'Flight', // optional - used to generate drawNames, e.g. 'Flight 1', 'Flight 2'\n});\n\nconst {\n  flights: [\n    {\n      drawId, // unique identifier for generating drawDefinitions\n      drawName, // custom name for generated draw\n      drawEntries, // entries allocated to target draw\n    },\n  ],\n} = flightProfile;\n\n// use flight information to generate drawDefinition\nconst {\n  flights: [flight],\n} = flightProfile;\n\nObject.assign(drawDefinitionValues, flight);\nconst { drawDefinition } = tournamentEngine.generateDrawDefinition(\n  drawDefinitionValues\n);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"generateteamsfromparticipantattribute\"\n    }}>{`generateTeamsFromParticipantAttribute`}</h2>\n    <p>{`Uses attributes of individual participnts or persons to generate `}<inlineCode parentName=\"p\">{`{ participantType: TEAM }`}</inlineCode>{` participants.`}</p>\n    <p>{`Returns count of # of TEAM participants added;`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  participantsAdded,\n} = tournamentEngine.generateTeamsFromParticipantAttribute({\n  participantAttribute,\n  personAttribute, // optional - attribute of person object\n  uuids, // optional - uuids to assign to generated participants\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getavailableplayoffrounds\"\n    }}>{`getAvailablePlayoffRounds`}</h2>\n    <p>{`Returns rounds of a structure which are available for adding playoff structures.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  playoffRounds,\n  playoffRoundsRanges,\n} = tournamentEngine.getAvailablePlayoffRounds({\n  drawId,\n  structureId,\n});\n`}</code></pre>\n    <p>{`...For a SINGLE_ELIMINATION struture with drawSize: 16 would return:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`    {\n      playoffRounds: [ 1, 2, 3 ],\n      playoffRoundsRanges: [\n        { round: 1, range: '9-16' },\n        { round: 2, range: '5-8' },\n        { round: 3, range: '3-4' }\n      ]\n    }\n\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getcourtinfo\"\n    }}>{`getCourtInfo`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  altitude,\n  courtId,\n  courtName,\n  courtDimensions,\n  latitude,\n  longitude,\n  surfaceCategory,\n  surfaceType,\n  surfaceDate,\n  pace,\n  notes,\n} = tournamentEngine.getCourtInfo({ courtId });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getcourts\"\n    }}>{`getCourts`}</h2>\n    <p>{`Returns courts associated with a tournaments; optionall filter by venue(s).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { courts } = tournamentEngine.getCourts({\n  venueId, // optional - return courts for a specific venue\n  venueIds, // optional - return courts for specified venues\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getdrawdata\"\n    }}>{`getDrawData`}</h2>\n    <p>{`Primarily used by `}<inlineCode parentName=\"p\">{`getEventData`}</inlineCode>{` for publishing purposes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  drawInfo: {\n    drawActive, // boolean - draw has active matchUps\n    drawCompleted, // boolean - all draw matchUps are complete\n    drawGenerated, // boolean - draw has structures containing matchUps\n  },\n  structures,\n} = getDrawData({ drawDefinition });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getevent\"\n    }}>{`getEvent`}</h2>\n    <p>{`Get an event by either its `}<inlineCode parentName=\"p\">{`eventId`}</inlineCode>{` or by a `}<inlineCode parentName=\"p\">{`drawId`}</inlineCode>{` which it contains. Also returns `}<inlineCode parentName=\"p\">{`drawDefinition`}</inlineCode>{` if a `}<inlineCode parentName=\"p\">{`drawId`}</inlineCode>{` is specified.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  event,\n  drawDefinition, // only returned if drawId is specified\n} = tournamentEngine.getEvent({\n  eventId, // optional - find event by eventId\n  drawId, // optional - find the event which contains specified drawId\n});\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`@param {string} eventId - id of the event to retreive`}</li>\n      <li parentName=\"ul\">{`@param {object} context - attributes to be added into each event object.`}</li>\n    </ul>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"geteventappliedpolicies\"\n    }}>{`getEventAppliedPolicies`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { appliedPolicies } = tournamentEngine.getEventAppliedPolicies({\n  eventId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getevents\"\n    }}>{`getEvents`}</h2>\n    <p>{`Return `}<strong parentName=\"p\">{`deepCopies`}</strong>{` of all events in a tournament record.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { events } = tournamentEngine.getEvents();\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"geteventproperties\"\n    }}>{`getEventProperties`}</h2>\n    <p>{`Gather attributes of events which come from other tournament elements, e.g. participants which have rankings/ratings/seedings for a given event.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  entryScaleAttributes,\n  hasSeededParticipants,\n  hasRankedParticipants,\n  hasRatedParticipants,\n} = tournamentEngine.getEventProperties({ eventId });\n`}</code></pre>\n    <p>{`... where `}<strong parentName=\"p\">{`entryScaleAttributes`}</strong>{` is an array of { prticipantId, participantName, seed, ranking, rating }`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"geteventdata\"\n    }}>{`getEventData`}</h2>\n    <p>{`Returns event information optimized for publishing: `}<inlineCode parentName=\"p\">{`matchUps`}</inlineCode>{` have context and separated into rounds for consumption by visualization libraries such as `}<inlineCode parentName=\"p\">{`tods-react-draws`}</inlineCode>{`.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#publishEvent\"\n      }}>{`publishEvent`}</a>{` for details on `}<inlineCode parentName=\"p\">{`policyDefinition`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { eventData } = tournamentEngine.getEventData({\n  drawId,\n  policyDefinition, // optional\n});\nconst { drawsData, venuesData, eventInfo, tournamentInfo } = eventData;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getmatchupformat\"\n    }}>{`getMatchUpFormat`}</h2>\n    <p>{`Returns `}<inlineCode parentName=\"p\">{`matchUpFormat`}</inlineCode>{` codes for specified context(s). Refer to `}<inlineCode parentName=\"p\">{`getMatchUpFormat.test.js`}</inlineCode>{` for specfic use cases.`}</p>\n    <p><inlineCode parentName=\"p\">{`matchUpFormat`}</inlineCode>{` for each matchUp is determined by traversing the hierarchy: `}<inlineCode parentName=\"p\">{`matchUp => stucture => drawDefinition => event`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  matchUpFormat,\n  structureDefaultMatchUpFormat,\n  drawDefaultMatchUpFormat,\n  eventDefaultMatchUpFormat,\n} = tournamentEngine.getMatchUpFormat({\n  eventId,\n  drawId,\n  structureId,\n  matchUpId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getmatchupscheduledetails\"\n    }}>{`getMatchUpScheduleDetails`}</h2>\n    <p>{`Returns the latest values for all `}<inlineCode parentName=\"p\">{`matchUp.timeItems`}</inlineCode>{`, along with calculated values, that relate to the scheduling of a `}<inlineCode parentName=\"p\">{`matchUp`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  schedule: {\n    time,\n    courtId,\n    venueId,\n    startTime,\n    endTime,\n    milliseconds,\n    scheduledDate,\n    scheduledTime,\n  },\n} = tournamentEngine.getMatchUpScheduleDetails({ matchUp });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getpairedparticipant\"\n    }}>{`getPairedParticipant`}</h2>\n    <p>{`Returns the `}<inlineCode parentName=\"p\">{`{ participantType: PAIR }`}</inlineCode>{`, if any, which contains the specified `}<inlineCode parentName=\"p\">{`individualParticipantIds`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { participant } = tournamentEngine.getPairedParticipant({\n  participantIds: individualParticipantIds,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getparticipanteventdetails\"\n    }}>{`getParticipantEventDetails`}</h2>\n    <p>{`Returns an array of eventDetails in which a specified `}<inlineCode parentName=\"p\">{`participantId`}</inlineCode>{` appears. Used primarily by `}<inlineCode parentName=\"p\">{`tournamentEngine.tournamentParticipants()`}</inlineCode>{` to add context.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { eventDetails } = tournamentEngine.getParticipantEventDetails({\n  participantId,\n});\n\nconst [{ eventName, eventId }] = eventDetails;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getparticipantidfinishingpositions\"\n    }}>{`getParticipantIdFinishingPositions`}</h2>\n    <p>{`Returns the Range of finishing positions possible for all participantIds within a draw`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const idMap = tournamentEngine.getParticipantIdFinishingPositions({\n  drawId,\n  byeAdvancements, // optional boolean - whether or not to consider byeAdvancements\n});\n\nconst {\n  relevantMatchUps,\n  finishingPositionRanges,\n  finishingPositionRange,\n} = idMap[participantId];\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getparticipantmembership\"\n    }}>{`getParticipantMembership`}</h2>\n    <p>{`Returns all grouping participants which include `}<inlineCode parentName=\"p\">{`participantId`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`{ individualParticipantIds }`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  [PAIR]: doublesParticipantIds,\n  [GROUP]: groupParticipantIds,\n  [TEAM]: teamParticipantIds,\n} = tournamentEngine.getParticipantMembership({\n  participantId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getparticipantscaleitem\"\n    }}>{`getParticipantScaleItem`}</h2>\n    <p>{`Return a ranking or rating or seeding value for a participant, referenced by participantId.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/scaleItems\"\n      }}>{`Scale Items`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const scaleAttributes = {\n  scaleType: RATING,\n  eventType: SINGLES,\n  scaleName: 'WTN',\n  accessor, // optional - string determining how to access attribute if scaleValue is an object\n};\nconst {\n  scaleItem: { scaleValue },\n} = tournamentEngine.getParticipantScaleItem({\n  participantId,\n  scaleAttributes,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getparticipantsigninstatus\"\n    }}>{`getParticipantSignInStatus`}</h2>\n    <p>{`Participant signInStatus can be either 'SIGNED_IN' or 'SIGNED_OUT' (or undefined). See `}<a parentName=\"p\" {...{\n        \"href\": \"#modifyParticipantsSignInStatus\"\n      }}>{`modifyParticipantsSignInStatus`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const signInStatus = tournamentEngine.getParticipantSignInStatus({\n  participantId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getpolicydefinition\"\n    }}>{`getPolicyDefinition`}</h2>\n    <p>{`Finds policyDefinition for either draw (if drawId), event (if eventId), or tournament, in that order. This enables a default policy to be attached to the tournament record and for event-specific or draw-specific policies to override the default(s).`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/policies\"\n      }}>{`Policies`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { policyDefinition } = tournamentEngine.getPolicyDefinition({\n  policyType: POLICY_TYPE_SEEDING,\n  eventId, // optional\n  drawId, // optional\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getpositionassignments\"\n    }}>{`getPositionAssignments`}</h2>\n    <p>{`Returns an array of `}<inlineCode parentName=\"p\">{`positionAssignments`}</inlineCode>{` for a structure. Combines `}<inlineCode parentName=\"p\">{`positionAssginments`}</inlineCode>{` for child structures in the case of ROUND_ROBIN where `}<inlineCode parentName=\"p\">{`{ structureType: CONTAINER }`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let { positionAssignments } = getPositionAssignments({\n  drawDefinition, // optional if { structure } is provided\n  structureId, // optional if { structure } is provided\n  structure, // optional if { drawDefinition, structureId } are provided\n});\n\nconst [{ drawPosition, participantId, qualifier, bye }] = positionAssignments;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getscaledentries\"\n    }}>{`getScaledEntries`}</h2>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/scaleItems\"\n      }}>{`Scale Items`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { scaledEntries } = tournamentEngine.getScaledEntries({\n  eventId,\n  stage, // optional - filter entries by stage\n\n  scaleAttributes,\n  scaleSortMethod, // optional - function(a, b) {} sort method, useful when scaleValue is an object or further proessing is required\n  sortDescending, // optional - default sorting is ASCENDING; only applies to default sorting method.\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getseedscount\"\n    }}>{`getSeedsCount`}</h2>\n    <p>{`Takes a policyDefinition, drawSize and participantCount and returrns the number of seeds valid for the specified drawSize`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { seedsCount, error } = getSeedsCount({\n  drawSizeProgression, // optional - fits the seedsCount to the participantsCount rather than the drawSize\n  policyDefinition: SEEDING_USTA,\n  participantCount: 15,\n  drawSize: 128,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getstate\"\n    }}>{`getState`}</h2>\n    <p>{`Returns a deep copy of the current tournamentEngine state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { tournamentRecord } = tournamentEngine.getState();\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"gettournamentparticipants\"\n    }}>{`getTournamentParticipants`}</h2>\n    <p>{`Returns `}<strong parentName=\"p\">{`deepCopies`}</strong>{` of tournament participants filtered by participantFilters which are arrays of desired participant attribute values`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { tournamentParticipants } = tournamentEngine.getTournamentParticipants({\n  participantFilters: { participantTypes: [INDIVIDUAL] },\n  inContext, // optional - adds individualParticipants for all individualParticipantIds\n  withStatistics, // optional - adds events, machUps and statistics, e.g. 'winRatio'\n  withOpponents, // optional - include opponent participantIds\n  withMatchUps, // optional - include all matchUps in which the participant appears\n  convertExtensions, // optional - BOOLEAN - convert extensions so _extensionName attributes\n  policyDefinition, // optional - can accept a privacy policy to filter participant attributes\n});\n`}</code></pre>\n    <p>{`participantFilters imlemented: eventIds, participantTypes, participantRoles, signInStatus`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"gettournamentpenalties\"\n    }}>{`getTournamentPenalties`}</h2>\n    <p>{`Returns an array of all penalties issued during a tournament.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { penalties } = tournamentEngine.getTournamentPenalties();\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"gettournamentinfo\"\n    }}>{`getTournamentInfo`}</h2>\n    <p>{`Returns tournament attributes. Used to attach details to publishing payload by `}<inlineCode parentName=\"p\">{`getEventData`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { tournamentInfo } = getTournamentInfo({ tournamentRecord });\nconst {\n  tournamentId,\n  tournamentRank,\n\n  formalName,\n  tournamentName,\n  promotionalName,\n  onlineResources,\n\n  localTimeZone,\n  startDate,\n  endDate,\n\n  hostCountryCode,\n  tournamentContacts,\n  tournamentAddresses,\n} = tournamentInfo;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getvenues\"\n    }}>{`getVenues`}</h2>\n    <p>{`Returns an array of all Venues which are part of a tournamentRecord.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { venues } = tournamentEngine.getVenues();\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getvenuedata\"\n    }}>{`getVenueData`}</h2>\n    <p>{`Returns restricted venue attributes along with information for all associated courts. Used primarily by `}<inlineCode parentName=\"p\">{`getEventData`}</inlineCode>{` to return a subset of venue/courts information for publishing purposes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  venueName,\n  venueAbbreviation,\n  courtsInfo, // array of courts and associated attributes\n} = tournamentEngine.getVenueData({ venueId });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"luckyloserdrawpositionassignment\"\n    }}>{`luckyLoserDrawPositionAssignment`}</h2>\n    <p>{`Replaces an existing drawPosition assignment with a luckyLoserParticipantId. This method is included in `}<inlineCode parentName=\"p\">{`validActions`}</inlineCode>{` for `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/positionActions\"\n      }}>{`positionActions`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.luckyLoserDrawPositionAssignment({\n  drawId,\n  structureId,\n  drawPosition,\n  luckyLoserParticipantId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"matchupactions\"\n    }}>{`matchUpActions`}</h2>\n    <p>{`Return an array of all validActions for a specific matchUp.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  isByeMatchUp, // boolean; true if matchUp includes a BYE\n  structureIsComplete, // boolean; true if structure is ready for positioning\n  validActions, // array of possible actions given current matchUpStatus\n} = tournamentEngine.matchUpActions({\n  drawId, // optional - not strictly required; method will find matchUp by brute force without it\n  matchUpId,\n});\n\nconst {\n  type, // 'REFEREE', 'SCHEDULE', 'PENALTY', 'STATUS', 'SCORE', 'START', 'END'.\n  method, // tournamentEngine method relating to action type\n  payload, // attributes to be passed to method\n  // additional method-specific options for values to be added to payload when calling method\n} = validAction;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"mergeparticipants\"\n    }}>{`mergeParticipants`}</h2>\n    <p>{`Merge `}<inlineCode parentName=\"p\">{`participants`}</inlineCode>{` array with existing tournament participants. Useful when synchronizing with a remote registration service, for example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.mergeParticipants({ participants });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"modifycourtavailability\"\n    }}>{`modifyCourtAvailability`}</h2>\n    <p>{`Modifies the `}<inlineCode parentName=\"p\">{`dateAvailability`}</inlineCode>{` attribute of a specified court. Warns if existing scheduled matchUps would be affected.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const result = tournamentEngine.modifyCourtAvailability({\n  courtId,\n  dateAvailability,\n  force, // override warning that existing scheduled matchUps exist\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"modifyevententries\"\n    }}>{`modifyEventEntries`}</h2>\n    <p>{`Modify the entries for an event. For DOUBLES events automatically create PAIR participants if not already present.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.modifyEventEntries({\n  eventId,\n  entryStage = MAIN,\n  participantIdPairs = [],\n  unpairedParticipantIds = [],\n  entryStatus = DIRECT_ACCEPTANCE,\n})\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"modifyindividualparticipantids\"\n    }}>{`modifyIndividualParticipantIds`}</h2>\n    <p>{`Modify `}<inlineCode parentName=\"p\">{`individualParticipantIds`}</inlineCode>{` of a grouping participant `}<inlineCode parentName=\"p\">{`{ participantType: TEAM || GROUP }`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.devContext(true).modifyIndividualParticipantIds({\n  groupingParticipantId, // participant (TEAM or GROUP) to which participantIds are to be added\n  individualParticipantIds: newIndividualParticipantIds,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"modifyparticipant\"\n    }}>{`modifyParticipant`}</h2>\n    <p>{`Modifies attributes of a participant with integrity checks to insure valid values for e.g. `}<inlineCode parentName=\"p\">{`{ participantType, participantRole }`}</inlineCode>{`. Adds participant if not found.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.modifyParticipant({\n  participant: updatedIndividualParticipant,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"modifypenalty\"\n    }}>{`modifyPenalty`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const penaltyData = {\n  participantIds: [participantId],\n  penaltyType: BALL_ABUSE,\n  matchUpId,\n  issuedAt,\n  notes: 'Hit ball into sea',\n};\nlet result = tournamentEngine.addPenalty(penaltyData);\nconst { penaltyId } = result;\n\nconst notes = 'Hit ball into spectator';\nconst modifications = { notes };\ntournamentEngine.modifyPenalty({ penaltyId, modifications });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"modifyparticipantssigninstatus\"\n    }}>{`modifyParticipantsSignInStatus`}</h2>\n    <p>{`Modify the signInStatus of multiple participants, referenced by participantId.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.modifyParticipantsSignInStatus({\n  participantIds: [participantId],\n  signInState: SIGNED_IN,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"modifyseedassignment\"\n    }}>{`modifySeedAssignment`}</h2>\n    <p>{`Change the display representation of a seedNumber for a specified `}<inlineCode parentName=\"p\">{`participantId`}</inlineCode>{`. This method is included in `}<inlineCode parentName=\"p\">{`validActions`}</inlineCode>{` for `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/positionActions\"\n      }}>{`positionActions`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.modifySeedAssignment({\n  drawId,\n  structureId,\n  participantId,\n  seedValue, // display representation such as '5-8'\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"newtournamentrecord\"\n    }}>{`newTournamentRecord`}</h2>\n    <p>{`Creates a new tournamentRecord in tournamentEngine state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.newTournamentRecord({\n  tournamentId, // optional - will be generated if not provided\n});\n\nconst { tournamentRecord } = tournamentEngine.getState();\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"participantscaleitem\"\n    }}>{`participantScaleItem`}</h2>\n    <p>{`Similar to `}<a parentName=\"p\" {...{\n        \"href\": \"#getParticipantScaleItem\"\n      }}>{`getParticipantScaleItem`}</a>{` but takes a `}<inlineCode parentName=\"p\">{`participant`}</inlineCode>{` object and doesn't require `}<inlineCode parentName=\"p\">{`tournamentEngine.setState(tournamentRecord)`}</inlineCode>{`.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/scaleItems\"\n      }}>{`Scale Items`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const scaleAttributes = {\n  scaleType: RATING,\n  eventType: SINGLES,\n  scaleName: 'WTN',\n  accessor, // optional - string determining how to access attribute if scaleValue is an object\n};\nconst {\n  scaleItem: { scaleValue },\n} = tournamentEngine.participantScaleItem({\n  participant,\n  scaleAttributes,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"positionactions\"\n    }}>{`positionActions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const positionActions = tournamentEngine.positionActions({\n  drawId,\n  structureId,\n  drawPosition,\n  policyDefinition: positionActionsPolicy, // optional - policy definiting what actions are allowed in client context\n});\n\nconst {\n  isActiveDrawPosition, // boolean\n  isByePosition, // boolean\n  isDrawPosition, // boolean\n  hasPositionAssiged, // boolean\n  validActions,\n} = positionActions;\n\nconst {\n  type, // 'ASSIGN', 'LUCKY', 'SWAP', 'BYE', 'REMOVE'\n  method, // tournamentEngine method relating to action type\n  payload, // attributes to be passed to method\n  // additional method-specific options for values to be added to payload when calling method\n} = validAction;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"publishevent\"\n    }}>{`publishEvent`}</h2>\n    <p>{`Utilizes `}<a parentName=\"p\" {...{\n        \"href\": \"#getEventData\"\n      }}>{`getEventData`}</a>{` to prepare data for display. Differs from `}<a parentName=\"p\" {...{\n        \"href\": \"#getEventData\"\n      }}>{`getEventData`}</a>{` in that it modifies the `}<inlineCode parentName=\"p\">{`publishState`}</inlineCode>{` of the event. Subscriptions or middleware may be used to deliver the generated payload for presentation on a public website.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/policies\"\n      }}>{`Policies`}</a>{` for more details on `}<inlineCode parentName=\"p\">{`policyDefinitions`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const policyDefinition = Object.assign(\n  {},\n  ROUND_NAMING_POLICY,\n  PARTICIPANT_PRIVACY_DEFAULT\n);\n\nconst { eventData } = tournamentEngine.publishEvent({\n  eventId,\n  policyDefinition,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"rankbyratings\"\n    }}>{`rankByRatings`}</h2>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"regeneratedrawdefinition\"\n    }}>{`regenerateDrawDefinition`}</h2>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"removedrawpositionassignment\"\n    }}>{`removeDrawPositionAssignment`}</h2>\n    <p>{`Clear draw position and optionally replace with a BYE, change entryStatus, or decompose a PAIR particpant into UNPAIRED participants (DOUBLES only).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`removeDrawPositionAssignment({\n  drawDefinition,\n  mappedMatchUps,\n  structureId,\n  drawPosition,\n  replaceWithBye, // optional\n  entryStatus, // optional - change the entryStatus of the removed participant\n  destroyPair, // optional - decompose PAIR participant into UNPAIRED participants\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"removedrawentries\"\n    }}>{`removeDrawEntries`}</h2>\n    <p>{`Removes participantIds from `}<inlineCode parentName=\"p\">{`drawDefinition.entries`}</inlineCode>{` (if generated) as well as any relevent `}<inlineCode parentName=\"p\">{`flightProfile.flights`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.removeDrawEntries({ drawId, eventId, participantIds });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"removeevententries\"\n    }}>{`removeEventEntries`}</h2>\n    <p>{`Removes `}<inlineCode parentName=\"p\">{`participantIds`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`event.entries`}</inlineCode>{` with integrity checks.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.removeEventEntries({ eventId, participantIds });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"removeparticipantidsfromallteams\"\n    }}>{`removeParticipantIdsFromAllTeams`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.removeParticipantIdsFromAllTeams({\n  individualParticipantIds,\n  groupingType, // optional - restrict to removing from only specified groupingType\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"removeindividualparticipantids\"\n    }}>{`removeIndividualParticipantIds`}</h2>\n    <p>{`Remove an array of individualParticipantIds from a grouping participant `}{`[TEAM, GROUP]`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.removeIndividualParticipantIds({\n  groupingParticipantId,\n  individualParticipantIds,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"removepenalty\"\n    }}>{`removePenalty`}</h2>\n    <p>{`Removes a penalty from all relevant tournament participants.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.removePenalty({ penaltyId });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setdrawdefaultmatchupformat\"\n    }}>{`setDrawDefaultMatchUpFormat`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.setDrawDefaultMatchUpFormat({\n  drawId,\n  matchUpFormat, // TODS matchUpFormatCode\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setdrawparticipantrepresentatives\"\n    }}>{`setDrawParticipantRepresentatives`}</h2>\n    <p>{`Set the participantIds of participants in the draw who are representing players by observing the creation of the draw.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.setDrawParticipantRepresentatives({\n  drawId,\n  representativeParticipantIds,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"seteventdefaultmatchupformat\"\n    }}>{`setEventDefaultMatchUpFormat`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.setEventDefaultMatchUpFormat({\n  eventId,\n  matchUpFormat, // TODS matchUpFormatCode\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setmatchupstatus\"\n    }}>{`setMatchUpStatus`}</h2>\n    <p>{`Sets either matchUpStatus or score and winningSide; values to be set are passed in outcome object. Handles any winner/loser participant movements within or across structures.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const outcome = {\n  score,\n  winningSide,\n  matchUpStatus,\n};\n\ntournamentEngine.setMatchUpStatus({\n  drawId,\n  matchUpId,\n  matchUpTieId, // optional - if part of a TIE matchUp\n  outcome,\n  matchUpStatus, // optional - if matchUpFormat differs from event/draw/structure defaults\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setparticipantscaleitem\"\n    }}>{`setParticipantScaleItem`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`scaleItem = {\n  scaleValue: 12,\n  scaleName: 'U16',\n  scaleType: RANKING,\n  eventType: SINGLES,\n  scaleDate: '2020-06-06',\n};\n\nresult = tournamentEngine.setParticipantScaleItem({\n  participantId,\n  scaleItem,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setparticipantscaleitems\"\n    }}>{`setParticipantScaleItems`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const scaleItemsWithParticipantIds = [\n  {\n    participantId,\n    scaleItems: [\n      {\n        scaleValue: 8.3,\n        scaleName: 'WTN',\n        scaleType: RATING,\n        eventType: SINGLES,\n        scaleDate: '2021-01-01',\n      },\n    ],\n  },\n];\ntournamentEngine.setParticipantScaleItems({ scaleItemsWithParticipantIds });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setstructuredefaultmatchupformat\"\n    }}>{`setStructureDefaultMatchUpFormat`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.setStructureDefaultMatchUpFormat({\n  drawId,\n  structureId,\n  matchUpFormat, // TODS matchUpFormatCode\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setstate\"\n    }}>{`setState`}</h2>\n    <p>{`Loads a tournament record into tournamentEngine.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.setsState(tournamentRecord, deepCopy);\n`}</code></pre>\n    <p>{`By default a deep copy of the tournament record is made so that mutations made by tournamentEngine do not affect the source object. An optional boolean parameter, `}<em parentName=\"p\">{`deepCopy`}</em>{` can be set to false to override this default behavior.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setsubscriptions\"\n    }}>{`setSubscriptions`}</h2>\n    <p>{`Please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/subscriptions\"\n      }}>{`Subscriptions`}</a>{` in General Concepts.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"settournamentcategories\"\n    }}>{`setTournamentCategories`}</h2>\n    <p>{`Define categories to be used in event creation for tournament record.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const categories = [\n  {\n    categoryName: 'U18',\n    type: eventConstants.AGE,\n  },\n  {\n    categoryName: 'U16',\n    type: eventConstants.AGE,\n  },\n  {\n    categoryName: 'WTN',\n    type: eventConstants.RATING,\n  },\n];\ntournamentEngine.setTournamentCategories({ categories });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"settournamentenddate\"\n    }}>{`setTournamentEndDate`}</h2>\n    <p>{`Accepts an ISO String Date;`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.setTournamentEndDate({ endDate });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"settournamentname\"\n    }}>{`setTournamentName`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const tournamentName = 'CourtHive Challenge';\ntournamentEngine.setTournamentName({\n  tournamentName,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"settournamentnotes\"\n    }}>{`setTournamentNotes`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.setTournamentNotes({ notes });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"settournamentstartdate\"\n    }}>{`setTournamentStartDate`}</h2>\n    <p>{`Accepts an ISO String Date;`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.setTournamentStartDate({ StartDate });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"toggleparticipantcheckinstate\"\n    }}>{`toggleParticipantCheckInState`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.toggleParticipantCheckInState({\n  drawId,\n  matchUpId,\n  participantId,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"tournamentmatchups\"\n    }}>{`tournamentMatchUps`}</h2>\n    <p>{`Returns tournament matchUps grouped by matchUpStatus. These matchUps are returned with `}<em parentName=\"p\">{`context`}</em>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const {\n  abandonedMatchUps,\n  byeMatchUps,\n  completedMatchUps,\n  pendingMatchUps,\n  upcomingMatchUps,\n} = tournamentEngine.tournamentMatchUps();\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"unpublishevent\"\n    }}>{`unPublishEvent`}</h2>\n    <p>{`Modifies the `}<inlineCode parentName=\"p\">{`publishState`}</inlineCode>{` of an event. `}<inlineCode parentName=\"p\">{`Subscriptions`}</inlineCode>{` or middleware can be used to trigger messaging to services which make event data visible on public websites.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.unPublishEvent({ eventId });\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"updatedrawidsorder\"\n    }}>{`updateDrawIdsOrder`}</h2>\n    <p>{`Updates the `}<inlineCode parentName=\"p\">{`drawOrder`}</inlineCode>{` attribute of all `}<inlineCode parentName=\"p\">{`drawDefinitions`}</inlineCode>{` within an event. The `}<inlineCode parentName=\"p\">{`drawOrder`}</inlineCode>{` attribute can be used for sorting or for differentiating `}<inlineCode parentName=\"p\">{`drawDefinitions`}</inlineCode>{` for the award of rankings points, when \"flighting\" separates participants by some `}<inlineCode parentName=\"p\">{`scaleValue`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.updateDrawIdsOrder({\n  event,\n  orderedDrawIdsMap: {\n    'id-Of-draw-1': 1,\n    'id-of-draw-2': 2,\n  },\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"withdrawparticipantatdrawposition\"\n    }}>{`withdrawParticipantAtDrawPosition`}</h2>\n    <p>{`Thin wrapper around `}<a parentName=\"p\" {...{\n        \"href\": \"#removeDrawPositionAssignment\"\n      }}>{`removeDrawPositionAssignment`}</a>{`. This method is included in `}<inlineCode parentName=\"p\">{`validActions`}</inlineCode>{` for `}<a parentName=\"p\" {...{\n        \"href\": \"/tods-competition-factory/concepts/positionActions\"\n      }}>{`positionActions`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`withdrawParticipantAtDrawPosition({\n  drawDefinition,\n  mappedMatchUps,\n  structureId,\n  drawPosition,\n  replaceWithBye, // optional\n  entryStatus = WITHDRAWN,\n  destroyPair, // optional - decompose PAIR participant into UNPAIRED participants\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"version\"\n    }}>{`version`}</h2>\n    <p>{`Returns NPM package version. Can be used in configurations that utilize Competition Factory engines on both client and server to ensure equivalency.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const version = tournamentEngine.version();\n`}</code></pre>\n    <hr></hr>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}