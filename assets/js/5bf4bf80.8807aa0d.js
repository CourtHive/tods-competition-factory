(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[199],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return n?o.createElement(h,i(i({ref:t},d),{},{components:n})):o.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7349:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var o=n(2122),a=n(9756),r=(n(7294),n(3905)),i={name:"API",title:"Competition Engine API"},c={unversionedId:"apis/competition-engine-api",id:"apis/competition-engine-api",isDocsHomePage:!1,title:"Competition Engine API",description:"addExtension",source:"@site/docs/apis/competition-engine-api.md",sourceDirName:"apis",slug:"/apis/competition-engine-api",permalink:"/tods-competition-factory/docs/apis/competition-engine-api",version:"current",frontMatter:{name:"API",title:"Competition Engine API"},sidebar:"docs",previous:{title:"Mocks Engine API",permalink:"/tods-competition-factory/docs/apis/mocks-engine-api"},next:{title:"Tournament Engine API",permalink:"/tods-competition-factory/docs/apis/tournament-engine-api"}},l=[{value:"addExtension",id:"addextension",children:[]},{value:"allCompetitionMatchUps",id:"allcompetitionmatchups",children:[]},{value:"calculateScheduleTimes",id:"calculatescheduletimes",children:[]},{value:"competitionMatchUps",id:"competitionmatchups",children:[]},{value:"competitionScheduleMatchUps",id:"competitionschedulematchups",children:[]},{value:"devContext",id:"devcontext",children:[]},{value:"findExtension",id:"findextension",children:[]},{value:"getState",id:"getstate",children:[]},{value:"getVenuesAndCourts",id:"getvenuesandcourts",children:[]},{value:"matchUpScheduleChange",id:"matchupschedulechange",children:[]},{value:"removeExtension",id:"removeextension",children:[]},{value:"removeMatchUpCourtAssignment",id:"removematchupcourtassignment",children:[]},{value:"removeTournamentRecord",id:"removetournamentrecord",children:[]},{value:"removeUnlinkedTournamentRecords",id:"removeunlinkedtournamentrecords",children:[]},{value:"reorderUpcomingMatchUps",id:"reorderupcomingmatchups",children:[]},{value:"scheduleMatchUps",id:"schedulematchups",children:[]},{value:"setState",id:"setstate",children:[]},{value:"setTournamentRecord",id:"settournamentrecord",children:[]},{value:"setSubscriptions",id:"setsubscriptions",children:[]},{value:"toggleParticipantCheckInState",id:"toggleparticipantcheckinstate",children:[]},{value:"version",id:"version",children:[]}],s={toc:l};function d(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"addextension"},"addExtension"),(0,r.kt)("p",null,"Adds an extension to all ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentRecords")," loaded into ",(0,r.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.addExtension({ extension });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"allcompetitionmatchups"},"allCompetitionMatchUps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { matchUps } = competitionEngine.allCompetitionMatchUps({\n  scheduleVisibilityFilters,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"calculatescheduletimes"},"calculateScheduleTimes"),(0,r.kt)("p",null,"Returns an array of available schedule times for a given date (and optional time range)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { scheduleTimes } = competitionEngine.calculateScheduleTimes({\n  date,\n\n  startTime, // optional - if not provided will be derived from court availability for the tiven date\n  endTime, // optional - if not provided will be derived from court availability for the tiven date\n\n  averageMatchUpTime = 90, // optional - defualts to 90\n  periodLength = 30, // optional - defualts to 30\n\n  venueIds, // optional - restrict calculation to specified venueIds\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"competitionmatchups"},"competitionMatchUps"),(0,r.kt)("p",null,'Returns aggregated arrays of "inContext" matchUps for all tournamentRecords loaded into ',(0,r.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  byeMatchUps,\n  abandonedMatchUps,\n  completedMatchUps,\n  pendingMatchUps,\n  upcomingMatchUps,\n} = competitionEngine.competitionMatchUps({\n  scheduleVisibilityFilters,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"competitionschedulematchups"},"competitionScheduleMatchUps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const matchUpFilters = {\n  isMatchUpTie: false,\n  scheduledDate, // scheduled date of matchUps to return\n\n  localTimeZone, // optional - used to convert scheduleDate\n  localPerspective: true,\n};\n\nconst { completedMatchUps, dateMatchUps, courtsData, venues } =\n  competitionEngine.competitionScheduleMatchUps({ matchUpFilters });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"devcontext"},"devContext"),(0,r.kt)("p",null,"Setting devContext(true) bypasses ",(0,r.kt)("strong",{parentName:"p"},"try {} catch (err) {}")," code block and in some cases enables enhanced logging"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.devContext(true);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"findextension"},"findExtension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { extension } = competitionEngine.findExtension({ name });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getstate"},"getState"),(0,r.kt)("p",null,"Returns a deep copy of the current competitionEngine state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { tournaentRecords } = competition.getState({\n  convertExtensions, // optional - convert extensions to '_' prefixed attributes\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getvenuesandcourts"},"getVenuesAndCourts"),(0,r.kt)("p",null,"Returns an aggregate view of venues and courts across all tournamentRecords loaded into ",(0,r.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { courts, venues } = competitionEngine.getVenuesAndCourts();\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"matchupschedulechange"},"matchUpScheduleChange"),(0,r.kt)("p",null,"Swaps the schedule details of two scheduled matchUps."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.matchUpScheduleChange({\n  sourceMatchUpContextIds,\n  targetMatchUpContextIds,\n  sourceCourtId,\n  targetCourtId,\n  courtDayDate: dateSelected,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removeextension"},"removeExtension"),(0,r.kt)("p",null,"Removes an extension from all ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentRecords")," loaded into ",(0,r.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeExtension({ name });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removematchupcourtassignment"},"removeMatchUpCourtAssignment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeMatchUpCourtAssignment({\n  drawId,\n  matchUpId,\n  tournamentId,\n  courtDayDate,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removetournamentrecord"},"removeTournamentRecord"),(0,r.kt)("p",null,"Removes a tournamentRecord from ",(0,r.kt)("inlineCode",{parentName:"p"},"competitionEngine")," state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeTournamentRecord(tournamentId);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removeunlinkedtournamentrecords"},"removeUnlinkedTournamentRecords"),(0,r.kt)("p",null,"Removes all tournamentRecords from ",(0,r.kt)("inlineCode",{parentName:"p"},"competitionEngine")," state that are unlinked."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeUnlinkedTournamentRecords();\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"reorderupcomingmatchups"},"reorderUpcomingMatchUps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const matchUpContextIds = [{ tournamentId, drawId, matchUpId }];\ncompetitionEngine.reorderUpcomingMatchUps({\n  matchUpContextIds,\n  firstToLast, // boolean - direction of reorder\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"schedulematchups"},"scheduleMatchUps"),(0,r.kt)("p",null,"Auto schedule matchUps on a given date using the Garmin formula."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const schedulingProfile = [\n  {\n    tournamentId,\n    eventId,\n    drawId,\n    structureId, // optional - will default to first structure of first stage\n    venueId, // optional - target venue for given event/draw/structure\n    roundNumbers, // optional - if not provided will check scheduling policy for # of permitted matchUps / participant / day\n    roundProfile: { // optional - necessary when matchUps within a single structure are split across venues or dates\n      roundNumber,\n      roundPositionStart,\n      roundPositionEnd,\n   }\n  }\n];\n\ncompetitionEngine.scheduleMatchUps({\n  date,\n  startTime, // optional - if not provided will be derived from court availability for the tiven date\n  endTime, // optional - if not provided will be derived from court availability for the tiven date\n\n  venueIds, // optional - defaults to all known; if a single venueId is provided then all matchUps will be scheduled for that venue\n\n  matchUpIds, // array of matchUpIds; if no schedulingProfile provided will be auto-sorted by draw size and roundNumbers\n  schedulingProfile, // optional profile for sorting matchUps to be scheduled\n\n  periodLength = 30, // optional - defaults to 30\n  averageMatchUpTime = 90, // optional - defaults to 90\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setstate"},"setState"),(0,r.kt)("p",null,"Loads tournament records into competitionEngine; supports both an array of tournamentRecords and an object with tournamentId keys."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const tournamentRecords = [tournamentRecord];\n// or const tournamentRecords = { [tournamentId]: tournamentRecord }\n\ncompetitionEngine.setsState(tournamentRecords, deepCopy);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"settournamentrecord"},"setTournamentRecord"),(0,r.kt)("p",null,"Adds a tournamentRecord to ",(0,r.kt)("inlineCode",{parentName:"p"},"competitionEngine")," state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.setTournamentRecord(tournamentRecord);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setsubscriptions"},"setSubscriptions"),(0,r.kt)("p",null,"Please refer to the ",(0,r.kt)("a",{parentName:"p",href:"../concepts/subscriptions"},"Subscriptions")," in General Concepts."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"toggleparticipantcheckinstate"},"toggleParticipantCheckInState"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"version"},"version"),(0,r.kt)("p",null,"Returns NPM package version. Can be used in configurations that utilize Competition Factory engines on both client and server to ensure equivalency."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const version = competitionEngine.version();\n")),(0,r.kt)("hr",null))}d.isMDXComponent=!0}}]);