"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3549],{3805:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>d});var i=t(758);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=u(t),p=a,d=g["".concat(s,".").concat(p)]||g[p]||m[p]||r;return t?i.createElement(d,o(o({ref:n},c),{},{components:t})):i.createElement(d,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<r;u++)o[u]=t[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6512:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var i=t(2232),a=(t(758),t(3805));const r={title:"Migration 1.x to 2.x"},o=void 0,l={unversionedId:"migration",id:"migration",title:"Migration 1.x to 2.x",description:"Verion 2.0 of the Competition Factory was focused on code restructuring with support for Tree Shaking. Factory engines were consolidated and duplicated code was eliminated. There were very few API changes, and backwards capability for the majority of 1.x functions is provided by tournamentEngine and competitionEngine exports that are constructed as Custom Engines.",source:"@site/docs/migration.md",sourceDirName:".",slug:"/migration",permalink:"/tods-competition-factory/docs/migration",draft:!1,tags:[],version:"current",frontMatter:{title:"Migration 1.x to 2.x"},sidebar:"docs",previous:{title:"Installation",permalink:"/tods-competition-factory/docs/installation"},next:{title:"Participant Types",permalink:"/tods-competition-factory/docs/concepts/participants"}},s={},u=[{value:"API changes",id:"api-changes",level:2},{value:"tournamentEngine and competitionEngine",id:"tournamentengine-and-competitionengine",level:3},{value:"utilities",id:"utilities",level:3},{value:"Parameter changes",id:"parameter-changes",level:2},{value:"Constants changes",id:"constants-changes",level:2}],c={toc:u},g="wrapper";function m(e){let{components:n,...t}=e;return(0,a.yg)(g,(0,i.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Verion 2.0 of the Competition Factory was focused on code restructuring with support for ",(0,a.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"Tree Shaking"),". Factory engines were consolidated and duplicated code was eliminated. There were very few API changes, and backwards capability for the majority of 1.x functions is provided by ",(0,a.yg)("inlineCode",{parentName:"p"},"tournamentEngine")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"competitionEngine")," exports that are constructed as ",(0,a.yg)("a",{parentName:"p",href:"/docs/engines/custom-engines"},"Custom Engines"),"."),(0,a.yg)("p",null,"When using ",(0,a.yg)("inlineCode",{parentName:"p"},"tournamentEngine")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"competitionEngine")," exports for backwards compatability in a single project it is recommended to invoke ",(0,a.yg)("inlineCode",{parentName:"p"},"competitionEngine.setTournamentId(tournamentId)")," to set a primary tournamentRecord after each ",(0,a.yg)("inlineCode",{parentName:"p"},"competitionEngine.setState()")," where multiple tournamentRecords are added to state."),(0,a.yg)("h2",{id:"api-changes"},"API changes"),(0,a.yg)("h3",{id:"tournamentengine-and-competitionengine"},"tournamentEngine and competitionEngine"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"tournamentEngine.getState() => tournamentEngine.getTournament()"),(0,a.yg)("li",{parentName:"ul"},"tournamentEngine.generateTeamsFromParticipantAttribute() is now tournamentEngine.createTeamsFromParticipantAttributes()"),(0,a.yg)("li",{parentName:"ul"},"tournamentEngine.findEventExtension() => tournamentEngine.findExtension({ name: '', element ",(0,a.yg)("em",{parentName:"li"},"or")," eventId?, discover: true })"),(0,a.yg)("li",{parentName:"ul"},"tournamentEngine.findTournamentExtension() => tournamentEngine.findExtension({ name: '', element ",(0,a.yg)("em",{parentName:"li"},"or")," discover: true })"),(0,a.yg)("li",{parentName:"ul"},"tournamentEngine.bulkScheduleMatchUps() is now tournamentEngine.bulkScheduleTournamentMatchUps()"),(0,a.yg)("li",{parentName:"ul"},"tournamentEngine.getAvailablePlayoffRounds() => tournamentEngine.getAvailablePlayoffProfiles()"),(0,a.yg)("li",{parentName:"ul"},"tournamentEngine.attachEventPolicies() => tournamentEngine.attachPolicies({ eventId, ... })"),(0,a.yg)("li",{parentName:"ul"},"tournamentEngine.removeEventPolicy() => tournamentEngine.removePolicy({ eventId, ... })"),(0,a.yg)("li",{parentName:"ul"},"competitionEngine.getParticipants() is now tournamentEngine.getCompetitionParticipants()"),(0,a.yg)("li",{parentName:"ul"},"competitionEngine.competitionMatchUps() is now tournamentEngine.getCompetitionMatchUps()")),(0,a.yg)("h3",{id:"utilities"},"utilities"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"utilities.tieFormatGenderValidityCheck() => tournamentEngine.tieFormatGenderValidityCheck()"),(0,a.yg)("li",{parentName:"ul"},"utilities.getStructureSeedAssignments() => tournamentEngine.getStructureSeedAssignments()"),(0,a.yg)("li",{parentName:"ul"},"utilities.getAvailablePlayoffProfiles() => tournamentEngine.getAvailablePlayoffProfiles()"),(0,a.yg)("li",{parentName:"ul"},"utilities.allPlayoffPositionsFilled() => tournamentEngine.allPlayoffPositionsFilled()"),(0,a.yg)("li",{parentName:"ul"},"utilities.getMatchUpContextIds() => tournamentEngine.getMatchUpContextIds()"),(0,a.yg)("li",{parentName:"ul"},"utilities.getSeedingThresholds() => tournamentEngine.getSeedingThresholds()"),(0,a.yg)("li",{parentName:"ul"},"utilities.participantScaleItem() => tournamentEngine.participantScaleItem()"),(0,a.yg)("li",{parentName:"ul"},"utilities.generateScoreString() => tournamentEngine.generateScoreString()"),(0,a.yg)("li",{parentName:"ul"},"utilities.categoryCanContain() => tournamentEngine.categoryCanContain()"),(0,a.yg)("li",{parentName:"ul"},"utilities.checkSetIsComplete() => tournamentEngine.checkSetIsComplete()"),(0,a.yg)("li",{parentName:"ul"},"utilities.getValidGroupSizes() => tournamentEngine.getValidGroupSizes()"),(0,a.yg)("li",{parentName:"ul"},"mocksEngine.parseScoreString() => tournamentEngine.parseScoreString();"),(0,a.yg)("li",{parentName:"ul"},"utilities.getSetComplement() => tournamentEngine.getSetComplement()"),(0,a.yg)("li",{parentName:"ul"},"utilities.scoreHasValue() => tournamentEngine.checkScoreHasValue()"),(0,a.yg)("li",{parentName:"ul"},"utilities.findExtension() => tournamentEngine.findExtension()"),(0,a.yg)("li",{parentName:"ul"},"scoreGovernor.function() => tournamentEngine.function()")),(0,a.yg)("p",null,"All other utilities should now be imported as ",(0,a.yg)("inlineCode",{parentName:"p"},"tools"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import { tools } from 'tods-competition-factory';\n")),(0,a.yg)("h2",{id:"parameter-changes"},"Parameter changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"{ sandboxTourmament }")," is no longer necessary.")),(0,a.yg)("h2",{id:"constants-changes"},"Constants changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"STRUCTURE_ENTERED_TYPES")," is now ",(0,a.yg)("inlineCode",{parentName:"li"},"STRUCTURE_SELECTED_STATUSES")," (exported from ",(0,a.yg)("inlineCode",{parentName:"li"},"eventConstants"),")")))}m.isMDXComponent=!0}}]);