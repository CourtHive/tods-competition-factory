"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1009],{3805:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>y});var a=t(758);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),d=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=d(e.components);return a.createElement(u.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=d(t),g=r,y=c["".concat(u,".").concat(g)]||c[g]||p[g]||o;return t?a.createElement(y,l(l({ref:n},s),{},{components:t})):a.createElement(y,l({ref:n},s))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=g;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},9122:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=t(2232),r=(t(758),t(3805));const o={title:"Venue Governor"},l=void 0,i={unversionedId:"governors/venue-governor",id:"governors/venue-governor",title:"Venue Governor",description:"addCourt",source:"@site/docs/governors/venue-governor.md",sourceDirName:"governors",slug:"/governors/venue-governor",permalink:"/tods-competition-factory/docs/governors/venue-governor",draft:!1,tags:[],version:"current",frontMatter:{title:"Venue Governor"},sidebar:"docs",previous:{title:"Tournament Governor",permalink:"/tods-competition-factory/docs/governors/tournament-governor"},next:{title:"Tools",permalink:"/tods-competition-factory/docs/tools/tools-overview"}},u={},d=[{value:"addCourt",id:"addcourt",level:2},{value:"addCourts",id:"addcourts",level:2},{value:"addVenue",id:"addvenue",level:2},{value:"deleteCourt",id:"deletecourt",level:2},{value:"deleteVenue",id:"deletevenue",level:2},{value:"deleteVenues",id:"deletevenues",level:2},{value:"disableCourts",id:"disablecourts",level:2},{value:"disableVenues",id:"disablevenues",level:2},{value:"enableCourts",id:"enablecourts",level:2},{value:"enableVenues",id:"enablevenues",level:2},{value:"findCourt",id:"findcourt",level:2},{value:"findVenue",id:"findvenue",level:2},{value:"modifyCourt",id:"modifycourt",level:2},{value:"modifyCourtAvailability",id:"modifycourtavailability",level:2},{value:"modifyVenue",id:"modifyvenue",level:2}],s={toc:d},c="wrapper";function p(e){let{components:n,...t}=e;return(0,r.yg)(c,(0,a.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"addcourt"},"addCourt"),(0,r.yg)("p",null,"Add a court to a Venue. See ",(0,r.yg)("strong",{parentName:"p"},"court")," under ",(0,r.yg)("strong",{parentName:"p"},"venue")," in ",(0,r.yg)("a",{parentName:"p",href:"/docs/types/typedefs#venue"},"Type Defs"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"const court = {\n  altitude, // optional\n  courtDimensions, // optional\n  courtId, // generated automatically if not provided\n  courtName,\n  dateAvailability, // optional - see below\n  latitude, // optional\n  longitude, // optional\n  onlineResources,  // optional\n  pace, // optional - string; ITF enums\n  surfaceCategory, // optional - surface constant, e.g. CLAY, HARD, GRASS, CARPET, or ARTIFICIAL\n  surfaceType, // string; see: https://www.itftennis.com/en/about-us/tennis-tech/recognised-courts/\n  surfacedDate?: Date;\n}\n\nengine.addCourt({ venueId, court });\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"addcourts"},"addCourts"),(0,r.yg)("p",null,"Convenience function to bulk add courts to a Venue. Only adds ",(0,r.yg)("strong",{parentName:"p"},"dataAvailability")," and ",(0,r.yg)("strong",{parentName:"p"},"courtName"),". See ",(0,r.yg)("a",{parentName:"p",href:"/docs/concepts/venues-courts"},"Scheduling"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"const dateAvailability = [\n  {\n    date: '2020-01-01T00:00', // if no date is provided then this profile will be used as default\n    startTime: '07:00',\n    endTime: '19:00',\n    bookings: [\n      { startTime: '07:00', endTime: '08:30', bookingType: 'PRACTICE' },\n      { startTime: '08:30', endTime: '09:00', bookingType: 'MAINTENANCE' },\n      { startTime: '13:30', endTime: '14:00', bookingType: 'MAINTENANCE' },\n    ],\n  },\n];\nengine.addCourts({\n  venueAbbreviationRoot, // optional boolean; whether to use venue.venueAbbreviation in court naming\n  dateAvailability, // optional -- see definition in Tournament Engine API\n  courtNameRoot, // optional; defaults to 'Court'\n  courtNames: ['Court 1', 'Court 2', 'Court 3'], // optional\n  courtsCount: 3, // optional, can be added/modified later; also can be derived from courtNames.length\n  venueId,\n});\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"addvenue"},"addVenue"),(0,r.yg)("p",null,"Adds ",(0,r.yg)("strong",{parentName:"p"},"venueId")," if not provided."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"engine.addVenue({\n  venue: { venueName },\n  context, // optional - adds detail in CONTEXT extension\n});\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"deletecourt"},"deleteCourt"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"engine.deleteCourt({\n  courtId,\n  force, // override warnings about matchUps scheduled on specified court\n});\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"deletevenue"},"deleteVenue"),(0,r.yg)("p",null,"If a venue has scheduled matchUps then it will not be deleted unless ",(0,r.yg)("inlineCode",{parentName:"p"},"{ force: true }")," in which case all relevant matchUps will be unscheduled."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"engine.deleteVenue({ venueId, force });\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"deletevenues"},"deleteVenues"),(0,r.yg)("p",null,"If a venue has scheduled matchUps then it will not be deleted unless ",(0,r.yg)("inlineCode",{parentName:"p"},"{ force: true }")," in which case all relevant matchUps will be unscheduled."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"engine.deleteVenues({ venueIds, force });\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"disablecourts"},"disableCourts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"engine.disableCourts({\n  courtIds,\n  dates, // optional - if not provided, courts will be disalbed for all dates\n});\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"disablevenues"},"disableVenues"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"engine.disableVenues({ venueIds });\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"enablecourts"},"enableCourts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"engine.enableCourts({\n  enableAll, // optional boolean\n  courtIds,\n  dates, // optional - array of dates to enable (if they have been disabled)\n});\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"enablevenues"},"enableVenues"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"engine.enableVenues({ venueIds, enableAll });\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"findcourt"},"findCourt"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"const { court, venue } = engine.findCourt({ courtId });\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"findvenue"},"findVenue"),(0,r.yg)("p",null,"Returns a complete venue object. Primarily used internally."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"engine.findVenue({ venueId });\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"modifycourt"},"modifyCourt"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"engine.modifyCourt({\n  courtId,\n  force, // applies only to dateAvailability, will remove scheduling information from matchUps where court is no longer available\n  modifications: {\n    courtName,\n    dateAvailability,\n    courtDimensions,\n    onlineResources,\n    surfaceCategory,\n    surfacedDate,\n    surfaceType,\n    altitude,\n    latitude,\n    longitude,\n    notes,\n    pace,\n  },\n});\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"modifycourtavailability"},"modifyCourtAvailability"),(0,r.yg)("p",null,"Modifies the ",(0,r.yg)("inlineCode",{parentName:"p"},"dateAvailability")," attribute of a specified court. Warns if existing scheduled matchUps would be affected. See ",(0,r.yg)("a",{parentName:"p",href:"/docs/concepts/venues-courts"},"Scheduling"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"const result = engine.modifyCourtAvailability({\n  dateAvailability,\n  courtId,\n  force, // override warning that existing scheduled matchUps exist\n});\n")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"modifyvenue"},"modifyVenue"),(0,r.yg)("p",null,"Courts present on venue will replaced with courts specified in parameters. If courts are not present in parameters, courts will be unchanged."),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/docs/concepts/venues-courts"},"Scheduling")," for more detail on court ",(0,r.yg)("inlineCode",{parentName:"p"},"dateAvailability"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"const modifications = {\n  venueAbbreviation,\n  onlineResources,\n  venueName,\n  courts: [\n    {\n      courtId: 'b9df6177-e430-4a70-ba47-9b9ff60258cb',\n      courtName: 'Custom Court 1',\n      dateAvailability: [\n        {\n          date: '2020-01-01', // if no date is provided then `startTime` and `endTime` will be considered default values\n          startTime: '16:30',\n          endTime: '17:30',\n        },\n      ],\n    },\n  ],\n};\nengine.modifyVenue({ venueId, modifications });\n")),(0,r.yg)("hr",null))}p.isMDXComponent=!0}}]);