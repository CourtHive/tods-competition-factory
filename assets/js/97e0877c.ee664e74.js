"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7413],{6034:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(1258);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1458:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(8957),r=(n(1258),n(6034));const a={title:"Global State"},i=void 0,s={unversionedId:"engines/global-state",id:"engines/global-state",title:"Global State",description:"devContext",source:"@site/docs/engines/global-state.md",sourceDirName:"engines",slug:"/engines/global-state",permalink:"/tods-competition-factory/docs/engines/global-state",draft:!1,tags:[],version:"current",frontMatter:{title:"Global State"},sidebar:"docs",previous:{title:"Custom Engines",permalink:"/tods-competition-factory/docs/engines/custom-engines"},next:{title:"Governors",permalink:"/tods-competition-factory/docs/governors/governors-overview"}},l={},c=[{value:"devContext",id:"devcontext",level:2},{value:"getState",id:"getstate",level:2},{value:"removeTournamentRecord",id:"removetournamentrecord",level:2},{value:"setState",id:"setstate",level:2},{value:"setTournamentRecord",id:"settournamentrecord",level:2},{value:"setTournamentId",id:"settournamentid",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"devcontext"},"devContext"),(0,r.kt)("p",null,"Setting devContext(true) bypasses ",(0,r.kt)("strong",{parentName:"p"},"try {} catch (err) {}")," code block and in some cases enables enhanced logging"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"getDevContext(true);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getstate"},"getState"),(0,r.kt)("p",null,"Returns a deep copy of ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentRecords")," which have been loaded, along with currently selected ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentId"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { tournamentId, tournamentRecords } = getState({\n  convertExtensions, // optional - convert extensions to '_' prefixed attributes\n  removeExtensions, // optional - strip all extensions out of tournamentRecord\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removetournamentrecord"},"removeTournamentRecord"),(0,r.kt)("p",null,"Removes a tournamentRecord from shared state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"removeTournamentRecord(tournamentId);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setstate"},"setState"),(0,r.kt)("p",null,"Loads tournament records into ",(0,r.kt)("a",{parentName:"p",href:"/docs/engines/global-state"},"Global State"),"; supports both an array of tournamentRecords and an object with tournamentId keys."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const tournamentRecords = [tournamentRecord];\n// or const tournamentRecords = { [tournamentId]: tournamentRecord }\n\nsetsState(tournamentRecords, deepCopy, deepCopyConfig);\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"By default a deep copy of the ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentRecords")," is made so that mutations do not affect the source objects. An optional boolean parameter, ",(0,r.kt)("em",{parentName:"p"},"deepCopy")," can be set to false to override this default behavior.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"deepCopyConfig")," is an optional configuration for ",(0,r.kt)("inlineCode",{parentName:"p"},"makeDeepCopy"),". In server configurations when ",(0,r.kt)("inlineCode",{parentName:"p"},"deepCopy")," is FALSE and ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentRecords")," are retrieved from Mongo, for instance, there are scenarios where nodes of the JSON structure contain prototypes which cannot be converted.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const deepCopyConfig = {\n  ignore, // optional - either an array of attributes to ignore or a function which processes attributes to determine whether to ignore them\n  toJSON, // optional - an array of attributes to convert to JSON if the attribute in question is an object with .toJSON property\n  stringify, // optional - an array of attributes to stringify\n  modulate, // optional - function to process every attribute and return custom values, or undefined, which continues normal processing\n};\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"settournamentrecord"},"setTournamentRecord"),(0,r.kt)("p",null,"Adds a tournamentRecord to shared engine state, or overwrite/replace an existing ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentRecord")," with the same ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentId"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"setTournamentRecord(tournamentRecord);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"settournamentid"},"setTournamentId"),(0,r.kt)("p",null,"Sets a tournamentRecord in shared state as the 'default' tournament for invoked functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"setTournamentId(tournamentId);\n")),(0,r.kt)("hr",null))}d.isMDXComponent=!0}}]);