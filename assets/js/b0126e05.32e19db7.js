(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),d=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=d(n),b=a,h=p["".concat(c,".").concat(b)]||p[b]||u[b]||r;return n?i.a.createElement(h,s(s({ref:t},l),{},{components:n})):i.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=b;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<r;l++)c[l]=n[l];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return l}));var a=n(3),i=(n(0),n(101));const r={title:"Draw Engine API"},c={unversionedId:"apis/draw-engine-api",id:"apis/draw-engine-api",isDocsHomePage:!1,title:"Draw Engine API",description:"addDrawEntries",source:"@site/docs/apis/draw-engine-api.md",slug:"/apis/draw-engine-api",permalink:"/tods-competition-factory/docs/apis/draw-engine-api",version:"current",sidebar:"docs",previous:{title:"Introduction",permalink:"/tods-competition-factory/docs/engines/draw-engine-introduction"}},s=[{value:"addDrawEntries",id:"adddrawentries",children:[]},{value:"addDrawEntry",id:"adddrawentry",children:[]},{value:"addMatchUpEndTime",id:"addmatchupendtime",children:[]},{value:"addMatchUpOfficial",id:"addmatchupofficial",children:[]},{value:"addMatchUpResumeTime",id:"addmatchupresumetime",children:[]},{value:"addMatchUpScheduledDate",id:"addmatchupscheduleddate",children:[]},{value:"addMatchUpScheduledTime",id:"addmatchupscheduledtime",children:[]},{value:"addMatchUpScheduleItems",id:"addmatchupscheduleitems",children:[]},{value:"addMatchUpStartTime",id:"addmatchupstarttime",children:[]},{value:"addMatchUpStopTime",id:"addmatchupstoptime",children:[]},{value:"addPlayoffStructures",id:"addplayoffstructures",children:[]},{value:"addMatchUpTimeItem",id:"addmatchuptimeitem",children:[]},{value:"addVoluntaryConsolationStage",id:"addvoluntaryconsolationstage",children:[]},{value:"allDrawMatchUps",id:"alldrawmatchups",children:[]},{value:"allStructureMatchUps",id:"allstructurematchups",children:[]},{value:"analyzeMatchUp",id:"analyzematchup",children:[]},{value:"analyzeSet",id:"analyzeset",children:[]},{value:"assignDrawPosition",id:"assigndrawposition",children:[]},{value:"assignDrawPositionBye",id:"assigndrawpositionbye",children:[]},{value:"assignSeed",id:"assignseed",children:[]},{value:"attachEventPolicy",id:"attacheventpolicy",children:[]},{value:"attachPolicy",id:"attachpolicy",children:[]},{value:"automatedPositioning",id:"automatedpositioning",children:[]},{value:"checkInParticipant",id:"checkinparticipant",children:[]},{value:"checkOutParticipant",id:"checkoutparticipant",children:[]},{value:"clearDrawPosition",id:"cleardrawposition",children:[]},{value:"devContext",id:"devcontext",children:[]},{value:"drawMatchUps",id:"drawmatchups",children:[]},{value:"findMatchUp",id:"findmatchup",children:[]},{value:"generateDrawType",id:"generatedrawtype",children:[]},{value:"generateQualifyingLink",id:"generatequalifyinglink",children:[]},{value:"generateScoreString",id:"generatescorestring",children:[]},{value:"generateTieMatchUpScoreString",id:"generatetiematchupscorestring",children:[{value:"generateVoluntaryConsolationStructure",id:"generatevoluntaryconsolationstructure",children:[]}]},{value:"getAvailablePlayoffRounds",id:"getavailableplayoffrounds",children:[]},{value:"getCheckedInParticipantIds",id:"getcheckedinparticipantids",children:[]},{value:"getDrawStructures",id:"getdrawstructures",children:[]},{value:"getEliminationDrawSize",id:"geteliminationdrawsize",children:[]},{value:"getMatchUpContextIds",id:"getmatchupcontextids",children:[]},{value:"getMatchUpParticipantIds",id:"getmatchupparticipantids",children:[]},{value:"getMatchUpScheduleDetails",id:"getmatchupscheduledetails",children:[]},{value:"getNextSeedBlock",id:"getnextseedblock",children:[]},{value:"getNextUnfilledDrawPositions",id:"getnextunfilleddrawpositions",children:[]},{value:"getParticipantIdFinishingPositions",id:"getparticipantidfinishingpositions",children:[]},{value:"getPositionsPlayedOff",id:"getpositionsplayedoff",children:[]},{value:"getRoundMatchUps",id:"getroundmatchups",children:[]},{value:"getSourceRounds",id:"getsourcerounds",children:[]},{value:"getStructureSeedAssignments",id:"getstructureseedassignments",children:[]},{value:"getState",id:"getstate",children:[]},{value:"initializeStructureSeedAssignments",id:"initializestructureseedassignments",children:[]},{value:"isCompletedStructure",id:"iscompletedstructure",children:[]},{value:"matchUpActions",id:"matchupactions",children:[]},{value:"matchUpDuration",id:"matchupduration",children:[]},{value:"matchUpSort",id:"matchupsort",children:[]},{value:"newDrawDefinition",id:"newdrawdefinition",children:[]},{value:"positionActions",id:"positionactions",children:[]},{value:"removeEntry",id:"removeentry",children:[]},{value:"reset",id:"reset",children:[]},{value:"resetMatchUpTimeItems",id:"resetmatchuptimeitems",children:[]},{value:"setDrawDescription",id:"setdrawdescription",children:[]},{value:"setMatchUpFormat",id:"setmatchupformat",children:[]},{value:"setMatchUpStatus",id:"setmatchupstatus",children:[]},{value:"setParticipants",id:"setparticipants",children:[]},{value:"setStageAlternatesCount",id:"setstagealternatescount",children:[]},{value:"setStageDrawSize",id:"setstagedrawsize",children:[]},{value:"setStageQualifiersCount",id:"setstagequalifierscount",children:[]},{value:"setStageWildcardsCount",id:"setstagewildcardscount",children:[]},{value:"setState",id:"setstate",children:[]},{value:"setSubscriptions",id:"setsubscriptions",children:[]},{value:"setSubOrder",id:"setsuborder",children:[]},{value:"structureSort",id:"structuresort",children:[]},{value:"swapDrawPositionAssignments",id:"swapdrawpositionassignments",children:[]},{value:"getStructureMatchUps",id:"getstructurematchups",children:[]},{value:"tallyParticipantResults",id:"tallyparticipantresults",children:[]},{value:"validDrawPositions",id:"validdrawpositions",children:[]},{value:"version",id:"version",children:[]}],o={toc:s};function l({components:e,...t}){return Object(i.b)("wrapper",Object(a.a)({},o,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"adddrawentries"},"addDrawEntries"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.addDrawEntries({\n  participantIds, // an array of participantIds, should all be of the same participantType\n  entryStatus, // optional - defaults to DIRECT_ACCEPTANCE\n  stage, // optional - stage into which participantIds have been entered; defaults to MAIN\n  autoEntryPositions, // optional - keeps entries ordered by entryStage/entryStatus and auto-increments\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"adddrawentry"},"addDrawEntry"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.addDrawEntry({\n  participantId,\n  entryStage, // optional - stage into which participantIds have been entered; defaults to MAIN\n  entryStatus, // optional - defaults to DIRECT_ACCEPTANCE\n  entryPosition, // optional - used to order entries, e.g. { entryPosition: 1 } for 1st alternate\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addmatchupendtime"},"addMatchUpEndTime"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const endTime = '2020-01-01T09:05:00Z';\ndrawEngine.addMatchUpEndTime({\n  matchUpId,\n  endTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addmatchupofficial"},"addMatchUpOfficial"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.addMatchUpOfficial({\n  matchUpId,\n  participantId,\n  officialType,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addmatchupresumetime"},"addMatchUpResumeTime"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const resumeTime = '2020-01-01T09:00:00Z';\ndrawEngine.addMatchUpResumeTime({\n  matchUpId,\n  resumeTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addmatchupscheduleddate"},"addMatchUpScheduledDate"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const scheduledDate = '2020-01-01';\ndrawEngine.addMatchUpScheduledDate({\n  matchUpId,\n  scheduledDate,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addmatchupscheduledtime"},"addMatchUpScheduledTime"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const scheduledTime = '08:00';\ndrawEngine.addMatchUpScheduledTime({\n  matchUpId,\n  scheduledTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addmatchupscheduleitems"},"addMatchUpScheduleItems"),Object(i.b)("p",null,"Convenience function to add several schedule items at once."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.addMatchUpScheduleItems({\n  matchUpId,\n  schedule: {\n    scheduledTime,\n    scheduledDate,\n    startTime,\n    endTime,\n  },\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addmatchupstarttime"},"addMatchUpStartTime"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const startTime = '2020-01-01T08:05:00Z';\ndrawEngine.addMatchUpStartTime({\n  matchUpId,\n  startTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addmatchupstoptime"},"addMatchUpStopTime"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const stopTime = '2020-01-01T08:15:00Z';\ndrawEngine.addMatchUpStopTime({\n  matchUpId,\n  stopTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addplayoffstructures"},"addPlayoffStructures"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.addPlayoffStructures({\n  structureId,\n  roundNumbers: [3], // optional if playoffPositions not provided; roundNumbers of structure to be played off.\n  playoffPositions: [3, 4], // optional if roundNumbers not provided; finishing positions to be played off.\n  playoffAttributes, // optional - mapping of exitProfile to structure names, e.g. 0-1-1 for SOUTH\n  playoffStructureNameBase, // optional - Root word for default playoff naming, e.g. 'Playoff' for 'Playoff 3-4'\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addmatchuptimeitem"},"addMatchUpTimeItem"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const timeItem = {\n  itemType: SCHEDULED_DATE,\n  itemValue: scheduledDate,\n};\ndrawEngine.addMatchUpTimeItem({\n  matchUpId,\n  timeItem,\n  duplicateValues: false,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"addvoluntaryconsolationstage"},"addVoluntaryConsolationStage"),Object(i.b)("p",null,"Modifies the entryProfile for a draw to allow ",Object(i.b)("inlineCode",{parentName:"p"},"{ entryStage: VOLUNTARY_CONSOLATION }")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.addVoluntaryConsolationStage({\n  drawSize,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"alldrawmatchups"},"allDrawMatchUps"),Object(i.b)("p",null,"Returns all matchUps from all structures within a draw."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const { matchUps } = drawEngine.allDrawMatchUps({\n  context, // optional context to be added into matchUps\n  inContext, // boolean - add context { drawId, structureId, participant, individualParticipants ... }\n  roundFilter, // filter to target matchUps from specified rounds\n  nextMatchUps, // optioanl - boolean - to include winnerGoesTo and loserGoesTo\n  matchUpFilters, // attribute filters\n  contextFilters, // filters based on context attributes\n  includeByeMatchUps, // return matchUps with { matchUpStatus: BYE }\n  tournamentParticipants, // optional - provide an array of tournamentParticipants to add into matchUps\n  requireParticipants, // optional - require that participants be loaded into drawEngine or passed into method\n  tournamentAppliedPolicies, // any policies, such as privacy, to be applied to matchUps\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"allstructurematchups"},"allStructureMatchUps"),Object(i.b)("p",null,"Returns all matchUps from a single structure within a draw."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const { matchUps } = drawEngine.allDrawMatchUps({\n  structureId,\n  context, // optional context to be added into matchUps\n  inContext, // boolean - add context { drawId, structureId, participant, individualParticipants ... }\n  roundFilter, // filter to target matchUps from specified rounds\n  nextMatchUps, // optioanl - boolean - to include winnerGoesTo and loserGoesTo\n  matchUpFilters, // attribute filters\n  contextFilters, // filters based on context attributes\n  includeByeMatchUps, // return matchUps with { matchUpStatus: BYE }\n  tournamentParticipants, // optional - provide an array of tournamentParticipants to add into matchUps\n  requireParticipants, // optional - require that participants be loaded into drawEngine or passed into method\n  tournamentAppliedPolicies, // any policies, such as privacy, to be applied to matchUps\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"analyzematchup"},"analyzeMatchUp"),Object(i.b)("p",null,"Method used internally by the ",Object(i.b)("inlineCode",{parentName:"p"},"scoreGovernor")," and ",Object(i.b)("inlineCode",{parentName:"p"},"keyValueScore"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  isActiveSet,\n  isExistingSet,\n  existingValue,\n  hasExistingValue,\n  isValidSideNumber,\n  completedSetsCount,\n  isCompletedMatchUp,\n  isLastSetWithValues,\n  validMatchUpOutcome,\n  matchUpScoringFormat,\n  calculatedWinningSide,\n  validMatchUpWinningSide,\n  completedSetsHaveValidOutcomes,\n  specifiedSetAnalysis: {\n    expectTiebreakSet,\n    expectTimedSet,\n    hasTiebreakCondition,\n    isCompletedSet,\n    isDecidingSet,\n    isTiebreakSet,\n    isValidSet,\n    isValidSetNumber,\n    isValidSetOutcome,\n    setFormat,\n    sideGameScores,\n    sideGameScoresCount,\n    sidePointScores,\n    sidePointScoresCount,\n    sideTiebreakScores,\n    sideTiebreakScoresCount,\n    winningSide,\n  },\n} = drawEngine.analyzeMatchUp({\n  matchUp,\n  sideNumber,\n  setNumber,\n  matchUpFormat,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"analyzeset"},"analyzeSet"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  expectTiebreakSet,\n  expectTimedSet,\n  hasTiebreakCondition,\n  isCompletedSet,\n  isDecidingSet,\n  isTiebreakSet,\n  isValidSet,\n  isValidSetNumber,\n  isValidSetOutcome,\n  setFormat,\n  sideGameScores,\n  sideGameScoresCount,\n  sidePointScores,\n  sidePointScoresCount,\n  sideTiebreakScores,\n  sideTiebreakScoresCount,\n  winningSide,\n} = drawEngine.analyzeSet({\n  setObject,\n  matchUpScoringFormat,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"assigndrawposition"},"assignDrawPosition"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.assignDrawPosition({\n  structureId,\n  drawPosition,\n  participantId,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"assigndrawpositionbye"},"assignDrawPositionBye"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.assignDrawPositionBye({\n  structureId,\n  drawPosition,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"assignseed"},"assignSeed"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"result = drawEngine.assignSeed({\n  structureId,\n  seedNumber,\n  seedValue, // optional - display value, e.g. '5-8'\n  participantId,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"attacheventpolicy"},"attachEventPolicy"),Object(i.b)("p",null,"Attaches a policy to an event within a tournamentRecord."),Object(i.b)("p",null,"See ",Object(i.b)("a",{parentName:"p",href:"../concepts/policies"},"Policies"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.attachEventPolicy({\n  eventId,\n  policyDefinition: SEEDING_POLICY,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"attachpolicy"},"attachPolicy"),Object(i.b)("p",null,"Attaches a policy to a drawDefinition."),Object(i.b)("p",null,"See ",Object(i.b)("a",{parentName:"p",href:"../concepts/policies"},"Policies"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.attachPolicy({ policyDefinition: SEEDING_POLICY });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"automatedpositioning"},"automatedPositioning"),Object(i.b)("p",null,"Positions participants in a draw structure. ",Object(i.b)("inlineCode",{parentName:"p"},"drawEngine")," is agnostic about the type of participants that are placed in a draw structure, but requires tournament participants for avoidance policies to work."),Object(i.b)("p",null,"See ",Object(i.b)("a",{parentName:"p",href:"../concepts/policies"},"Policies"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.automatedPositioning({\n  structureId,\n  participants, // optional - participants must be passed in for Avoidance Policies to be effective\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"checkinparticipant"},"checkInParticipant"),Object(i.b)("p",null,"Set the check-in state for a participant. Used to determine when both participants in a matchUp are available to be assigned to a court."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.checkInParticipant({\n  matchUpId,\n  participantId,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"checkoutparticipant"},"checkOutParticipant"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.checkOutParticipant({\n  matchUpId,\n  participantId,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"cleardrawposition"},"clearDrawPosition"),Object(i.b)("p",null,"Removes a ",Object(i.b)("inlineCode",{parentName:"p"},"participantId")," or ",Object(i.b)("inlineCode",{parentName:"p"},"bye")," from a specified ",Object(i.b)("inlineCode",{parentName:"p"},"drawPosition")," within a ",Object(i.b)("inlineCode",{parentName:"p"},"structure")," or, optionally, removes a specified ",Object(i.b)("inlineCode",{parentName:"p"},"participantId")," from a ",Object(i.b)("inlineCode",{parentName:"p"},"structure"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.clearDrawPosition({\n  structureId,\n  drawPosition, // optional if participantId is provided\n  participantId, // optional if drawPosition is provided\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"devcontext"},"devContext"),Object(i.b)("p",null,"Setting devContext(true) bypasses ",Object(i.b)("strong",{parentName:"p"},"try {} catch (err) {}")," code block and in some cases enables logging"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.devContext(true);\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"drawmatchups"},"drawMatchUps"),Object(i.b)("p",null,"Returns categorized matchUps from all structures within a draw."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  upcomingMatchUps,\n  pendingMatchUps,\n  completedMatchUps,\n  abandonedMatchUps,\n  byeMatchUps,\n} = drawEngine.allDrawMatchUps({\n  context, // optional context to be added into matchUps\n  inContext, // boolean - add context { drawId, structureId, participant, individualParticipants ... }\n  roundFilter, // filter to target matchUps from specified rounds\n  nextMatchUps, // optioanl - boolean - to include winnerGoesTo and loserGoesTo\n  matchUpFilters, // attribute filters\n  contextFilters, // filters based on context attributes\n  includeByeMatchUps, // return matchUps with { matchUpStatus: BYE }\n  tournamentParticipants, // optional - provide an array of tournamentParticipants to add into matchUps\n  requireParticipants, // optional - require that participants be loaded into drawEngine or passed into method\n  tournamentAppliedPolicies, // any policies, such as privacy, to be applied to matchUps\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"findmatchup"},"findMatchUp"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  matchUp,\n  structure, // returned for convenience\n} = drawEngine.findMatchUp({\n  matchUpId,\n  inContext, // optional - boolean - returns matchUp with additional attributes\n  tournamentParticipants, // optional - enables inContext matchUp to contain full participant objects\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"generatedrawtype"},"generateDrawType"),Object(i.b)("p",null,"Convenience method to generate pre-defined drawTypes."),Object(i.b)("p",null,"For more information on ",Object(i.b)("inlineCode",{parentName:"p"},"feedPolicy")," see ",Object(i.b)("a",{parentName:"p",href:"../policies/feedPolicy"},"Feed Policies"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.generateDrawType({\n  drawType, // defaults to SINGLE_ELIMINATION\n\n  matchUpFormat, // optional - default matchUpFormat\n  playoffMatchUpFormat, // optional - default playoffMatchUpFormat\n\n  seedingProfile, // optional - applies only to WATERFALL seeding in ROUND_ROBIN structures\n  feedPolicy, // optional - provides fine-grain control for FEED_IN_CONSOLATION feed links\n\n  qualifyingRound, // optional - for qualifying draw structures, roundNumber to win to qualify\n  qualifyingPositions, // optional - number of drawPositions to be filled by qualifiers\n  finishingPositionLimit, // optional - for playoff structures, limit to the number of positions to be played off\n\n  structureOptions: {\n    groupSize, // e.g. 4 participants per group\n    groupSizeLimit: 8,\n  },\n\n  goesTo, // optional - generate winnerGoesTo and loserGoesTo attributes\n  uuids, // optional - array of UUIDs to be used for structureIds and matchUpIds\n\n  stage, // optional - defaults to MAIN\n  structureName, // optional - defaults to stage\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"generatequalifyinglink"},"generateQualifyingLink"),Object(i.b)("p",null,"Generates and adds a ",Object(i.b)("inlineCode",{parentName:"p"},"link")," to ",Object(i.b)("inlineCode",{parentName:"p"},"drawDefinition.links"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.generateQualifyingLink({\n  qualifyingStructureId,\n  mainStructureId,\n  qualifyingRound,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"generatescorestring"},"generateScoreString"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const sets = [\n  {\n    side1Score: 6,\n    side2Score: 7,\n    side1TiebreakScore: 3,\n    side2TiebreakScore: 7,\n    winningSide: 2,\n  },\n  {\n    side1Score: 7,\n    side2Score: 6,\n    side1TiebreakScore: 14,\n    side2TiebreakScore: 12,\n    winningSide: 1,\n  },\n  { side1Score: 3 },\n];\nlet result = generateScoreString({\n    sets, // TODS sets object\n    winningSide, // optional - 1 or 2\n    reversed, // optional - reverse the score\n    winnerFirst = true, // optional - boolean - tranform sets so that winningSide is first (on left)\n    matchUpStatus, // optional - used to annotate scoreString\n    addOutcomeString, // optional - tranform matchUpStatus into outcomeString appended to scoreString\n    autoComplete: true, // optional - complete missing set score\n  });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"generatetiematchupscorestring"},"generateTieMatchUpScoreString"),Object(i.b)("p",null,"Returns string representation of current tieMatchUp score."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.generateTieMatchUpScoreString({\n  matchUp,\n  separator, // optional - defaults to '-'\n});\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"generatevoluntaryconsolationstructure"},"generateVoluntaryConsolationStructure"),Object(i.b)("p",null,"Generates a new structure within a ",Object(i.b)("inlineCode",{parentName:"p"},"drawDefinition")," if any draw entries are present for ",Object(i.b)("inlineCode",{parentName:"p"},"{ entryStage: VOLUNTARY_CONSOLATION }"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.generateVoluntaryConsolationStructure({\n  automated: true, // optional\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getavailableplayoffrounds"},"getAvailablePlayoffRounds"),Object(i.b)("p",null,"Returns rounds of a structure which are available for adding playoff structures."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  playoffRounds,\n  playoffRoundsRanges,\n} = drawEngine.getAvailablePlayoffRounds({\n  structureId,\n});\n")),Object(i.b)("p",null,"...For a SINGLE_ELIMINATION struture with drawSize: 16 would return:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"    {\n      playoffRounds: [ 1, 2, 3 ],\n      playoffRoundsRanges: [\n        { round: 1, range: '9-16' },\n        { round: 2, range: '5-8' },\n        { round: 3, range: '3-4' }\n      ]\n    }\n\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getcheckedinparticipantids"},"getCheckedInParticipantIds"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  allParticipantsCheckedIn, // boolean\n  checkedInParticipantIds, // array of participantIds\n} = drawEngine.getCheckedInParticipantIds({ matchUp });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getdrawstructures"},"getDrawStructures"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const { structures } = drawEngine.getDrawStructures({\n  stage, // optional - filter by stage\n  stageSequence, // optiona - filter by stageSequence\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"geteliminationdrawsize"},"getEliminationDrawSize"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const { drawSize } = drawEngine.getEliminationDrawSize({ participantCount });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getmatchupcontextids"},"getMatchUpContextIds"),Object(i.b)("p",null,"Convenience method to find a ",Object(i.b)("inlineCode",{parentName:"p"},"matchUp")," by ",Object(i.b)("inlineCode",{parentName:"p"},"matchUpId"),' and return "context ids". Does NOT require that drawEngine state be set, but does require an array of "inContext" ',Object(i.b)("inlineCode",{parentName:"p"},"matchUps"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  matchUpId,\n  drawId,\n  eventId,\n  structureId,\n  tournamentId,\n} = drawEngine.getMatchUpContextIds({ matchUps, matchUpId });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getmatchupparticipantids"},"getMatchUpParticipantIds"),Object(i.b)("p",null,"Convenience function; requires inContext matchUp."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  sideParticipantIds,\n  individualParticipantIds,\n} = drawEngine.getMatchUpParticipantIds({ matchUp });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getmatchupscheduledetails"},"getMatchUpScheduleDetails"),Object(i.b)("p",null,"Returns the latest values for all ",Object(i.b)("inlineCode",{parentName:"p"},"matchUp.timeItems"),", along with calculated values, that relate to the scheduling of a ",Object(i.b)("inlineCode",{parentName:"p"},"matchUp"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  schedule: {\n    time,\n    courtId,\n    venueId,\n    startTime,\n    endTime,\n    milliseconds,\n    scheduledDate,\n    scheduledTime,\n  },\n} = drawEngine.getMatchUpScheduleDetails({ matchUp });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getnextseedblock"},"getNextSeedBlock"),Object(i.b)("p",null,"Returns the next block of drawPositions which are to be assigned seeded participants."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  nextSeedBlock,\n  unplacedSeedParticipantIds,\n  unplacedSeedNumbers,\n  unfilledPositions,\n  unplacedSeedAssignments,\n} = drawEngine.getNextSeedBlock({\n  structureId,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getnextunfilleddrawpositions"},"getNextUnfilledDrawPositions"),Object(i.b)("p",null,"Returns the next valid block of unfilled drawPositions. Useful for UI to give visual indication of drawPostions valid to assign."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const { nextUnfilledDrawPositions } = drawEngine.getNextUnfilledDrawPositions({\n  structureId,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getparticipantidfinishingpositions"},"getParticipantIdFinishingPositions"),Object(i.b)("p",null,"Returns the Range of finishing positions possible for all participantIds within a draw"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const idMap = drawEngine.getParticipantIdFinishingPositions({\n  byeAdvancements, // optional boolean - whether or not to consider byeAdvancements\n});\n\nconst {\n  relevantMatchUps,\n  finishingPositionRanges,\n  finishingPositionRange,\n} = idMap[participantId];\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getpositionsplayedoff"},"getPositionsPlayedOff"),Object(i.b)("p",null,"Determines which finishing positions will be returned by a draw. For example, a First Match Loser Consolation with a draw size of 16 will playoff possitions 1, 2, 9 and 10."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const { positionsPlayedOff } = getPositionsPlayedOff({ drawDefinition });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getroundmatchups"},"getRoundMatchUps"),Object(i.b)("p",null,"Organizes matchUps by roundNumber. ",Object(i.b)("strong",{parentName:"p"},"roundMatchUps")," contains matchUp objects; ",Object(i.b)("strong",{parentName:"p"},"roundProfile")," provides an overview of drawPositions which have advanced to each round, a matchUpsCount, finishingPositionRange for winners and losers, and finishingRound."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const { roundMatchUps, roundProfile } = getRoundMatchUps({ matchUps });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getsourcerounds"},"getSourceRounds"),Object(i.b)("p",null,"Returns the round numbers for desired playoff positions."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  sourceRounds, // all source rounds for playedOff positions and specified playoffPositions\n  playoffSourceRounds,\n  playedOffSourceRounds,\n  playoffPositionsReturned,\n} = getSourceRounds({\n  drawDefinition,\n  structureId,\n  playoffPositions: [3, 4],\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getstructureseedassignments"},"getStructureSeedAssignments"),Object(i.b)("p",null,"Returns seedAssignments for a specific structure based on structureId or structure"),Object(i.b)("p",null,"The structure of an ",Object(i.b)("strong",{parentName:"p"},Object(i.b)("em",{parentName:"strong"},"assignment object"))," is as follows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{\n  "seedNumber": 1,\n  "seedValue": 1,\n  "participantId": "uuid-of-participant"\n}\n')),Object(i.b)("p",null,"The most basic usage is to retrieve seed assignments for a draw which has a single main stage structure"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const { seedAssignments } = drawEngine.getStructureSeedAssignments({\n  structureId,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getstate"},"getState"),Object(i.b)("p",null,"No parameters."),Object(i.b)("p",null,"Returns a deep copy of the current drawEngine state."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const { drawDefinition } = drawEngine.getState({\n  convertExtensions, // optional - convert extensions to '_' prefixed attributes\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"initializestructureseedassignments"},"initializeStructureSeedAssignments"),Object(i.b)("p",null,"Creates the ",Object(i.b)("inlineCode",{parentName:"p"},"seedAssignments")," attribute for the specified structure."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.initializeStructureSeedAssignments({\n  structureId,\n  seedsCount,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"iscompletedstructure"},"isCompletedStructure"),Object(i.b)("p",null,"Returns boolean whether all matchUps in a given structure have been completed"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const structureIsComplete = isCompletedStructure({\n  structureId,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"matchupactions"},"matchUpActions"),Object(i.b)("p",null,"Return an array of all validActions for a specific matchUp."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  isByeMatchUp, // boolean; true if matchUp includes a BYE\n  structureIsComplete, // boolean; true if structure is ready for positioning\n  validActions, // array of possible actions given current matchUpStatus\n} = drawEngine.matchUpActions({\n  matchUpId,\n});\n\nconst {\n  type, // 'REFEREE', 'SCHEDULE', 'PENALTY', 'STATUS', 'SCORE', 'START', 'END'.\n  method, // tournamentEngine method relating to action type\n  payload, // attributes to be passed to method\n  // additional method-specific options for values to be added to payload when calling method\n} = validAction;\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"matchupduration"},"matchUpDuration"),Object(i.b)("p",null,"Calculates matchUp duration from START, STOP, RESUME, END timeItems."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},'const {\n  milliseconds,\n  time, // string representation of elapsed time, e.g. "01:10:00" for an hour and 10 seconds\n  relevantTimeItems,\n} = drawEngine.matchUpDuration({\n  matchUp,\n});\n')),Object(i.b)("hr",null),Object(i.b)("h2",{id:"matchupsort"},"matchUpSort"),Object(i.b)("p",null,"Sorting function to arrange matchUps by stage, stageSequence, roundNumber, roundPosition (where applicable)"),Object(i.b)("p",null,"Used by ",Object(i.b)("inlineCode",{parentName:"p"},"mocksEngine")," for automatically scoring all matchUps in connected draw structures as part of test suites."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const { matchUps } = drawEngine.allDrawMatchUps();\nconst sortedMatchUps = matchUps.sort(drawEngine.matchUpSort);\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"newdrawdefinition"},"newDrawDefinition"),Object(i.b)("p",null,"Creates a new drawDefinition within drawEngine state."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const { drawId } = drawEngine.newDrawDefinition();\nconst { drawDefinition } = drawEngine.getState();\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"positionactions"},"positionActions"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const positionActions = drawEngine.positionActions({\n  structureId,\n  drawPosition,\n  policyDefinition: positionActionsPolicy, // optional - policy defining what actions are allowed in client context\n});\n\nconst {\n  isActiveDrawPosition, // boolean\n  isByePosition, // boolean\n  isDrawPosition, // boolean\n  hasPositionAssiged, // boolean\n  validActions,\n} = positionActions;\n\nconst {\n  type, // 'ASSIGN', 'LUCKY', 'SWAP', 'BYE', 'REMOVE'\n  method, // tournamentEngine method relating to action type\n  payload, // attributes to be passed to method\n  // additional method-specific options for values to be added to payload when calling method\n} = validAction;\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"removeentry"},"removeEntry"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.removeEntry({\n  participantId,\n  autoEntryPositions, // optional - keeps entries ordered by entryStage/entryStatus\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"reset"},"reset"),Object(i.b)("p",null,"Clears the drawEngine state."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.reset();\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"resetmatchuptimeitems"},"resetMatchUpTimeItems"),Object(i.b)("p",null,"Removes all timeItems from a specified matchUp."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.resetMatchUpTimeItems({ matchUpId });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setdrawdescription"},"setDrawDescription"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const drawDescription = 'Draw Description';\ndrawEngine.setDrawDescription({ description: drawDescription });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setmatchupformat"},"setMatchUpFormat"),Object(i.b)("p",null,"Sets the default ",Object(i.b)("inlineCode",{parentName:"p"},"matchUpFormat")," for a ",Object(i.b)("inlineCode",{parentName:"p"},"drawDefintion")," or a ",Object(i.b)("inlineCode",{parentName:"p"},"structure"),", or for a specific ",Object(i.b)("inlineCode",{parentName:"p"},"matchUp"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.setMatchUpFormat({\n  matchUpFormat,\n  matchUpType, // optional - insures that a matchUpFormat is not set on a tieMatchUp\n  tieFormat, // optional - when setting the format for a tieMatchUp\n\n  structureId, // optional - if structureId is present and not matchUpId is present, then set for structure\n  matchUpId, // optional - if matchUpId is present then only set for matchUp\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setmatchupstatus"},"setMatchUpStatus"),Object(i.b)("p",null,"Sets either matchUpStatus or score and winningSide. Handles any winner/loser participant movements within or across structures."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.setMatchUpStatus({\n  matchUpId,\n  matchUpTieId, // optional - if part of a TIE matchUp\n  matchUpStatus, // optional - if matchUpFormat differs from event/draw/structure defaults\n  winningSide,\n  schedule: {\n    // optional - set schedule items\n    scheduledDate,\n    scheduledTime,\n    startTime,\n    endTime,\n  },\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setparticipants"},"setParticipants"),Object(i.b)("p",null,"Participants are not managed by the ",Object(i.b)("inlineCode",{parentName:"p"},"drawEngine"),", but they can be used when returning 'inContext' matchUps as well as when automated positioning relies on avoidance policies."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.setParticipants(participants);\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setstagealternatescount"},"setStageAlternatesCount"),Object(i.b)("p",null,"Sets an (optional) limit to the number of accepted alternates."),Object(i.b)("p",null,"Modifies the 'entryProfile' of a drawDefinition before the structures have been generated."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.setStageAlternatesCount({ alternatesCount: 8 });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setstagedrawsize"},"setStageDrawSize"),Object(i.b)("p",null,"Modifies the 'entryProfile' of a drawDefinition before the structures have been generated."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.setStageDrawSize({ stage: QUALIFYING, drawSize: 8 });\ndrawEngine.setStageDrawSize({ stage: MAIN, drawSize: 16 });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setstagequalifierscount"},"setStageQualifiersCount"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.setStageQualifiersCount({ qualifiersCount: 4 });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setstagewildcardscount"},"setStageWildcardsCount"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.setStageWildcardsCount({ wildcardsCount: 2 });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setstate"},"setState"),Object(i.b)("p",null,"Loads a drawDefinition into drawEngine."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.setsState(drawDefinition, deepCopy);\n")),Object(i.b)("p",null,"By default a deep copy of the tournament record is made so that mutations made by drawEngine do not affect the source object. An optional boolean parameter, ",Object(i.b)("em",{parentName:"p"},"deepCopy")," can be set to false to override this default behavior."),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setsubscriptions"},"setSubscriptions"),Object(i.b)("p",null,"Please refer to the ",Object(i.b)("a",{parentName:"p",href:"../concepts/subscriptions"},"Subscriptions")," in General Concepts."),Object(i.b)("hr",null),Object(i.b)("h2",{id:"setsuborder"},"setSubOrder"),Object(i.b)("p",null,"Assigns a subOrder value to a participant within a structure by drawPosition where participant has been assigned"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.setSubOrder({\n  structureId, // structure identifier within drawDefinition\n  drawPosition: 1, // drawPosition of the participant where subOrder is to be added\n  subOrder: 2, // order in which tied participant should receive finishing position\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"structuresort"},"structureSort"),Object(i.b)("p",null,"Sorting function to arrange structures by stage, positionAssignments count (size) then stageSequence\nUsed internally to order Compass structures"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const sortedStructures = drawDefinition.structures.sort(structureSort);\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"swapdrawpositionassignments"},"swapDrawPositionAssignments"),Object(i.b)("p",null,"Swaps the ",Object(i.b)("inlineCode",{parentName:"p"},"participantIds")," of two ",Object(i.b)("inlineCode",{parentName:"p"},"drawPositions"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.swapDrawPositionAssignments({ structureId, drawPositions });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"getstructurematchups"},"getStructureMatchUps"),Object(i.b)("p",null,"Returns categorized matchUps from a single structure."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const {\n  upcomingMatchUps,\n  pendingMatchUps,\n  completedMatchUps,\n  abandonedMatchUps,\n  byeMatchUps,\n} = drawEngine.allDrawMatchUps({\n  structureId,\n  context, // optional context to be added into matchUps\n  inContext, // boolean - add context { drawId, structureId, participant, individualParticipants ... }\n  roundFilter, // filter to target matchUps from specified rounds\n  nextMatchUps, // optioanl - boolean - to include winnerGoesTo and loserGoesTo\n  matchUpFilters, // attribute filters\n  contextFilters, // filters based on context attributes\n  includeByeMatchUps, // return matchUps with { matchUpStatus: BYE }\n  tournamentParticipants, // optional - provide an array of tournamentParticipants to add into matchUps\n  requireParticipants, // optional - require that participants be loaded into drawEngine or passed into method\n  tournamentAppliedPolicies, // any policies, such as privacy, to be applied to matchUps\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"tallyparticipantresults"},"tallyParticipantResults"),Object(i.b)("p",null,"Method used to calculate finishing positions within a ROUND_ROBIN group."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const { participantResults } = drawEngine.tallyParticipantResults({\n  matchUps: structureMatchUps,\n  matchUpFormat,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"validdrawpositions"},"validDrawPositions"),Object(i.b)("p",null,"Returns boolean indicating whether all matchUps have valid draw positions"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"drawEngine.validDrawPositions({ matchUps });\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"version"},"version"),Object(i.b)("p",null,"Returns NPM package version. Can be used in configurations that utilize Competition Factory engines on both client and server to ensure equivalency."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const version = drawEngine.version();\n")),Object(i.b)("hr",null))}l.isMDXComponent=!0}}]);