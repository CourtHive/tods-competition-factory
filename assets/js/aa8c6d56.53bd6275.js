"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7434],{7942:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(959);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(g,c(c({ref:t},p),{},{components:n})):r.createElement(g,c({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,c=new Array(o);c[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:i,c[1]=a;for(var s=2;s<o;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6315:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var r=n(8957),i=(n(959),n(7942));const o={title:"Scheduling Policy"},c=void 0,a={unversionedId:"policies/scheduling",id:"policies/scheduling",title:"Scheduling Policy",description:"Scheduling policies define average match times and can specify recovery times as well as maximum number of matches per player per day. A scheduling policy is normally attached to a tournament record, but can optionally be attached to an event.",source:"@site/docs/policies/scheduling.md",sourceDirName:"policies",slug:"/policies/scheduling",permalink:"/tods-competition-factory/docs/policies/scheduling",draft:!1,tags:[],version:"current",frontMatter:{title:"Scheduling Policy"},sidebar:"docs",previous:{title:"Positioning Seeds",permalink:"/tods-competition-factory/docs/policies/positioningSeeds"},next:{title:"Scoring Policy",permalink:"/tods-competition-factory/docs/policies/scoringPolicy"}},l={},s=[{value:"Retrieving Scheduling times",id:"retrieving-scheduling-times",level:2},{value:"Scheduling Extensions",id:"scheduling-extensions",level:2}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Scheduling policies define average match times and can specify recovery times as well as maximum number of matches per player per day. A scheduling policy is normally attached to a tournament record, but can optionally be attached to an event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.attachPolicies({ policyDefinitions }); // attach to tournamentRecord\nengine.attachPolicies({ policyDefinitions, eventId }); // attach to event\n")),(0,i.kt)("h2",{id:"retrieving-scheduling-times"},"Retrieving Scheduling times"),(0,i.kt)("p",null,"Scheduling times are used by advanced scheduling methods and only need to be accessed after they are defined at the policy level when overrides for specific matchUpFormats are desired. See ",(0,i.kt)("a",{parentName:"p",href:"/docs/governors/query-governor#getscheduletiming"},"getMatchUpFormatTiming")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { averageMinutes, recoveryMinutes } = engine.getMatchUpFormatTiming({\n  matchUpFormat,\n  categoryName,\n  categoryType,\n  eventType,\n});\n")),(0,i.kt)("h2",{id:"scheduling-extensions"},"Scheduling Extensions"),(0,i.kt)("p",null,"Scheduling policies can be overriden by scheduling extensions."))}d.isMDXComponent=!0}}]);