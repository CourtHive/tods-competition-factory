"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[786],{7942:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>f});var o=t(959);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},i=Object.keys(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var l=o.createContext({}),p=function(n){var e=o.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},u=function(n){var e=p(n.components);return o.createElement(l.Provider,{value:e},n.children)},s="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},m=o.forwardRef((function(n,e){var t=n.components,r=n.mdxType,i=n.originalType,l=n.parentName,u=c(n,["components","mdxType","originalType","parentName"]),s=p(t),m=r,f=s["".concat(l,".").concat(m)]||s[m]||d[m]||i;return t?o.createElement(f,a(a({ref:e},u),{},{components:t})):o.createElement(f,a({ref:e},u))}));function f(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=t.length,a=new Array(i);a[0]=m;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=n,c[s]="string"==typeof n?n:r,a[1]=c;for(var p=2;p<i;p++)a[p]=t[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5494:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var o=t(8957),r=(t(959),t(7942));const i={title:"Round Naming"},a=void 0,c={unversionedId:"policies/roundNaming",id:"policies/roundNaming",title:"Round Naming",description:"A Round Naming policy defines both round names and round name abbreviations used when hydrating matchUps.",source:"@site/docs/policies/roundNaming.mdx",sourceDirName:"policies",slug:"/policies/roundNaming",permalink:"/tods-competition-factory/docs/policies/roundNaming",draft:!1,tags:[],version:"current",frontMatter:{title:"Round Naming"},sidebar:"docs",previous:{title:"Ranking Policy",permalink:"/tods-competition-factory/docs/policies/rankingPolicy"},next:{title:"Round Robin Tally Policy",permalink:"/tods-competition-factory/docs/policies/tallyPolicy"}},l={},p=[{value:"Default Round Naming policy",id:"default-round-naming-policy",level:2}],u={toc:p},s="wrapper";function d(n){let{components:e,...t}=n;return(0,r.kt)(s,(0,o.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"Round Naming")," policy defines both round names and round name abbreviations used when hydrating ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUps"),".\nIf no policy has been attached at any level of the tournament record hierarchy, the default policy (see below) is used."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Round Naming")," policies can be attached to a tournament record, an event, or a drawDefinition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.attachPolicies({ policyDefinitions: { [policyType]: {} } });\ntournamentEngine.attachEventPolicies({\n  policyDefinitions: { [policyType]: {} },\n  eventId,\n});\ntournamentEngine.generateDrawDefinition({ ...params, policyDefinitions });\ntournamentEngine.modifyDrawDefinition({\n  drawUpdates: { policyDefinitions },\n  drawId,\n});\n\ndrawEngine.attachPolicies({ policyDefinitions: { [policyType]: {} } });\n")),(0,r.kt)("h2",{id:"default-round-naming-policy"},"Default Round Naming policy"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  [POLICY_TYPE_ROUND_NAMING]: {\n    policyName: 'Round Naming Default',\n    namingConventions: {\n      round: 'Round', // used for Ad Hoc or non-power-of-2 rounds\n    },\n    // key is matchUpsCount for the round\n    abbreviatedRoundNamingMap: {\n      1: 'F',\n      2: 'SF',\n      4: 'QF',\n    },\n    // key is matchUpsCount for the round\n    roundNamingMap: {\n      1: 'Final',\n      2: 'Semifinal',\n      4: 'Quarterfinal',\n    },\n    affixes: {\n      roundNumber: 'R',\n      preFeedRound: 'Q',\n    },\n    stageConstants: {\n      [MAIN]: '',\n      [PLAY_OFF]: 'P',\n      [QUALIFYING]: 'Q',\n      [CONSOLATION]: 'C',\n    },\n  },\n};\n")))}d.isMDXComponent=!0}}]);