(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[769],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(g,i(i({ref:n},l),{},{components:t})):r.createElement(g,i({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3048:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i=["components"],s={title:"Mocks Engine API",menu:"Mocks Engine",route:"/mocksEngine/api"},c={unversionedId:"apis/mocks-engine-api",id:"apis/mocks-engine-api",isDocsHomePage:!1,title:"Mocks Engine API",description:"generateOutcomeFromScoreString",source:"@site/docs/apis/mocks-engine-api.md",sourceDirName:"apis",slug:"/apis/mocks-engine-api",permalink:"/tods-competition-factory/docs/apis/mocks-engine-api",version:"current",frontMatter:{title:"Mocks Engine API",menu:"Mocks Engine",route:"/mocksEngine/api"},sidebar:"docs",previous:{title:"Generating Tournaments",permalink:"/tods-competition-factory/docs/engines/mocks-engine-examples"},next:{title:"Competition Engine API",permalink:"/tods-competition-factory/docs/apis/competition-engine-api"}},p=[{value:"generateOutcomeFromScoreString",id:"generateoutcomefromscorestring",children:[]},{value:"generateParticipants",id:"generateparticipants",children:[]},{value:"generateTournamentRecord",id:"generatetournamentrecord",children:[]},{value:"parseScoreString",id:"parsescorestring",children:[]}],l={toc:p};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"generateoutcomefromscorestring"},"generateOutcomeFromScoreString"),(0,o.kt)("p",null,"Generates ",(0,o.kt)("inlineCode",{parentName:"p"},"outcome")," object from parseable score string."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { outcome } = mocksEngine.generateOutcomeFromScoreString({\n  scoreString: '6-1 6-1', // parseable score string\n  winningSide: 1, // optional - valid values are [1, 2, undefined]\n  matchUpStatus: COMPLETED,\n});\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"outcome")," object can be passed into the ",(0,o.kt)("inlineCode",{parentName:"p"},"tournamentEngine")," method for updating a ",(0,o.kt)("inlineCode",{parentName:"p"},"matchUp"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.devContext(true).setMatchUpStatus({\n  drawId,\n  matchUpId,\n  outcome,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"generateparticipants"},"generateParticipants"),(0,o.kt)("p",null,"Generate mock participants. This method is used within ",(0,o.kt)("inlineCode",{parentName:"p"},"generateTournamentRecord")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { participants } = mocksEngine.generateParticipants({\n  participantsCount: 32, //  number of participants to generate\n  participantType: PAIR, // [INDIVIDUAL, PAIR, TEAM]\n  matchUpType: SINGLES, // optional - [SINGLES, DOUBLES] - forces PAIR participant generation if DOUBLES\n  sex: FEMALE, // optional - [MALE, FEMALE]\n\n  nationalityCodesCount: 10, // optional - number of nationality codes to use when generating participants\n  nationalityCodeType: 'ISO', // optional - 'IOC' or 'ISO', defaults to IOC\n  nationalityCodes: [], // optional - an array of ISO codes to randomly assign to participants\n  addressProps: {\n    citiesCount: 10,\n    statesCount: 10,\n    postalCodesCount: 10,\n  },\n  valuesInstanceLimit, // optional - maximum number of values which can be the same\n\n  inContext: true, // optional - whether to expand PAIR and TEAM individualParticipantIds => individualParticipant objects\n  personData, //  optional array of persons to seed generator [{ firstName, lastName, sex, nationalityCode }]\n});\n\ntournamentEngine.addParticipants({ participants });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"generatetournamentrecord"},"generateTournamentRecord"),(0,o.kt)("p",null,"Generate a complete tournamentRecord from the following attributes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Optional values\nconst outcomes = [\n  {\n    drawPositions: [1, 2],\n    scoreString: '6-1 6-2',\n    winningSide: 1,\n  },\n];\nconst drawProfiles = [\n  {\n    drawSize: 4,\n    participantsCount: 4, // optional - ability to specify fewer participants than drawSize to generate BYEs\n    drawType: ROUND_ROBIN,\n    outcomes,\n  },\n];\nconst eventProfiles = [\n  {\n    eventName: 'U18 Boys Doubles',\n    gender: MALE,\n    drawProfiles: [\n      {\n        drawSize: 16,\n      },\n    ],\n  },\n];\nconst venueProfiles = [\n  {\n    venueName: 'Venue 1', // optional - will auto-generate names\n    courtsCount: 3,\n    dateAvailability, // optional - will use tournament start and end dates and default times\n  },\n];\n\nconst {\n  tournamentRecord,\n  drawIds: [drawId],\n  eventIds: [eventId],\n} = mocksEngine.generateTournamentRecord({\n  endDate, // optional - ISO string date\n  startDate, // optional - ISO string date\n  participantsProfile, // optional - { participantCount, participantType }\n  drawProfiles, // optional - array of profiles for draws to be generated; each draw creates an event\n  eventProfiles, // optional - array of profiles for events to be generated; can include drawProfiles\n  venueProfiles, // optional - array of profiles for venues to be generated; each venue creates courts\n});\n\ntournamentEngine.setState(tournamentRecord);\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"When using ",(0,o.kt)("inlineCode",{parentName:"p"},"drawProfiles")," participants in excess of ",(0,o.kt)("inlineCode",{parentName:"p"},"drawSize")," will be added with ",(0,o.kt)("inlineCode",{parentName:"p"},"{ entryStatus: ALTERNATE }"),",\nwhereas with ",(0,o.kt)("inlineCode",{parentName:"p"},"eventProfiles")," only the number of participants necessary to populate the draw are added with ",(0,o.kt)("inlineCode",{parentName:"p"},"{ entryStatus: DIRECT_ACCEPTANCE }"),"."))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"parsescorestring"},"parseScoreString"),(0,o.kt)("p",null,"Produces TODS sets objects."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const sets = mocksEngine.parseScoreString({ scoreString: '1-6 1-6' });\n\n/*\nconsole.log(sets)\n[\n  ({\n    side1Score: 1,\n    side2Score: 6,\n    side1TiebreakScore: undefined,\n    side2TiebreakScore: undefined,\n    winningSide: 2,\n    setNumber: 1,\n  },\n  {\n    side1Score: 1,\n    side2Score: 6,\n    side1TiebreakScore: undefined,\n    side2TiebreakScore: undefined,\n    winningSide: 2,\n    setNumber: 2,\n  })\n];\n*/\n")),(0,o.kt)("hr",null))}d.isMDXComponent=!0}}]);