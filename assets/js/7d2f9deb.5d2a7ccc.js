"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[672],{7120:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=t(1527),i=t(7942);const a={title:"Features"},o=void 0,s={id:"features",title:"Features",description:"Draw Generation",source:"@site/docs/features.mdx",sourceDirName:".",slug:"/features",permalink:"/tods-competition-factory/docs/features",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Features"},sidebar:"docs",previous:{title:"State Engines",permalink:"/tods-competition-factory/docs/state-engines"},next:{title:"TMX Example",permalink:"/tods-competition-factory/docs/tmx"}},c={},d=[{value:"Draw Generation",id:"draw-generation",level:2},{value:"Generating Multiple Flights",id:"generating-multiple-flights",level:3},{value:"Mock Tournament Generation",id:"mock-tournament-generation",level:2},{value:"Scheduling",id:"scheduling",level:2},{value:"scheduleTimes",id:"scheduletimes",level:3},{value:"scheduleMatchUps",id:"schedulematchups",level:3},{value:"scheduleProfileRounds()",id:"scheduleprofilerounds",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"draw-generation",children:"Draw Generation"}),"\n",(0,r.jsxs)(n.p,{children:["Draws are the centerpiece of any tournament. While TODS strives to be agnostic about the specific type of draw represented by a ",(0,r.jsx)(n.code,{children:"drawDefinition"}),",\n",(0,r.jsx)(n.strong,{children:"Competition Factory"})," includes a convenience method which exercises other methods to generate a wide range of recognized ",(0,r.jsx)(n.a,{href:"concepts/draw-generation",children:"draw types"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:"function DrawDefinitionDemo(props) {\n  const { drawDefinition } = tournamentEngine.generateDrawDefinition({\n    drawName: 'Demo Draw',\n    drawType: 'COMPASS',\n    drawSize: 32,\n  });\n\n  return <Draw data={drawDefinition} />;\n}\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.h3,{id:"generating-multiple-flights",children:"Generating Multiple Flights"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"generateFlightProfile()"})," generates flighted draw details which can be fed into ",(0,r.jsx)(n.code,{children:"generateDrawDefinition()"}),"."]})]}),"\n",(0,r.jsx)(n.h2,{id:"mock-tournament-generation",children:"Mock Tournament Generation"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"mocksEngine"})," can generate entire TODS tournament documents, including participants, events, and draws."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:"function MocksEngineDemo(props) {\n  const { tournamentRecord } = mocksEngine.generateTournamentRecord();\n\n  return <Tournament data={tournamentRecord} />;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"engines/mocks-engine-examples",children:"Generating Tournaments"})," for more examples of mock tournament generation,"]}),"\n",(0,r.jsx)(n.admonition,{title:"Live Visualizations",type:"note",children:(0,r.jsxs)(n.p,{children:["For a live example of the ",(0,r.jsx)(n.code,{children:"mocksEngine"})," in action, see the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://courthive.github.io/tods-react-draws/example",children:"Example: tods-react-draws"})})]})}),"\n",(0,r.jsx)(n.h2,{id:"scheduling",children:"Scheduling"}),"\n",(0,r.jsxs)(n.p,{children:["In addition to individual and bulk manual scheduling methods, the ",(0,r.jsx)(n.strong,{children:"Competition Factory"})," supports automated\n",(0,r.jsx)(n.strong,{children:"Garman Scheduling"})," and surfaces the Garman calculations at various levels of abstraction, all of which are\ndependent on a tournament record including ",(0,r.jsx)(n.code,{children:"venues"})," with ",(0,r.jsx)(n.code,{children:"courts"})," with defined ",(0,r.jsx)(n.code,{children:"dateAvailability"}),", as well as an\nexpected ",(0,r.jsx)(n.code,{children:"averageMatchUpMinutes"}),". Scheduling methods are surfaced via the ",(0,r.jsx)(n.code,{children:"competitionEngine"})," to enable scheduling\nmultiple tournaments with shared ",(0,r.jsx)(n.code,{children:"venues"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"scheduletimes",children:"scheduleTimes"}),"\n",(0,r.jsxs)(n.p,{children:["At the lowest level there is ",(0,r.jsx)(n.code,{children:"calculateScheduleTimes()"}),", which returns an array of available schedule times for a\ngiven date (and optional time range). In the example below there are 3 courts with a startTime of ",(0,r.jsx)(n.strong,{children:"08:00"}),".\nIn the generated ",(0,r.jsx)(n.strong,{children:"scheduleTimes"})," you can see that the first three available times are ",(0,r.jsx)(n.strong,{children:"08:00"}),", and after that\nthe times are produced by the Garman formula."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:"function ScheduleTimesDemo(props) {\n  const venueProfiles = [\n    {\n      startTime: '08:00',\n      endTime: '20:00',\n      courtsCount: 3,\n    },\n  ];\n  const { tournamentRecord } = mocksEngine.generateTournamentRecord({\n    venueProfiles,\n  });\n  competitionEngine.setState(tournamentRecord);\n  const { startDate, endDate } = competitionEngine.getCompetitionDateRange();\n  const { scheduleTimes } = competitionEngine.calculateScheduleTimes({\n    scheduleDate: startDate,\n  });\n\n  return (\n    <RenderJSON\n      data={scheduleTimes}\n      root={'scheduleTimes'}\n      expandRoot={false}\n    />\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"schedulematchups",children:"scheduleMatchUps"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"scheduleMatchUps()"})," takes an ordered array of ",(0,r.jsx)(n.code,{children:"matchUpIds"})," and target ",(0,r.jsx)(n.code,{children:"venueIds"})," and assigns a ",(0,r.jsx)(n.code,{children:"scheduledTime"})," to each ",(0,r.jsx)(n.code,{children:"matchUp"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"scheduleprofilerounds",children:"scheduleProfileRounds()"}),"\n",(0,r.jsxs)(n.p,{children:["The ordering of ",(0,r.jsx)(n.code,{children:"matchUps"})," is handled automatically by ",(0,r.jsx)(n.code,{children:"scheduleProfileRounds()"})," which uses a ",(0,r.jsx)(n.code,{children:"schedulingProfile"}),"\nto not only automatically determine the order of ",(0,r.jsx)(n.code,{children:"matchUps"})," from specified ",(0,r.jsx)(n.code,{children:"rounds"}),", but also considers per-player\n(and per-format) daily matchUp limmits and scheduling policies which are attached to the tournament record(s).\nScheduling policies can define both ",(0,r.jsx)(n.strong,{children:"average minutes"})," and ",(0,r.jsx)(n.strong,{children:"recovery mintes"})," for each ",(0,r.jsx)(n.code,{children:"matchUpFormat"}),", and policy\ndefaults can be overridden by event-level settings. For a full explanation see ",(0,r.jsx)(n.a,{href:"concepts/scheduling",children:"Advanced Scheduling"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.ah)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},7942:(e,n,t)=>{t.d(n,{ah:()=>d});var r=t(959);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=d(t),m=i,p=u["".concat(c,".").concat(m)]||u[m]||l[m]||a;return t?r.createElement(p,o(o({ref:n},h),{},{components:t})):r.createElement(p,o({ref:n},h))}));h.displayName="MDXCreateElement"}}]);