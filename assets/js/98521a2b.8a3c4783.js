"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2259],{7942:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var i=n(959);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),l=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?i.createElement(f,a(a({ref:t},p),{},{components:n})):i.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<r;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7461:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=n(8957),o=(n(959),n(7942));const r={title:"Introduction to Policies"},a=void 0,c={unversionedId:"concepts/policies",id:"concepts/policies",title:"Introduction to Policies",description:"Policies determine how the various Competition Factory engines function and can shape the way that results are returned. Policies can be attached to the tournamentRecord, events, or to drawDefinitions within an event. They can also be passed directly into some factory methods; e.g. a Participant Policy can be passed into a method which returns particpipants and filter out attributes which are not to be displayed.",source:"@site/docs/concepts/policies.md",sourceDirName:"concepts",slug:"/concepts/policies",permalink:"/tods-competition-factory/docs/concepts/policies",draft:!1,tags:[],version:"current",frontMatter:{title:"Introduction to Policies"},sidebar:"docs",previous:{title:"Scale Items",permalink:"/tods-competition-factory/docs/concepts/scaleItems"},next:{title:"Avoidance",permalink:"/tods-competition-factory/docs/policies/avoidance"}},s={},l=[{value:"Policy Types",id:"policy-types",level:2}],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Policies determine how the various Competition Factory engines function and can shape the way that results are returned. Policies can be attached to the ",(0,o.kt)("inlineCode",{parentName:"p"},"tournamentRecord"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"events"),", or to ",(0,o.kt)("inlineCode",{parentName:"p"},"drawDefinitions")," within an ",(0,o.kt)("inlineCode",{parentName:"p"},"event"),". They can also be passed directly into some factory methods; e.g. a ",(0,o.kt)("strong",{parentName:"p"},"Participant Policy")," can be passed into a method which returns particpipants and filter out attributes which are not to be displayed."),(0,o.kt)("p",null,"The structure of a ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"policyDefinitions"))," object is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"{\n  [policyType]: {      // e.g. 'seeding' or 'avoidance'\n    policyName: 'name'  // for 'seeding' can be the provider of the policy, e.g. 'ITF' or 'USTA'\n    ...attributes       // attributes relevant to the policyType\n  },\n  [anotherPolicyType]: {\n    policyName: 'name'\n    ...attributes\n  },\n}\n")),(0,o.kt)("h2",{id:"policy-types"},"Policy Types"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../policies/avoidance"},"Avoidance Policy"),": Can be attached to drawDefinitions to specify the attriubutes by which participants should be separated"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/tods-competition-factory/docs/policies/participantPolicy"},"Participant Policy")," Enables participant details to be filtered to respect privacy concerns"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../policies/positionActions"},"Position Actions Policy"),": Determines valid actions for positions in a draw structure"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../policies/matchUpActions"},"MatchUp Actions Policy"),": Determines valid actions for matchUps (substitutions, penalties, referree, scheduling)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../policies/positioningSeeds"},"Seeding Policy"),": Sets seeding pattern and thresholds for number of seeds allowed for draw sizes"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../policies/scheduling"},"Scheduling Policy"),": Defines average and rest/recovery times for matchUpFormats, categoryNames, and categoryTypes"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../policies/tallyPolicy"},"Round Robin Tally Policy"),": Configures calculations which determine participant finishing positions"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../policies/feedPolicy"},"Feed Policy"),": Determining the the patterns which direct participants into consolation feed rounds"),(0,o.kt)("li",{parentName:"ul"},"Progression Policy: Configuration related to participant progression, e.g. automatic qualifier placement, double-exit effects"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../policies/roundNaming"},"Round Naming Policy"),": Specifies how rounds of draw structures should be named"),(0,o.kt)("li",{parentName:"ul"},'Scoring Policy: Restricts available matchUpFormats, defines a default and conditions for "ready to score"'),(0,o.kt)("li",{parentName:"ul"},"Voluntary Consolation Policy: Specifies ",(0,o.kt)("inlineCode",{parentName:"li"},"{ winsLimit, finishingRoundLimit }")," for voluntary consolation eligibility")))}u.isMDXComponent=!0}}]);