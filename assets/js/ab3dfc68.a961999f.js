"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2618],{7942:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var a=n(959);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},l),{},{components:n})):a.createElement(h,o({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[d]="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6343:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=n(8957),r=(n(959),n(7942));const i={title:"Context / Hydration"},o=void 0,p={unversionedId:"concepts/context",id:"concepts/context",title:"Context / Hydration",description:"When matchUps and tournamentParticipants are returned with { inContext: true }",source:"@site/docs/concepts/context.mdx",sourceDirName:"concepts",slug:"/concepts/context",permalink:"/tods-competition-factory/docs/concepts/context",draft:!1,tags:[],version:"current",frontMatter:{title:"Context / Hydration"},sidebar:"docs",previous:{title:"Accessors",permalink:"/tods-competition-factory/docs/concepts/accessors"},next:{title:"Draw Generation",permalink:"/tods-competition-factory/docs/concepts/draw-generation"}},c={},s=[{value:"matchUps",id:"matchups",level:2},{value:"tournamentParticipants",id:"tournamentparticipants",level:2},{value:"Converted Extensions",id:"converted-extensions",level:2}],l={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"When ",(0,r.kt)("strong",{parentName:"p"},"matchUps")," and ",(0,r.kt)("strong",{parentName:"p"},"tournamentParticipants")," are returned with ",(0,r.kt)("inlineCode",{parentName:"p"},"{ inContext: true }"),'\nthey will include contextual information that is not part of the TODS document node from which they originated; the process is also referred to as "hydration".'),(0,r.kt)("p",null,"Contextual information for ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUps")," includes information about the ",(0,r.kt)("inlineCode",{parentName:"p"},"structures, drawDefinitions")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"events")," within which they are embeded;\n",(0,r.kt)("inlineCode",{parentName:"p"},"drawPositions")," are resolved using ",(0,r.kt)("inlineCode",{parentName:"p"},"positionAssignments")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"participants"),"."),(0,r.kt)("p",null,"Contextual information for ",(0,r.kt)("inlineCode",{parentName:"p"},"participants")," can include ",(0,r.kt)("inlineCode",{parentName:"p"},"events, drawDefinitions")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUps")," in which each ",(0,r.kt)("inlineCode",{parentName:"p"},"participant")," appears,\nas well as ",(0,r.kt)("inlineCode",{parentName:"p"},"ratings")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"rankings")," converted from ",(0,r.kt)("inlineCode",{parentName:"p"},"timeItems"),"."),(0,r.kt)("p",null,"Additional contextual information can be passed into methods for retrieving ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUps")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"participants")," via the ",(0,r.kt)("inlineCode",{parentName:"p"},"context")," attribute,\nand any ",(0,r.kt)("inlineCode",{parentName:"p"},"extensions")," can be converted to attributes accessible as attributes beginning with an underscore."),(0,r.kt)("h2",{id:"matchups"},"matchUps"),(0,r.kt)("p",null,"All API calls which return ",(0,r.kt)("strong",{parentName:"p"},"matchUps")," return deep copies with context.\nAttributes that are added for ",(0,r.kt)("strong",{parentName:"p"},"matchUps")," include: ",(0,r.kt)("inlineCode",{parentName:"p"},"structureId, structureName, drawId, eventId, eventName, tournamentId")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentName"),"."),(0,r.kt)("p",null,"In the ",(0,r.kt)("strong",{parentName:"p"},"Live Editor")," example below, ",(0,r.kt)("inlineCode",{parentName:"p"},"{ inContext: false }")," overrides the default behavior.\nChange the value to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," and compare the ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUp")," objects to see the difference when context is added."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function ContextDemo(props) {\n  const { tournamentRecord } = mocksEngine.generateTournamentRecord({\n    drawProfiles: [{ drawSize: 4 }],\n  });\n  tournamentEngine.setState(tournamentRecord);\n\n  const { matchUps } = tournamentEngine.allTournamentMatchUps({\n    inContext: false,\n  });\n\n  return <MatchUps data={matchUps} />;\n}\n")),(0,r.kt)("h2",{id:"tournamentparticipants"},"tournamentParticipants"),(0,r.kt)("p",null,"When participants are returned with ",(0,r.kt)("inlineCode",{parentName:"p"},"{ inContext: true }"),", those that are ",(0,r.kt)("inlineCode",{parentName:"p"},"participantType")," ",(0,r.kt)("strong",{parentName:"p"},"PAIR, TEAM, or GROUP")," include ",(0,r.kt)("inlineCode",{parentName:"p"},"individualParticipants")," derived from ",(0,r.kt)("inlineCode",{parentName:"p"},"individualParticipantIds"),"."),(0,r.kt)("p",null,"Context is also added if ",(0,r.kt)("inlineCode",{parentName:"p"},"withStatistics, withOpponents, withMatchUps, or scheduleAnalysis")," are true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  tournamentParticipants,\n  participantIdsWithConflicts, // array of participantIds which have scheduling conflicts\n} = tournamentEngine.getTournamentParticipants({\n  inContext: true,\n\n  participantFilters: { participantTypes: [PAIR] },\n  scheduleAnalysis: { scheduledMinutesDifference },\n  policyDefinitions,\n  withStatistics,\n  withOpponents,\n  withMatchUps,\n});\n")),(0,r.kt)("h2",{id:"converted-extensions"},"Converted Extensions"),(0,r.kt)("p",null,"All elements that are returned ",(0,r.kt)("strong",{parentName:"p"},"inContext")," include converted extensions. See ",(0,r.kt)("strong",{parentName:"p"},"makeDeepCopy")," in ",(0,r.kt)("a",{parentName:"p",href:"../utilities/make-deep-copy"},"Utilities"),"."))}u.isMDXComponent=!0}}]);