"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3706],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return n?o.createElement(g,i(i({ref:t},p),{},{components:n})):o.createElement(g,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2693:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const a={title:"Global State"},i=void 0,s={unversionedId:"concepts/globalState",id:"concepts/globalState",title:"Global State",description:"Engines share state",source:"@site/docs/concepts/globalState.mdx",sourceDirName:"concepts",slug:"/concepts/globalState",permalink:"/CourtHive/tods-competition-factory/docs/concepts/globalState",draft:!1,tags:[],version:"current",frontMatter:{title:"Global State"},sidebar:"docs",previous:{title:"Draw Generation",permalink:"/CourtHive/tods-competition-factory/docs/concepts/draw-generation"},next:{title:"Introduction to Policies",permalink:"/CourtHive/tods-competition-factory/docs/concepts/policies"}},c={},l=[{value:"Engines share state",id:"engines-share-state",level:2},{value:"Synchronous and Asynchronous",id:"synchronous-and-asynchronous",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"engines-share-state"},"Engines share state"),(0,r.kt)("p",null,"Except in cases where ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentEngine")," is used to generate a ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentRecord")," from scratch,\nit is necessary to first call a ",(0,r.kt)("inlineCode",{parentName:"p"},".setState()")," engine method."),(0,r.kt)("p",null,"Setting ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentEngine")," state adds a tournamentRecord to global state, which makes it available to ",(0,r.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setState(tournamentRecord);\nconst { tournamentRecords } = competitionEngine.getState();\n")),(0,r.kt)("p",null,"If multiple tournamentRecords are added to ",(0,r.kt)("inlineCode",{parentName:"p"},"competitionEngine")," state,\n",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentEngine")," can point to a specific tournamentRecord by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentId"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.setState(tournamentRecords);\ntournamentEngine.setTournamentId(tournamentId);\nconst { tournamentRecord } = tournamentEngine.getState();\n")),(0,r.kt)("p",null,"When a single tournamentRecord is added via ",(0,r.kt)("inlineCode",{parentName:"p"},"competitionEngine"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentId")," is set automatically."),(0,r.kt)("h2",{id:"synchronous-and-asynchronous"},"Synchronous and Asynchronous"),(0,r.kt)("p",null,"Competition Factory engines share a global state which is by default ",(0,r.kt)("strong",{parentName:"p"},"synchronous"),"."),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"/sr/global/examples")," there is an example of an ",(0,r.kt)("strong",{parentName:"p"},"asynchronous")," global state provider which can be copied into projects,\ntypically nodejs servers, which require asynchronous processing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import asyncGlobalState from '../src/global/examples/asyncGlobalState';\n\nsetStateProvider(asyncGlobalState);\nconst asyncTournamentEngine = tournamentEngineAsync();\nconst asyncCompetitionEngine = competitionEngineAsync();\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},'There is no need to define a "stateProvider" for synchronous use, but it is possible to provide an alternate implementation.')))}u.isMDXComponent=!0}}]);