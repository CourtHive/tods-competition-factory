"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6995],{9276:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(5271);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=a.createContext({}),i=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=i(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=i(n),p=l,m=u["".concat(c,".").concat(p)]||u[p]||h[p]||r;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:l,o[1]=s;for(var i=2;i<r;i++)o[i]=n[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3614:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>i});var a=n(8957),l=(n(5271),n(9276));const r={title:"Schedule Governor"},o=void 0,s={unversionedId:"governors/schedule-governor",id:"governors/schedule-governor",title:"Schedule Governor",description:"allocateTeamMatchUpCourts",source:"@site/docs/governors/schedule-governor.md",sourceDirName:"governors",slug:"/governors/schedule-governor",permalink:"/tods-competition-factory/docs/governors/schedule-governor",draft:!1,tags:[],version:"current",frontMatter:{title:"Schedule Governor"},sidebar:"docs",previous:{title:"Report Governor",permalink:"/tods-competition-factory/docs/governors/report-governor"},next:{title:"Score Governor",permalink:"/tods-competition-factory/docs/governors/score-governor"}},c={},i=[{value:"allocateTeamMatchUpCourts",id:"allocateteammatchupcourts",level:2},{value:"bulkRescheduleMatchUps",id:"bulkreschedulematchups",level:2},{value:"bulkScheduleTournamentMatchUps",id:"bulkscheduletournamentmatchups",level:2},{value:"bulkUpdatePublishedEventIds",id:"bulkupdatepublishedeventids",level:2},{value:"clearMatchUpSchedule",id:"clearmatchupschedule",level:2},{value:"clearScheduledMatchUps",id:"clearscheduledmatchups",level:2},{value:"matchUpScheduleChange",id:"matchupschedulechange",level:2},{value:"reorderUpcomingMatchUps",id:"reorderupcomingmatchups",level:2},{value:"removeMatchUpCourtAssignment",id:"removematchupcourtassignment",level:2},{value:"scheduleMatchUps",id:"schedulematchups",level:2},{value:"scheduleProfileRounds",id:"scheduleprofilerounds",level:2},{value:"setMatchUpDailyLimits",id:"setmatchupdailylimits",level:2},{value:"setSchedulingProfile",id:"setschedulingprofile",level:2},{value:"validateSchedulingProfile",id:"validateschedulingprofile",level:2}],d={toc:i},u="wrapper";function h(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { scheduleGovernor } from 'tods-competition-factory';\n")),(0,l.kt)("h2",{id:"allocateteammatchupcourts"},"allocateTeamMatchUpCourts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let result = engine.allocateTeamMatchUpCourts({\n  removePriorValues, // optional boolean\n  matchUpId,\n  courtIds,\n  drawId,\n});\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"bulkreschedulematchups"},"bulkRescheduleMatchUps"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  rescheduled, // array of inContext matchUps which have been rescheduled\n  notRescheduled, // array of inContext matchUps which have NOT been rescheduled\n  allRescheduled, // boolean indicating whether all matchUps have been rescheduled\n  dryRun, // boolean - only report what would happen without making modifications\n} = engine.bulkRescheduleMatchUps({\n  matchUpIds, // array of matchUupIds for matchUps which are to be rescheduled\n  scheduleChange: {\n    daysChange: 1, // number of days +/-\n    minutesChange: 30, // number of minutes +/-\n  },\n});\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"bulkscheduletournamentmatchups"},"bulkScheduleTournamentMatchUps"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const schedule = {\n  scheduledTime: '08:00',\n  scheduledDate: '2021-01-01T00:00', // best practice to provide ISO date string\n  venueId,\n};\nconst matchUpDetails = [{ matchUpId, schedule }];\nengine.bulkScheduleTournamentMatchUps({\n  checkChronology, // optional boolean - returns warnings for scheduling errors; throws errors when combined with errorOnAnachronism\n  errorOnAnachronism, // optional boolean - throw error if chronological scheduduling error\n  removePriorValues, // optional boolean - remove all pre-existing scheduling timeItems from matchUps\n  matchUpDetails, // optional - for use when matchUps have different scheduling details\n  matchUpIds, // optional - used together with schedule when all matchUps will have the same schedule details applied\n  schedule, // optiona - used together with matchUpIds when all matchUps will ahve the same schedule details applied\n});\n")),(0,l.kt)("h2",{id:"bulkupdatepublishedeventids"},"bulkUpdatePublishedEventIds"),(0,l.kt)("p",null,"Returns a filtered array of publishedEventIds from all eventIds which are included in a bulkMatchUpStatusUpdate. publishedEventIds can be used to determine which events to re-publish."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { publishedEventIds } = engine.bulkUpdatePublishedEventIds({\n  outcomes,\n});\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"clearmatchupschedule"},"clearMatchUpSchedule"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"engine.clearMatchUpSchedule({\n  scheduleAttributes, // optional array of schedule constants\n  matchUpId,\n  drawId, // optional optimizes matchUp lookup, triggers drawModificationNotice\n});\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"clearscheduledmatchups"},"clearScheduledMatchUps"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"engine.clearScheduledMatchUps({\n  ignoreMatchUpStatuses, // optional - specify matchUpStatus values to be ignored; defaults to all completed matchUpStatuses\n  scheduleAttributes, // optional - specify which attributes should be considered; defaults to ['scheduledDate', 'scheduledTime']\n  scheduledDates, // optional - array of dates to be cleared; only matchUps with specified scheduledDate will be cleared\n  venueIds, // optional - array of venueIds; only matchUps at specified venues will be cleared\n});\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"matchupschedulechange"},"matchUpScheduleChange"),(0,l.kt)("p",null,"Swaps the schedule details of two scheduled matchUps."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"engine.matchUpScheduleChange({\n  courtDayDate: dateSelected,\n  sourceMatchUpContextIds,\n  targetMatchUpContextIds,\n  sourceCourtId,\n  targetCourtId,\n});\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"reorderupcomingmatchups"},"reorderUpcomingMatchUps"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const matchUpContextIds = [{ tournamentId, drawId, matchUpId }];\nengine.reorderUpcomingMatchUps({\n  matchUpContextIds,\n  firstToLast, // boolean - direction of reorder\n});\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"removematchupcourtassignment"},"removeMatchUpCourtAssignment"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"engine.removeMatchUpCourtAssignment({\n  tournamentId,\n  courtDayDate,\n  matchUpId,\n  drawId,\n});\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"schedulematchups"},"scheduleMatchUps"),(0,l.kt)("p",null,"Auto schedule matchUps on a given date using the Garman formula."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'engine.scheduleMatchUps({\n  scheduleDate, // date string in the format `YYYY-MM-DD`\n  startTime, // optional - if not provided will be derived from court availability for the tiven date\n  endTime, // optional - if not provided will be derived from court availability for the tiven date\n  venueIds, // optional - defaults to all known; if a single venueId is provided then all matchUps will be scheduled for that venue\n  matchUpIds, // array of matchUpIds; if no schedulingProfile is present will be auto-sorted by draw size and roundNumbers\n  periodLength = 30, // optional - size of scheduling blocks\n  averageMatchUpMinutes = 90, // optional - defaults to 90\n  recoveryMinutes = 0, // optional - amount of time participants are given to recover between matchUps\n  matchUpDailyLimits, // optional - policy declaration; SINGLES, DOUBLES and total limits per individual participant\n  checkPotentialRequestConflicts, // boolean - defaults to true - consider individual requests when matchUp participants are "potential"\n});\n')),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"scheduleprofilerounds"},"scheduleProfileRounds"),(0,l.kt)("p",null,"Auto-schedules all rounds which have been specified in a ",(0,l.kt)("inlineCode",{parentName:"p"},"schedulingProfile")," which has been saved to the tournamentRecord using ",(0,l.kt)("a",{parentName:"p",href:"#setschedulingprofile"},"engine.setSchedulingProfile"),". See ",(0,l.kt)("a",{parentName:"p",href:"/docs/concepts/scheduling-profile"},"Scheduling Profile"),"."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"SINGLES and DOUBLES ",(0,l.kt)("inlineCode",{parentName:"p"},"matchUps")," will be scheduled, but not TEAM ",(0,l.kt)("inlineCode",{parentName:"p"},"matchUps"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const result = engine.scheduleProfileRounds({\n  checkPotentialRequestConflicts, // boolean - defaults to true - consider individual requests when matchUp participants are "potential"\n  periodLength = 30, // optional - size of scheduling blocks\n  clearScheduleDates, // optional - boolean: true to clear ALL dates, otherwise array of scheduleDates to clear\n  scheduleDates, // optional array of dates to schedule\n  dryRun, // boolean - only report what would happen without making modifications\n  pro: // boolean - defaults to false; schedule specific courts without using garman\n});\n\nconst {\n  scheduledDates, // dates for which matchUps have been scheduled\n  scheduledMatchUpIds, // array of matchUpIds which have been scheduled\n  noTimeMatchUpIds, // array of matchUpids which have NOT been scheduled\n  overLimitMatchUpIds, // matchUps not scheduled because of participant daily limits\n  requestConflicts, // array of { date, conflicts } objects for each date in schedulingProfile\n} = result;\n')),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"setmatchupdailylimits"},"setMatchUpDailyLimits"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"engine.setMatchUpDailyLimits({\n  dailyLimits: { SINGLES: 2, DOUBLES: 1, total: 3 },\n  tournamentId, // optional - scope to a specific tournamentId\n});\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"setschedulingprofile"},"setSchedulingProfile"),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/concepts/scheduling-profile"},"Scheduling Profile"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"engine.setSchedulingProfile({ schedulingProfile });\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"validateschedulingprofile"},"validateSchedulingProfile"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { valid, error } = engine.validateSchedulingProfile({\n  schedulingProfile,\n});\n")))}h.isMDXComponent=!0}}]);