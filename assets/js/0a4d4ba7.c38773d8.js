(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[196],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6025:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d},default:function(){return c}});var a=n(2122),i=n(9756),r=(n(7294),n(3905)),o=["components"],s={name:"API",title:"Tournament Engine API"},l={unversionedId:"apis/tournament-engine-api",id:"apis/tournament-engine-api",isDocsHomePage:!1,title:"Tournament Engine API",description:"All tournamentEngine methods return either { success: true } or { error }",source:"@site/docs/apis/tournament-engine-api.md",sourceDirName:"apis",slug:"/apis/tournament-engine-api",permalink:"/tods-competition-factory/docs/apis/tournament-engine-api",version:"current",frontMatter:{name:"API",title:"Tournament Engine API"},sidebar:"docs",previous:{title:"Competition Engine API",permalink:"/tods-competition-factory/docs/apis/competition-engine-api"},next:{title:"Introduction",permalink:"/tods-competition-factory/docs/engines/draw-engine-introduction"}},d=[{value:"addCourt",id:"addcourt",children:[]},{value:"addCourts",id:"addcourts",children:[]},{value:"addDrawDefinition",id:"adddrawdefinition",children:[]},{value:"addDrawDefinitionExtension",id:"adddrawdefinitionextension",children:[]},{value:"addDrawEntries",id:"adddrawentries",children:[]},{value:"addEvent",id:"addevent",children:[]},{value:"addEventEntries",id:"addevententries",children:[]},{value:"addEventEntryPairs",id:"addevententrypairs",children:[]},{value:"addEventExtension",id:"addeventextension",children:[]},{value:"addFlight",id:"addflight",children:[]},{value:"addIndividualParticipantIds",id:"addindividualparticipantids",children:[]},{value:"addMatchUpEndTime",id:"addmatchupendtime",children:[]},{value:"addMatchUpOfficial",id:"addmatchupofficial",children:[]},{value:"addMatchUpResumeTime",id:"addmatchupresumetime",children:[]},{value:"addMatchUpScheduledDate",id:"addmatchupscheduleddate",children:[]},{value:"addMatchUpScheduledTime",id:"addmatchupscheduledtime",children:[]},{value:"addMatchUpScheduleItems",id:"addmatchupscheduleitems",children:[]},{value:"addMatchUpStartTime",id:"addmatchupstarttime",children:[]},{value:"addMatchUpStopTime",id:"addmatchupstoptime",children:[]},{value:"addParticipant",id:"addparticipant",children:[]},{value:"addParticipants",id:"addparticipants",children:[]},{value:"addPenalty",id:"addpenalty",children:[]},{value:"addPlayoffStructures",id:"addplayoffstructures",children:[]},{value:"addTournamentExtension",id:"addtournamentextension",children:[]},{value:"addVenue",id:"addvenue",children:[]},{value:"addVoluntaryConsolationStage",id:"addvoluntaryconsolationstage",children:[]},{value:"allEventMatchUps",id:"alleventmatchups",children:[]},{value:"allTournamentMatchUps",id:"alltournamentmatchups",children:[]},{value:"alternateDrawPositionAssignment",id:"alternatedrawpositionassignment",children:[]},{value:"assignDrawPosition",id:"assigndrawposition",children:[]},{value:"assignMatchUpCourt",id:"assignmatchupcourt",children:[]},{value:"assignMatchUpVenue",id:"assignmatchupvenue",children:[]},{value:"assignSeedPositions",id:"assignseedpositions",children:[]},{value:"assignTieMatchUpParticipantId",id:"assigntiematchupparticipantid",children:[]},{value:"attachEventPolicy",id:"attacheventpolicy",children:[]},{value:"attachPolicy",id:"attachpolicy",children:[]},{value:"automatedPositioning",id:"automatedpositioning",children:[]},{value:"autoSeeding",id:"autoseeding",children:[]},{value:"bulkMatchUpStatusUpdate",id:"bulkmatchupstatusupdate",children:[]},{value:"bulkScheduleMatchUps",id:"bulkschedulematchups",children:[]},{value:"bulkUpdatePublishedEventIds",id:"bulkupdatepublishedeventids",children:[]},{value:"checkInParticipant",id:"checkinparticipant",children:[]},{value:"checkOutParticipant",id:"checkoutparticipant",children:[]},{value:"deleteCourt",id:"deletecourt",children:[]},{value:"deleteDrawDefinitions",id:"deletedrawdefinitions",children:[]},{value:"deleteFlightAndFlightDraw",id:"deleteflightandflightdraw",children:[]},{value:"deleteFlightProfileAndFlightDraws",id:"deleteflightprofileandflightdraws",children:[]},{value:"deleteEvents",id:"deleteevents",children:[]},{value:"deleteParticipants",id:"deleteparticipants",children:[]},{value:"deleteVenue",id:"deletevenue",children:[]},{value:"deleteVenues",id:"deletevenues",children:[]},{value:"destroyGroupEntry",id:"destroygroupentry",children:[]},{value:"destroyPairEntry",id:"destroypairentry",children:[]},{value:"devContext",id:"devcontext",children:[]},{value:"eventMatchUps",id:"eventmatchups",children:[]},{value:"executionQueue",id:"executionqueue",children:[]},{value:"findCourt",id:"findcourt",children:[]},{value:"findDrawDefinitionExtension",id:"finddrawdefinitionextension",children:[]},{value:"findEventExtension",id:"findeventextension",children:[]},{value:"findMatchUp",id:"findmatchup",children:[]},{value:"findParticipant",id:"findparticipant",children:[]},{value:"findParticipantExtension",id:"findparticipantextension",children:[]},{value:"findPolicy",id:"findpolicy",children:[]},{value:"findTournamentExtension",id:"findtournamentextension",children:[]},{value:"findVenue",id:"findvenue",children:[]},{value:"generateDrawDefinition",id:"generatedrawdefinition",children:[]},{value:"generateFlightProfile",id:"generateflightprofile",children:[]},{value:"generateSeedingScaleItems",id:"generateseedingscaleitems",children:[]},{value:"generateTeamsFromParticipantAttribute",id:"generateteamsfromparticipantattribute",children:[{value:"generateVoluntaryConsolationStructure",id:"generatevoluntaryconsolationstructure",children:[]}]},{value:"getAllEventData",id:"getalleventdata",children:[]},{value:"getAllowedDrawTypes",id:"getalloweddrawtypes",children:[]},{value:"getAllowedMatchUpFormats",id:"getallowedmatchupformats",children:[]},{value:"getAvailablePlayoffRounds",id:"getavailableplayoffrounds",children:[]},{value:"getCourtInfo",id:"getcourtinfo",children:[]},{value:"getCourts",id:"getcourts",children:[]},{value:"getDrawData",id:"getdrawdata",children:[]},{value:"getDrawParticipantRepresentativeIds",id:"getdrawparticipantrepresentativeids",children:[]},{value:"getEntriesAndSeedsCount",id:"getentriesandseedscount",children:[]},{value:"getEvent",id:"getevent",children:[]},{value:"getEventAppliedPolicies",id:"geteventappliedpolicies",children:[]},{value:"getEvents",id:"getevents",children:[]},{value:"getEventProperties",id:"geteventproperties",children:[]},{value:"getEventData",id:"geteventdata",children:[]},{value:"getEventMatchUpFormatTiming",id:"geteventmatchupformattiming",children:[]},{value:"getMatchUpFormat",id:"getmatchupformat",children:[]},{value:"getMatchUpFormatTiming",id:"getmatchupformattiming",children:[]},{value:"getMatchUpFormatTimingUpdate",id:"getmatchupformattimingupdate",children:[]},{value:"getMatchUpScheduleDetails",id:"getmatchupscheduledetails",children:[]},{value:"getMatchUpDailyLimits",id:"getmatchupdailylimits",children:[]},{value:"getModifiedMatchUpFormatTiming",id:"getmodifiedmatchupformattiming",children:[]},{value:"getPairedParticipant",id:"getpairedparticipant",children:[]},{value:"getParticipantEventDetails",id:"getparticipanteventdetails",children:[]},{value:"getParticipantIdFinishingPositions",id:"getparticipantidfinishingpositions",children:[]},{value:"getParticipantMembership",id:"getparticipantmembership",children:[]},{value:"getParticipantScaleItem",id:"getparticipantscaleitem",children:[]},{value:"getParticipantSignInStatus",id:"getparticipantsigninstatus",children:[]},{value:"getPolicyDefinition",id:"getpolicydefinition",children:[]},{value:"getPositionAssignments",id:"getpositionassignments",children:[]},{value:"getScaledEntries",id:"getscaledentries",children:[]},{value:"getSeedsCount",id:"getseedscount",children:[]},{value:"getState",id:"getstate",children:[]},{value:"getTournamentParticipants",id:"gettournamentparticipants",children:[]},{value:"getTournamentPersons",id:"gettournamentpersons",children:[]},{value:"getTournamentPenalties",id:"gettournamentpenalties",children:[]},{value:"getTournamentInfo",id:"gettournamentinfo",children:[]},{value:"getVenues",id:"getvenues",children:[]},{value:"getVenueData",id:"getvenuedata",children:[]},{value:"isValidMatchUpFormat",id:"isvalidmatchupformat",children:[]},{value:"luckyLoserDrawPositionAssignment",id:"luckyloserdrawpositionassignment",children:[]},{value:"matchUpActions",id:"matchupactions",children:[]},{value:"mergeParticipants",id:"mergeparticipants",children:[]},{value:"modifyCourtAvailability",id:"modifycourtavailability",children:[]},{value:"modifyDrawName",id:"modifydrawname",children:[]},{value:"modifyEventMatchUpFormatTiming",id:"modifyeventmatchupformattiming",children:[]},{value:"modifyMatchUpFormatTiming",id:"modifymatchupformattiming",children:[]},{value:"modifyEntriesStatus",id:"modifyentriesstatus",children:[]},{value:"modifyEventEntries",id:"modifyevententries",children:[]},{value:"modifyIndividualParticipantIds",id:"modifyindividualparticipantids",children:[]},{value:"modifyParticipant",id:"modifyparticipant",children:[]},{value:"modifyPenalty",id:"modifypenalty",children:[]},{value:"modifyParticipantsSignInStatus",id:"modifyparticipantssigninstatus",children:[]},{value:"modifySeedAssignment",id:"modifyseedassignment",children:[]},{value:"modifyVenue",id:"modifyvenue",children:[]},{value:"newTournamentRecord",id:"newtournamentrecord",children:[]},{value:"participantScaleItem",id:"participantscaleitem",children:[]},{value:"positionActions",id:"positionactions",children:[]},{value:"publishEvent",id:"publishevent",children:[]},{value:"rankByRatings",id:"rankbyratings",children:[]},{value:"removeDrawDefinitionExtension",id:"removedrawdefinitionextension",children:[]},{value:"removeDrawPositionAssignment",id:"removedrawpositionassignment",children:[]},{value:"removeDrawEntries",id:"removedrawentries",children:[]},{value:"removeEventEntries",id:"removeevententries",children:[]},{value:"removeEventExtension",id:"removeeventextension",children:[]},{value:"removeEventMatchUpFormatTiming",id:"removeeventmatchupformattiming",children:[]},{value:"removeIndividualParticipantIds",id:"removeindividualparticipantids",children:[]},{value:"removeParticipantIdsFromAllTeams",id:"removeparticipantidsfromallteams",children:[]},{value:"removeParticipantExtension",id:"removeparticipantextension",children:[]},{value:"removePenalty",id:"removepenalty",children:[]},{value:"removeScaleValues",id:"removescalevalues",children:[]},{value:"removeSeeding",id:"removeseeding",children:[]},{value:"removeStructure",id:"removestructure",children:[]},{value:"removeTournamentExtension",id:"removetournamentextension",children:[]},{value:"setDrawDefaultMatchUpFormat",id:"setdrawdefaultmatchupformat",children:[]},{value:"setDrawParticipantRepresentativeIds",id:"setdrawparticipantrepresentativeids",children:[]},{value:"setEventDefaultMatchUpFormat",id:"seteventdefaultmatchupformat",children:[]},{value:"setEventDates",id:"seteventdates",children:[]},{value:"setEventEndDate",id:"seteventenddate",children:[]},{value:"setEventStartDate",id:"seteventstartdate",children:[]},{value:"setMatchUpDailyLimits",id:"setmatchupdailylimits",children:[]},{value:"setMatchUpStatus",id:"setmatchupstatus",children:[]},{value:"setParticipantScaleItem",id:"setparticipantscaleitem",children:[]},{value:"setParticipantScaleItems",id:"setparticipantscaleitems",children:[]},{value:"setStructureDefaultMatchUpFormat",id:"setstructuredefaultmatchupformat",children:[]},{value:"setState",id:"setstate",children:[]},{value:"setSubOrder",id:"setsuborder",children:[]},{value:"setTournamentCategories",id:"settournamentcategories",children:[]},{value:"setTournamentEndDate",id:"settournamentenddate",children:[]},{value:"setTournamentId",id:"settournamentid",children:[]},{value:"setTournamentName",id:"settournamentname",children:[]},{value:"setTournamentNotes",id:"settournamentnotes",children:[]},{value:"setTournamentStartDate",id:"settournamentstartdate",children:[]},{value:"toggleParticipantCheckInState",id:"toggleparticipantcheckinstate",children:[]},{value:"tournamentMatchUps",id:"tournamentmatchups",children:[]},{value:"unPublishEvent",id:"unpublishevent",children:[]},{value:"updateDrawIdsOrder",id:"updatedrawidsorder",children:[]},{value:"withdrawParticipantAtDrawPosition",id:"withdrawparticipantatdrawposition",children:[]},{value:"version",id:"version",children:[]}],p={toc:d};function c(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"All tournamentEngine methods return either ",(0,r.kt)("inlineCode",{parentName:"p"},"{ success: true }")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"{ error }")),(0,r.kt)("h2",{id:"addcourt"},"addCourt"),(0,r.kt)("p",null,"Add a court to a Venue. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/concepts/scheduling"},"Scheduling"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const court = {\n  altitude, // optional\n  courtDimensions, // optional\n  courtId, // generated automatically if not provided\n  courtName,\n  dateAvailability, // optional - see below\n  latitude, // optional\n  longitude, // optional\n  onlineResources,  // optional\n  pace, // optional - string;\n  surfaceCategory, SurfaceCategoryEnum;\n  surfaceType, // string; see: https://www.itftennis.com/en/about-us/tennis-tech/recognised-courts/\n  surfacedDate?: Date;\n}\ntournamentEngine.addCourt({ venueId, court });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addcourts"},"addCourts"),(0,r.kt)("p",null,"Convenience function to bulk add courts to a Venue. Only adds ",(0,r.kt)("strong",{parentName:"p"},"dataAvailability")," and ",(0,r.kt)("strong",{parentName:"p"},"courtName"),". See ",(0,r.kt)("a",{parentName:"p",href:"/docs/concepts/scheduling"},"Scheduling"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const dateAvailability = [\n  {\n    date: '2020-01-01T00:00', // if no date is provided then this profile will be used as default\n    startTime: '07:00',\n    endTime: '19:00',\n    bookings: [\n      { startTime: '07:00', endTime: '08:30', bookingType: 'PRACTICE' },\n      { startTime: '08:30', endTime: '09:00', bookingType: 'MAINTENANCE' },\n      { startTime: '13:30', endTime: '14:00', bookingType: 'MAINTENANCE' },\n    ],\n  },\n];\ntournamentEngine.addCourts({\n  venueId,\n  courtsCount: 3, // optional, can be added/modified later\n  courtNames: ['Court 1', 'Court 2', 'Court 3'], // optional\n  dateAvailability, // optional\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"adddrawdefinition"},"addDrawDefinition"),(0,r.kt)("p",null,"Adds a drawDefinition to an event in a tournamentRecord. Called after ",(0,r.kt)("a",{parentName:"p",href:"#generatedrawdefinition"},"generateDrawDefinition"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { drawDefinition, error } =\n  tournamentEngine.generateDrawDefinition(drawDefinitionValues);\nif (!error) {\n  const result = tournamentEngine.addDrawDefinition({\n    eventId,\n    drawDefinition,\n  });\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"adddrawdefinitionextension"},"addDrawDefinitionExtension"),(0,r.kt)("p",null,"Add an extension to a drawDefinition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addDrawDefinitionExtension({\n  extension: {\n    name: 'extension name',\n    value: {},\n  },\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"adddrawentries"},"addDrawEntries"),(0,r.kt)("p",null,"Bulk add an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"participantIds")," to a specific ",(0,r.kt)("strong",{parentName:"p"},"stage")," of a draw with a specific ",(0,r.kt)("strong",{parentName:"p"},"entryStatus"),". Will fail if ",(0,r.kt)("inlineCode",{parentName:"p"},"participantIds")," are not already present in ",(0,r.kt)("inlineCode",{parentName:"p"},"event.entries"),". Use ",(0,r.kt)("inlineCode",{parentName:"p"},"addEventEntries")," to add to both ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"drawDefinition")," at the same time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addDrawEntries({\n  drawId,\n  eventId,\n  participantIds,\n  entryStage: MAIN, // optional\n  entryStatus: ALTERNATE, // optional\n  autoEntryPositions, // optional - keeps entries ordered by entryStage/entryStatus and auto-increments\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addevent"},"addEvent"),(0,r.kt)("p",null,"Add an event object to a tournamentRecord."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addEvent({ event });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addevententries"},"addEventEntries"),(0,r.kt)("p",null,"Adds ",(0,r.kt)("inlineCode",{parentName:"p"},"participantIds")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"event.entries"),"; optionally pass drawId to add participantIds to ",(0,r.kt)("inlineCode",{parentName:"p"},"flightProfile.drawEntries")," at the same time."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Will ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"not"))," throw an error if unable to add entries into specified ",(0,r.kt)("inlineCode",{parentName:"p"},"flightProfile.drawEntries"),",\nwhich can occur if a ",(0,r.kt)("inlineCode",{parentName:"p"},"drawDefinition")," has already been generated and an attempt is made to add\na participant with ",(0,r.kt)("inlineCode",{parentName:"p"},"entryStatus: DIRECT_ACCEPTANCE"),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addEventEntries({\n  eventId,\n  participantIds,\n  stage: MAIN, // optional\n  entryStatus: ALTERNATE, // optional\n  autoEntryPositions, // optional - keeps entries ordered by entryStage/entryStatus and auto-increments\n  drawId, // optional - will add participantIds to specified flightProfile.flight[].drawEntries and drawDefinition.entries (if possible)\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addevententrypairs"},"addEventEntryPairs"),(0,r.kt)("p",null,"Add ",(0,r.kt)("strong",{parentName:"p"},"PAIR")," participant to an event. Creates new ",(0,r.kt)("inlineCode",{parentName:"p"},"{ participantType: PAIR }")," participants if the combination of ",(0,r.kt)("inlineCode",{parentName:"p"},"individualParticipantIds")," does not already exist."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addEventEntryPairs({\n  eventId,\n  participantIdPairs,\n  entryStatus: ALTERNATE, // optional\n  entryStage: QUALIFYING, // optional\n  uuids, // optional - array of UUIDs to use for newly created pairs\n  allowDuplicateParticipantIdPairs, // optional - boolean - allow multiple pair participants with the same individualParticipantIds\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addeventextension"},"addEventExtension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addEventExtension({\n  extension: {\n    name: 'extension name',\n    value: {},\n  },\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addflight"},"addFlight"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addFlight({\n  eventId,\n  stage,\n  drawName,\n  drawId, // optional -- if scenario involves client and server side tournamentEngines, provide { drawId: UUID() }\n  drawEntries, // optional\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addindividualparticipantids"},"addIndividualParticipantIds"),(0,r.kt)("p",null,"Adds individualParticipantIds to GROUP or TEAM participants"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addIndividualParticipantIds({\n  groupingParticipantId,\n  individualParticipantIds,\n  removeFromOtherTeams, // optional boolean\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addmatchupendtime"},"addMatchUpEndTime"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const endTime = '2020-01-01T09:05:00Z';\ntournamentEngine.addMatchUpEndTime({\n  drawId,\n  matchUpId,\n  endTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addmatchupofficial"},"addMatchUpOfficial"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addMatchUpOfficial({\n  drawId,\n  matchUpId,\n  participantId,\n  officialType,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addmatchupresumetime"},"addMatchUpResumeTime"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const resumeTime = '2020-01-01T09:00:00Z';\ntournamentEngine.addMatchUpResumeTime({\n  drawId,\n  matchUpId,\n  resumeTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addmatchupscheduleddate"},"addMatchUpScheduledDate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const scheduledDate = '2020-01-01';\ntournamentEngine.addMatchUpScheduledDate({\n  drawId,\n  matchUpId,\n  scheduledDate,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addmatchupscheduledtime"},"addMatchUpScheduledTime"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const scheduledTime = '08:00';\ntournamentEngine.addMatchUpScheduledTime({\n  drawId,\n  matchUpId,\n  scheduledTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addmatchupscheduleitems"},"addMatchUpScheduleItems"),(0,r.kt)("p",null,"Convenience function to add several schedule items at once."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addMatchUpScheduleItems({\n  drawId,\n  matchUpId,\n  schedule: {\n    courtId, // requires scheduledDate\n    venueId,\n    scheduledTime,\n    scheduledDate,\n    startTime,\n    endTime,\n  },\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addmatchupstarttime"},"addMatchUpStartTime"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const startTime = '2020-01-01T08:05:00Z';\ntournamentEngine.addMatchUpStartTime({\n  drawId,\n  matchUpId,\n  startTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addmatchupstoptime"},"addMatchUpStopTime"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const stopTime = '2020-01-01T08:15:00Z';\ntournamentEngine.addMatchUpStopTime({\n  drawId,\n  matchUpId,\n  stopTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addparticipant"},"addParticipant"),(0,r.kt)("p",null,"Adds an INDIVIDUAL, PAIR or TEAM participant to tournament participants. Includes integrity checks for ",(0,r.kt)("inlineCode",{parentName:"p"},"{ participantType: PAIR }")," to insure ",(0,r.kt)("inlineCode",{parentName:"p"},"participant.individualParticipantIds")," are valid."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const participantId = UUID();\nconst participant = {\n  participantId, // automatically generated if not provided\n  participantRole: COMPETITOR,\n  participantType: INDIVIDUAL,\n  person: {\n    standardFamilyName: 'Family',\n    standardGivenName: 'Given',\n    nationalityCode, // optional\n    sex, // optional\n  },\n};\n\ntournamentEngine.addParticipant({ participant });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addparticipants"},"addParticipants"),(0,r.kt)("p",null,"Bulk add participants to a tournamentRecord."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addParticipants({ participants });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addpenalty"},"addPenalty"),(0,r.kt)("p",null,"Add a penaltyItem to one or more participants."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const createdAt = new Date().toISOString();\nconst penaltyData = {\n  refereeParticipantId, // optional\n  participantIds: [participantId],\n  penaltyType: BALL_ABUSE,\n  penaltyCode: 'Organization specific code', // optional\n  matchUpId,\n  issuedAt, // optional ISO timeStamp for time issued to participant\n  createdAt,\n  notes: 'Hit ball into sea',\n};\nlet result = tournamentEngine.addPenalty(penaltyData);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addplayoffstructures"},"addPlayoffStructures"),(0,r.kt)("p",null,"Adds playoff structures to an existing drawDefinition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addPlayoffStructures({\n  drawId,\n  structureId,\n  roundNumbers: [3], // required if no playoffPositions - source roundNumbers which will feed target structures, e.g. [1, 2]\n  roundProfiles, // optional - source roundNumbers as Object.keys with depth as Object.values, e.g. [{ 1: 2}, {2: 1}]\n  playoffPositions: [3, 4], // required if not provided roundNumbers\n  playoffAttributes, // optional - object mapping exitProfiles to structure names, e.g. 0-1-1 for SOUTH\n  exitProfileLimit, // limit playoff rounds generated by the attributes present in playoffAttributes\n  playoffStructureNameBase, // optional - base word for default playoff naming, e.g. 'Playoff'\n});\n\n// example use of playoffAttributes - will generated playoff structure from 2nd round with structureName: 'bronze'\nconst playoffAttributes = {\n  '0-2': { name: 'BRONZE', abbreviation: 'B' },\n};\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addtournamentextension"},"addTournamentExtension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addTournamentExtension({\n  extension: {\n    name: 'extension name',\n    value: {},\n  },\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addvenue"},"addVenue"),(0,r.kt)("p",null,"Adds ",(0,r.kt)("strong",{parentName:"p"},"venueId")," if not provided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addVenue({ venue: { venueName } });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"addvoluntaryconsolationstage"},"addVoluntaryConsolationStage"),(0,r.kt)("p",null,"Modifies the entryProfile for a draw to allow ",(0,r.kt)("inlineCode",{parentName:"p"},"{ entryStage: VOLUNTARY_CONSOLATION }")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.addVoluntaryConsolationStage({\n  drawId,\n  drawSize,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"alleventmatchups"},"allEventMatchUps"),(0,r.kt)("p",null,"Returns all matchUps for an event."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { matchUps } = allEventMatchUps({\n  eventId,\n  inContext: true, // include contextual details\n  nextMatchUps: true, // include winner/loser target matchUp details\n  matchUpFilters, // optional; [ scheduleDates: [], c]urtIds: [], s]ages: [], r]undNumbers: [], matchUpStatuses: [], matchUpFormats: []]\n  scheduleVisibilityFilters,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"alltournamentmatchups"},"allTournamentMatchUps"),(0,r.kt)("p",null,"Return an array of all matchUps contained within a tournament. These matchUps are returned ",(0,r.kt)("strong",{parentName:"p"},"inContext"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { matchUps } = tournamentEngine.allTournamentMatchUps({\n  scheduleVisibilityFilters,\n  matchUpFilters, // optional; [ scheduleDates: [], c]urtIds: [], s]ages: [], r]undNumbers: [], matchUpStatuses: [], matchUpFormats: []]\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"alternatedrawpositionassignment"},"alternateDrawPositionAssignment"),(0,r.kt)("p",null,"Replaces an existing drawPosition assignment with an alternateParticipantId. This method is included in ",(0,r.kt)("inlineCode",{parentName:"p"},"validActions")," for ",(0,r.kt)("a",{parentName:"p",href:"../policies/positionActions"},"positionActions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.alternateDrawPositionAssignment({\n  drawId,\n  structureId,\n  drawPosition,\n  alternateParticipantId,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"assigndrawposition"},"assignDrawPosition"),(0,r.kt)("p",null,"Low level function normally called by higher order convenience functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.assignDrawPosition({\n  drawId,\n  structureId,\n  drawPosition,\n  participantId, // optional - if assigning position to a participant\n  qualifier, // optional boolean, if assigning a space for a qualifier\n  bye, // optional boolean, if assigning a bye\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"assignmatchupcourt"},"assignMatchUpCourt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.assignMatchUpCourt({\n  drawId, // drawId where matchUp is found\n  matchUpId,\n  courtId,\n  courtDayDate, // ISO date string\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"assignmatchupvenue"},"assignMatchUpVenue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.assignMatchUVenue({\n  drawId, // drawId where matchUp is found\n  matchUpId,\n  venueId,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"assignseedpositions"},"assignSeedPositions"),(0,r.kt)("p",null,"Assign ",(0,r.kt)("strong",{parentName:"p"},"seedNumbers")," to ",(0,r.kt)("strong",{parentName:"p"},"participantIds")," within a target draw structure."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Provides the ability to assign seeding ",(0,r.kt)("em",{parentName:"li"},"after")," a structure has been generated"),(0,r.kt)("li",{parentName:"ul"},"To be used ",(0,r.kt)("em",{parentName:"li"},"before")," participants are positioned")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"seedNumber")," is unique while ",(0,r.kt)("strong",{parentName:"p"},"seedValue")," can be any string representation, e.g ",(0,r.kt)("inlineCode",{parentName:"p"},'"5-8"')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let assignments = [{ seedNumber: 1, seedValue: 1, participantId }];\ntournamentEngine.assignSeedPositions({\n  eventId,\n  drawId,\n  structureId,\n  assignments,\n\n  stage, // opional; defaults to { stage: MAIN }\n  stageSequence, // optional; defaults to { stageSequence: 1 }\n  useExistingSeedLimits, // optional; restrict ability to assign seedNumbers beyond established limit\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"assigntiematchupparticipantid"},"assignTieMatchUpParticipantId"),(0,r.kt)("p",null,"Used when interactively creating ",(0,r.kt)("inlineCode",{parentName:"p"},"{ participantType: PAIR }")," participants."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"attacheventpolicy"},"attachEventPolicy"),(0,r.kt)("p",null,"Attaches a policy to an event within a tournamentRecord."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"../concepts/policies"},"Policies"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.attachEventPolicy({\n  eventId,\n  policyDefinition: SEEDING_POLICY,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"attachpolicy"},"attachPolicy"),(0,r.kt)("p",null,"Attaches a policy to a tournamentRecord."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"../concepts/policies"},"Policies"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.attachPolicy({ policyDefinition: SEEDING_POLICY });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"automatedpositioning"},"automatedPositioning"),(0,r.kt)("p",null,"Positions participants in a draw structure."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"../concepts/policies"},"Policies"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.automatedPositioning({ drawId, structureId });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"autoseeding"},"autoSeeding"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { scaleItemsWithParticipantIds } = tournamentEngine.autoSeeding({\n  eventId,\n  policyDefinition, // seeding policyDefinition determines the # of seeds for given participantCount/drawSize\n  scaleAttributes, // { scaleType, scaleName, }\n  scaleName, // Optional - defaults to scaleAttributes.scaleName\n  drawSize, // Optional - defaults to calculation based on # of entries\n  drawId, // Optional - will use flight.drawEntries or drawDefinition.entries rather than event.entries\n  stage, // Optional - filters entries by specified stage\n\n  scaleSortMethod, // Optional - user defined sorting method\n  sortDescending, // Optional - defaults to false\n});\n\ntournamentEngine.setParticipantScaleItems({\n  scaleItemsWithParticipantIds,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"bulkmatchupstatusupdate"},"bulkMatchUpStatusUpdate"),(0,r.kt)("p",null,"Provides the ability to update the outcomes of multiple matchUps at once."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const outcomes = [\n  {\n    eventId,\n    drawId,\n    matchUpId,\n    matchUpFormat,\n    matchUpStatus,\n    winningSide,\n    score,\n  },\n];\ntournamentEngine.bulkMatchUpStatusUpdate({ outcomes });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"bulkschedulematchups"},"bulkScheduleMatchUps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const schedule = {\n  scheduledTime: '08:00',\n  scheduledDate: '2021-01-01T00:00', // best practice to provide ISO date string\n  venueId,\n};\ntournamentEngine.bulkScheduleMatchUps({ matchUpIds, schedule });\n")),(0,r.kt)("h2",{id:"bulkupdatepublishedeventids"},"bulkUpdatePublishedEventIds"),(0,r.kt)("p",null,"Returns a filtered array of publishedEventIds from all eventIds which are included in a bulkMatchUpStatusUpdate. publishedEventIds can be used to determine which events to re-publish."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { publishedEventIds } = tournamentEngine.bulkUpdatePublishedEventIds({\n  outcomes,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"checkinparticipant"},"checkInParticipant"),(0,r.kt)("p",null,"Set the check-in state for a participant. Used to determine when both participants in a matchUp are available to be assigned to a court."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.checkInParticipant({\n  drawId,\n  matchUpId,\n  participantId,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"checkoutparticipant"},"checkOutParticipant"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.checkOutParticipant({\n  drawId,\n  matchUpId,\n  participantId,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"deletecourt"},"deleteCourt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.deleteCourt({\n  courtId,\n  force, // override warnings about matchUps scheduled on specified court\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"deletedrawdefinitions"},"deleteDrawDefinitions"),(0,r.kt)("p",null,"Remove drawDefinitions from an event. An audit timeItem is added to the tournamentRecord whenever this method is called."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.deleteDrawDefinitions({\n  eventId,\n  drawIds: [drawId],\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"deleteflightandflightdraw"},"deleteFlightAndFlightDraw"),(0,r.kt)("p",null,"Removes flight from event's flightProfile as well as associated drawDefinition (if generated)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.deleteFlightAndFlightDraw({ eventId, drawId });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"deleteflightprofileandflightdraws"},"deleteFlightProfileAndFlightDraws"),(0,r.kt)("p",null,"Removes flightProfiles and all associated drawDefinitions from a specified event."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.deleteFlightProfileAndFlightDraws({ eventId });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"deleteevents"},"deleteEvents"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.deleteEvents({ eventIds });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"deleteparticipants"},"deleteParticipants"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.deleteParticipants({ paricipantIds });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"deletevenue"},"deleteVenue"),(0,r.kt)("p",null,"If a venue has scheduled matchUps then it will not be deleted unless ",(0,r.kt)("inlineCode",{parentName:"p"},"{ force: true }")," in which case all relevant matchUps will be unscheduled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.deleteVenue({ venueId, force });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"deletevenues"},"deleteVenues"),(0,r.kt)("p",null,"If a venue has scheduled matchUps then it will not be deleted unless ",(0,r.kt)("inlineCode",{parentName:"p"},"{ force: true }")," in which case all relevant matchUps will be unscheduled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.deleteVenues({ venueIds, force });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"destroygroupentry"},"destroyGroupEntry"),(0,r.kt)("p",null,'Removes a "grouping" entry from a event and adds the ',(0,r.kt)("inlineCode",{parentName:"p"},"individualParticipantIds")," to entries. Grouping entries are ",(0,r.kt)("inlineCode",{parentName:"p"},"participantType")," ",(0,r.kt)("strong",{parentName:"p"},"TEAM")," and ",(0,r.kt)("strong",{parentName:"p"},"PAIR"),", both of which include ",(0,r.kt)("inlineCode",{parentName:"p"},"individualParticipantIds"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.destroyGroupEntry({\n  participantId,\n  eventId,\n\n  entryStatus, // optional - new entryStatus for individualParticipantIds\n  removeGroupParticipant, // optional - removes group participant from tournament participants\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"destroypairentry"},"destroyPairEntry"),(0,r.kt)("p",null,"Removes a ",(0,r.kt)("inlineCode",{parentName:"p"},"{ participantType: PAIR }")," entry from an event and adds the individualParticipantIds to entries as entryStatus: UNGROUPED"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.destroyPairEntry({\n  eventId,\n  participantId,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"devcontext"},"devContext"),(0,r.kt)("p",null,"Setting devContext(true) bypasses ",(0,r.kt)("strong",{parentName:"p"},"try {} catch (err) {}")," code block and in some cases enables enhanced logging"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.devContext(true);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"eventmatchups"},"eventMatchUps"),(0,r.kt)("p",null,"Returns matchUps for an event grouped by status."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  abandonedMatchUps,\n  byeMatchUps,\n  completedMatchUps,\n  pendingMatchUps,\n  upcomingMatchUps,\n} = tournamentEngine.eventMatchUps({\n  eventId,\n  nextMatchUps, // optional boolean; include winner/loser target matchUp details\n  matchUpFilters, // optional; [ scheduleDates: [], c]urtIds: [], s]ages: [], r]undNumbers: [], matchUpStatuses: [], matchUpFormats: []]\n  contextFilters,\n  tournamentAppliedPolicies,\n  scheduleVisibilityFilters,\n  inContext: true, // optional - adds context details to all matchUps\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"executionqueue"},"executionQueue"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"executionQueue")," method accepts an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentEngine")," methods and associated parameters,\nallowing for multiple queries or mutations in a single API call, which is significant if a client is making a\nrequest of a server and the server needs to prepare context by loading a tournament record."),(0,r.kt)("p",null,"An additional benefit of the ",(0,r.kt)("inlineCode",{parentName:"p"},"executionQueue")," is that subscribers to ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentEngine")," events are not notified\nuntil all methods in the queue have completed successfully, and a failure of any one method can be used to roll back state\nwith the assurance that there are no side-effects caused by subscribers responding to notifications. This also means\nthat the server context can not be blocked by any long-running external processes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const result = tournamentEngine.executionQueue([\n  {\n    method: 'getTournamentParticipants',\n    params: { participantFilters: { participantTypes: [PAIR] } },\n  },\n  {\n    method: 'getTournamentParticipants',\n    params: { participantFilters: { participantTypes: [INDIVIDUAL] } },\n  },\n]);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"findcourt"},"findCourt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { court, venue } = tournamentEngine.findCourt({ courtId });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"finddrawdefinitionextension"},"findDrawDefinitionExtension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { extension } = tournamentEngine.findDrawDefinitionExtension({\n  drawId,\n  eventId,\n  name,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"findeventextension"},"findEventExtension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { extension } = tournamentEngine.findEventExtension({ eventId, name });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"findmatchup"},"findMatchUp"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  matchUp,\n  structure, // returned for convenience\n} = tournamentEngine.findMatchUp({\n  drawId,\n  matchUpId,\n  inContext, // optional - boolean - returns matchUp with additional attributes\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"findparticipant"},"findParticipant"),(0,r.kt)("p",null,"Find tournament participant by either ",(0,r.kt)("inlineCode",{parentName:"p"},"participantId")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"personId"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { participant } = tournamentEngine.findParticipant({\n  participantId,\n  personId, // required only if no participantId provided\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"findparticipantextension"},"findParticipantExtension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { extension } = tournamentEngine.findParticipantExtension({\n  participantId,\n  name,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"findpolicy"},"findPolicy"),(0,r.kt)("p",null,"Find ",(0,r.kt)("inlineCode",{parentName:"p"},"policyType")," either on an event object or the tournamentRecord."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { policy } = tournamentEngine.findPolicy({\n  policyType: POLICY_TYPE_SCORING,\n  eventId, // optional\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"findtournamentextension"},"findTournamentExtension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { extension } = tournamentEngine.findTournamentExtension({ name });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"findvenue"},"findVenue"),(0,r.kt)("p",null,"Returns a complete venue object. Primarily used internally."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.findVenue({ venueId });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"generatedrawdefinition"},"generateDrawDefinition"),(0,r.kt)("p",null,"This is a convenience method which handles most use cases for draw generation."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"automated"),' parameter is "truthy" and supports placing only seeded participants and any byes which are adjacent to seeded positions.\nSupport for this scenario is provided to enable some unique positioning strategies where unseeded participants have some agency in the selection process.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const drawDefinitionValues = {\n  eventId, // optional - used to find any avoidance policies to be applied\n  drawSize, // number of drawPositions in the first draw structure\n  drawType, // optional - defaults to SINGLE_ELIMINATION\n  drawName, // cutom name for generated draw structure(s)\n  automated, // optional - whether or not to automatically place participants in structures; true/false or 'truthy' { seedsOnly: true }\n  matchUpType, // optional - SINGLES, DOUBLES, or TEAM\n  matchUpFormat, // optional - default matchUpFormatCode for all contained matchUps\n  playoffMatchUpFormat, // optional - relevant for ROUND_ROBIN_WITH_PLAYOFFS\n  tieFormat, // optional - { collectionDefinitions, winCriteria } for 'dual' or 'tie' matchUps\n  seedsCount, // optional - number of seeds to generate if no seededParticipants provided\n  seededParticipants, // optional - { participantId, seedNumber, seedValue }\n  seedingScaleName, // optional - custom scale for determining seeded participants\n  seedingProfile, // optional - used to specify WATERFALL seeding for ROUND_ROBIN\n  qualifyingRound, // optional - used to derive roundLimit\n  structureOptions, // optional - for ROUND_ROBIN - { groupSize, playoffGroups }\n  staggeredEntry, // optional - accepts non-base-2 drawSizes and generates feed arms for \"extra\" drawPositions\n  policyDefinitions, // optional - seeding or avoidance policies to be used when placing participants\n  qualifyingPositions, // optional - number of positions in draw structure to be filled by qualifiers\n  finishingPositionNaming, // optional - map of { [finishingPositionRange]: { name: 'customName', abbreviation: 'A' } }\n  enforcePolicyLimits, // optional - defaults to true - constrains seedsCount to policyDefinition limits\n};\n\nconst { drawDefinition } =\n  tournamentEngine.generateDrawDefinition(drawDefinitionValues);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"generateflightprofile"},"generateFlightProfile"),(0,r.kt)("p",null,"Splits event entries into ",(0,r.kt)("inlineCode",{parentName:"p"},"flightsCount")," (# of draws). ",(0,r.kt)("inlineCode",{parentName:"p"},"flightProfile")," is an extension on an event which contains attributes to be used by ",(0,r.kt)("inlineCode",{parentName:"p"},"generateDrawDefinition"),"."),(0,r.kt)("p",null,"NOTE: The method returns ",(0,r.kt)("inlineCode",{parentName:"p"},"{ flightProfile, splitEntries }")," for testing; ",(0,r.kt)("inlineCode",{parentName:"p"},"splitEntries")," provides a breakdown on how ",(0,r.kt)("inlineCode",{parentName:"p"},"event.entries")," were split across each ",(0,r.kt)("inlineCode",{parentName:"p"},"flight")," within the ",(0,r.kt)("inlineCode",{parentName:"p"},"event"),"."),(0,r.kt)("p",null,"For an explanation of ",(0,r.kt)("inlineCode",{parentName:"p"},"scaleAttributes")," see ",(0,r.kt)("a",{parentName:"p",href:"../concepts/scaleItems"},"Scale Items"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const scaleAttributes = {\n  scaleType: RATING,\n  eventType: SINGLES,\n  scaleName: 'WTN',\n  accessor, // optional - string determining how to access attribute if scaleValue is an object\n};\n\nconst { flightProfile, splitEntries } = tournamentEngine.generateFlightProfile({\n  eventId, // event for which entries will be split\n  scaleAttributes, // defines participant sort method prior to split\n  scaleSortMethod, // optional - function(a, b) {} sort method, useful when scaleValue is an object or further proessing is required\n  sortDescending, // optional - default sorting is ASCENDING; only applies to default sorting method.\n  flightsCount: 3, // number of draws to be created\n  deleteExisting: true, // optional - remove existing flightProfile\n  splitMethod: SPLIT_WATERFALL, // optional - defaults to SPLIT_LEVEL_BASED\n  drawNames: ['Green Flight', 'Blue Flight'], // optional\n  drawNameRoot: 'Flight', // optional - used to generate drawNames, e.g. 'Flight 1', 'Flight 2'\n});\n\nconst {\n  flights: [\n    {\n      drawId, // unique identifier for generating drawDefinitions\n      drawName, // custom name for generated draw\n      drawEntries, // entries allocated to target draw\n    },\n  ],\n} = flightProfile;\n\n// use flight information to generate drawDefinition\nconst {\n  flights: [flight],\n} = flightProfile;\n\nObject.assign(drawDefinitionValues, flight);\nconst { drawDefinition } =\n  tournamentEngine.generateDrawDefinition(drawDefinitionValues);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"generateseedingscaleitems"},"generateSeedingScaleItems"),(0,r.kt)("p",null,"Used in conjunction with ",(0,r.kt)("inlineCode",{parentName:"p"},"getEntriesAndSeedsCount")," when it is necessary to make use of a custom function for generating ",(0,r.kt)("inlineCode",{parentName:"p"},"scaledEntries"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { scaleItemsWithParticipantIds } =\n  tournamentEngine.generateSeedingScaleItems({\n    scaledEntries,\n    seedsCount,\n    scaleAttributes,\n    scaleName,\n    stageEntries,\n  });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"generateteamsfromparticipantattribute"},"generateTeamsFromParticipantAttribute"),(0,r.kt)("p",null,"Uses attributes of individual participnts or persons to generate ",(0,r.kt)("inlineCode",{parentName:"p"},"{ participantType: TEAM }")," participants."),(0,r.kt)("p",null,"Returns count of # of TEAM participants added;"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { participantsAdded } =\n  tournamentEngine.generateTeamsFromParticipantAttribute({\n    participantAttribute,\n    personAttribute, // optional - attribute of person object\n    uuids, // optional - uuids to assign to generated participants\n  });\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"generatevoluntaryconsolationstructure"},"generateVoluntaryConsolationStructure"),(0,r.kt)("p",null,"Generates a new structure within a ",(0,r.kt)("inlineCode",{parentName:"p"},"drawDefinition")," if any draw entries are present for ",(0,r.kt)("inlineCode",{parentName:"p"},"{ entryStage: VOLUNTARY_CONSOLATION }"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.generateVoluntaryConsolationStructure({\n  drawId,\n  automated: true, // optional\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getalleventdata"},"getAllEventData"),(0,r.kt)("p",null,"Returns all ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUps")," for all draws in all events along with ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentInfo"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"eventInfo"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"drawInfo"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { allEventData } = tournamentEngine.getAllEventData({\n  policyDefinition, // optional - allows participant data to be filtered via a privacy policy\n});\n\nconst { tournamentInfo, eventsData, venuesData } = allEventData;\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getalloweddrawtypes"},"getAllowedDrawTypes"),(0,r.kt)("p",null,"Returns an array of names of allowed Draw Types, if any applicable policies have been applied to the tournamentRecord."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const drawTypes = tournamentEngine.getAllowedDrawTypes();\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getallowedmatchupformats"},"getAllowedMatchUpFormats"),(0,r.kt)("p",null,"Returns an array of TODS matchUpFormat codes for allowed scoring formats, if any applicable policies have been applied to the tournamentRecord."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const drawTypes = tournamentEngine.getAllowedMatchUpFormats();\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getavailableplayoffrounds"},"getAvailablePlayoffRounds"),(0,r.kt)("p",null,"If provided a ",(0,r.kt)("inlineCode",{parentName:"p"},"structureId"),", returns rounds of the selected structure which are available for adding playoff structures."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { playoffRounds, playoffRoundsRanges, positionsPlayedOff } =\n  tournamentEngine.getAvailablePlayoffRounds({\n    drawId,\n    structureId,\n  });\n")),(0,r.kt)("p",null,"...For a SINGLE_ELIMINATION struture with drawSize: 16 this would return:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"    {\n      playoffRounds: [ 1, 2, 3 ],\n      playoffRoundsRanges: [\n        { round: 1, range: '9-16' },\n        { round: 2, range: '5-8' },\n        { round: 3, range: '3-4' }\n      ]\n    }\n\n")),(0,r.kt)("p",null,"When no ",(0,r.kt)("inlineCode",{parentName:"p"},"structureId")," is provided, returns an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"availablePlayoffRounds")," with entries for each structure in a specified ",(0,r.kt)("inlineCode",{parentName:"p"},"drawDefinition"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { availablePlayoffRounds, positionsPlayedOff } =\n  tournamentEngine.getAvailablePlayoffRounds({ drawId });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getcourtinfo"},"getCourtInfo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  altitude,\n  courtId,\n  courtName,\n  courtDimensions,\n  latitude,\n  longitude,\n  surfaceCategory,\n  surfaceType,\n  surfaceDate,\n  pace,\n  notes,\n} = tournamentEngine.getCourtInfo({ courtId });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getcourts"},"getCourts"),(0,r.kt)("p",null,"Returns courts associated with a tournaments; optionall filter by venue(s)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { courts } = tournamentEngine.getCourts({\n  venueId, // optional - return courts for a specific venue\n  venueIds, // optional - return courts for specified venues\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getdrawdata"},"getDrawData"),(0,r.kt)("p",null,"Primarily used by ",(0,r.kt)("inlineCode",{parentName:"p"},"getEventData")," for publishing purposes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  drawInfo: {\n    drawActive, // boolean - draw has active matchUps\n    drawCompleted, // boolean - all draw matchUps are complete\n    drawGenerated, // boolean - draw has structures containing matchUps\n    participantPlacements, // boolean - whether any participants have been placed in the draw\n  },\n  structures,\n} = tournamentEngine.getDrawData({ drawDefinition });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getdrawparticipantrepresentativeids"},"getDrawParticipantRepresentativeIds"),(0,r.kt)("p",null,"Get the participantIds of participants in the draw who are representing players by observing the creation of the draw."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { representativeParticipantIds } =\n  tournamentEngine.getDrawParticipantRepresentativeIds({\n    drawId,\n  });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getentriesandseedscount"},"getEntriesAndSeedsCount"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { error, entries, seedsCount, stageEntries } =\n  tournamentEngine.getEntriesAndSeedsCount({\n    eventId,\n    policyDefinition, // seeding policy which determines # of seeds for # of participants/drawSize\n\n    drawSize, // optional - overrides number calculaed from entries in either event or draw\n    drawId, // optional - scopes entries to a specific flight/drawDefinition\n    stage, // optional - scopes entries to a specific stage\n  });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getevent"},"getEvent"),(0,r.kt)("p",null,"Get an event by either its ",(0,r.kt)("inlineCode",{parentName:"p"},"eventId")," or by a ",(0,r.kt)("inlineCode",{parentName:"p"},"drawId")," which it contains. Also returns ",(0,r.kt)("inlineCode",{parentName:"p"},"drawDefinition")," if a ",(0,r.kt)("inlineCode",{parentName:"p"},"drawId")," is specified."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  event,\n  drawDefinition, // only returned if drawId is specified\n} = tournamentEngine.getEvent({\n  eventId, // optional - find event by eventId\n  drawId, // optional - find the event which contains specified drawId\n});\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"@param {string} eventId - id of the event to retreive"),(0,r.kt)("li",{parentName:"ul"},"@param {object} context - attributes to be added into each event object.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"geteventappliedpolicies"},"getEventAppliedPolicies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { appliedPolicies } = tournamentEngine.getEventAppliedPolicies({\n  eventId,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getevents"},"getEvents"),(0,r.kt)("p",null,"Return ",(0,r.kt)("strong",{parentName:"p"},"deepCopies")," of all events in a tournament record."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { events } = tournamentEngine.getEvents();\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"geteventproperties"},"getEventProperties"),(0,r.kt)("p",null,"Gather attributes of events which come from other tournament elements, e.g. participants which have rankings/ratings/seedings for a given event."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  entryScaleAttributes,\n  hasSeededParticipants,\n  hasRankedParticipants,\n  hasRatedParticipants,\n} = tournamentEngine.getEventProperties({ eventId });\n")),(0,r.kt)("p",null,"... where ",(0,r.kt)("strong",{parentName:"p"},"entryScaleAttributes")," is an array of { prticipantId, participantName, seed, ranking, rating }"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"geteventdata"},"getEventData"),(0,r.kt)("p",null,"Returns event information optimized for publishing: ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUps")," have context and separated into rounds for consumption by visualization libraries such as ",(0,r.kt)("inlineCode",{parentName:"p"},"tods-react-draws"),"."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"#publishEvent"},"publishEvent")," for details on ",(0,r.kt)("inlineCode",{parentName:"p"},"policyDefinition"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { eventData } = tournamentEngine.getEventData({\n  drawId,\n  policyDefinition, // optional\n});\nconst { drawsData, venuesData, eventInfo, tournamentInfo } = eventData;\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"geteventmatchupformattiming"},"getEventMatchUpFormatTiming"),(0,r.kt)("p",null,"Method is used internally in advanced scheduling to determine averageMatchUp times for matchUps within an event."),(0,r.kt)("p",null,"Requires an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUpFormats")," either be defined in scoring policy that is attached to the tournamentRecord or an event, or passed in as parameter. ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUpFormats")," can be passed either as an array of strings, or an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"[{ matchUpFormat }]"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { eventMatchUpFormatTiming } =\n  tournamentEngine.getEventMatchUpFormatTiming({\n    matchUpFormats, // optional - can be retrieved from policy\n    categoryType, // optional - categoryType is not part of TODS or event attributes, but can be defined in a policy\n    eventId,\n  });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getmatchupformat"},"getMatchUpFormat"),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUpFormat")," codes for specified context(s). Refer to ",(0,r.kt)("inlineCode",{parentName:"p"},"getMatchUpFormat.test.js")," for specfic use cases."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"matchUpFormat")," for each matchUp is determined by traversing the hierarchy: ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUp => stucture => drawDefinition => event")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  matchUpFormat,\n  structureDefaultMatchUpFormat,\n  drawDefaultMatchUpFormat,\n  eventDefaultMatchUpFormat,\n} = tournamentEngine.getMatchUpFormat({\n  eventId,\n  drawId,\n  structureId,\n  matchUpId,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getmatchupformattiming"},"getMatchUpFormatTiming"),(0,r.kt)("p",null,"Searches for policy definitions or extensions to determine the ",(0,r.kt)("inlineCode",{parentName:"p"},"averageMinutes")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"recoveryMinutes")," for a given ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUpFormat"),". Extensions are considered to be overrides of policy definitions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { averageMinutes, recoveryMinutes } =\n  tournamentEngine.getMatchUpFormatTiming({\n    defaultAverageMinutes, // optional setting if no matching definition found\n    defaultRecoveryMinutes, // optional setting if no matching definition found\n    matchUpFormat,\n    categoryName, // optional\n    categoryType, // optional\n    eventType, // optional - defaults to SINGLES; SINGLES, DOUBLES\n    eventId, // optional - prioritizes policy definition attached to event before tournament record\n  });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getmatchupformattimingupdate"},"getMatchUpFormatTimingUpdate"),(0,r.kt)("p",null,'Returns an array of methods/params necessary for updating a remote instance of a tournamentRecord to match a local instance. This method enables multiple "provisional" updates to be made on a local document without contacting a server; support deployments where a server is considered "master".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { methods } = tournamentEngine.getMatchUpFormatTimingUpdate();\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getmatchupscheduledetails"},"getMatchUpScheduleDetails"),(0,r.kt)("p",null,"Returns the latest values for all ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUp.timeItems"),", along with calculated values, that relate to the scheduling of a ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUp"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  schedule: {\n    time,\n    courtId,\n    venueId,\n    startTime,\n    endTime,\n    milliseconds,\n    scheduledDate,\n    scheduledTime,\n  },\n} = tournamentEngine.getMatchUpScheduleDetails({\n  scheduleVisibilityFilters,\n  matchUp,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getmatchupdailylimits"},"getMatchUpDailyLimits"),(0,r.kt)("p",null,"Returns player daily match limits for singles/doubles/total matches."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { matchUpDailyLimits } = tournamentId.getMatchUpDailyLimits();\nconst { DOUBLES, SINGLES, total } = matchUpDailyLimits;\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getmodifiedmatchupformattiming"},"getModifiedMatchUpFormatTiming"),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"averageTimes")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"recoveryTimes")," configuration objects for specified ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUpFormat"),". Useful before calling ",(0,r.kt)("inlineCode",{parentName:"p"},"modifyMatchUpFormatTiming")," to preserve existing modifications."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { matchUpFormat, averageTimes, recoveryTimes } =\n  tournamentEngine.getModifiedMatchUpFormatTiming({\n    matchUpFormat, // TODS matchUpFormat code\n    event, // optional - include event in scope for search\n  });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getpairedparticipant"},"getPairedParticipant"),(0,r.kt)("p",null,"Returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"{ participantType: PAIR }"),", if any, which contains the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"individualParticipantIds"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { participant } = tournamentEngine.getPairedParticipant({\n  participantIds: individualParticipantIds,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getparticipanteventdetails"},"getParticipantEventDetails"),(0,r.kt)("p",null,"Returns an array of eventDetails in which a specified ",(0,r.kt)("inlineCode",{parentName:"p"},"participantId")," appears. For details on draw entry within events use ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentEngine.getTournamentParticipants({ inContext: true })"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { eventDetails } = tournamentEngine.getParticipantEventDetails({\n  participantId,\n});\n\nconst [{ eventName, eventId }] = eventDetails;\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getparticipantidfinishingpositions"},"getParticipantIdFinishingPositions"),(0,r.kt)("p",null,"Returns the Range of finishing positions possible for all participantIds within a draw"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const idMap = tournamentEngine.getParticipantIdFinishingPositions({\n  drawId,\n  byeAdvancements, // optional boolean - whether or not to consider byeAdvancements\n});\n\nconst { relevantMatchUps, finishingPositionRanges, finishingPositionRange } =\n  idMap[participantId];\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getparticipantmembership"},"getParticipantMembership"),(0,r.kt)("p",null,"Returns all grouping participants which include ",(0,r.kt)("inlineCode",{parentName:"p"},"participantId")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"{ individualParticipantIds }"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  [PAIR]: doublesParticipantIds,\n  [GROUP]: groupParticipantIds,\n  [TEAM]: teamParticipantIds,\n} = tournamentEngine.getParticipantMembership({\n  participantId,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getparticipantscaleitem"},"getParticipantScaleItem"),(0,r.kt)("p",null,"Return a ranking or rating or seeding value for a participant, referenced by participantId."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"../concepts/scaleItems"},"Scale Items"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const scaleAttributes = {\n  scaleType: RATING,\n  eventType: SINGLES,\n  scaleName: 'WTN',\n  accessor, // optional - string determining how to access attribute if scaleValue is an object\n};\nconst {\n  scaleItem: { scaleValue },\n} = tournamentEngine.getParticipantScaleItem({\n  participantId,\n  scaleAttributes,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getparticipantsigninstatus"},"getParticipantSignInStatus"),(0,r.kt)("p",null,"Participant signInStatus can be either 'SIGNED_IN' or 'SIGNED_OUT' (or undefined). See ",(0,r.kt)("a",{parentName:"p",href:"#modifyParticipantsSignInStatus"},"modifyParticipantsSignInStatus"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const signInStatus = tournamentEngine.getParticipantSignInStatus({\n  participantId,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getpolicydefinition"},"getPolicyDefinition"),(0,r.kt)("p",null,"Finds policyDefinition for either draw (if drawId), event (if eventId), or tournament, in that order. This enables a default policy to be attached to the tournament record and for event-specific or draw-specific policies to override the default(s)."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"../concepts/policies"},"Policies"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { policyDefinition } = tournamentEngine.getPolicyDefinition({\n  policyType: POLICY_TYPE_SEEDING,\n  eventId, // optional\n  drawId, // optional\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getpositionassignments"},"getPositionAssignments"),(0,r.kt)("p",null,"Returns an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"positionAssignments")," for a structure. Combines ",(0,r.kt)("inlineCode",{parentName:"p"},"positionAssginments")," for child structures in the case of ROUND_ROBIN where ",(0,r.kt)("inlineCode",{parentName:"p"},"{ structureType: CONTAINER }"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let { positionAssignments } = getPositionAssignments({\n  drawDefinition, // optional if { structure } is provided\n  structureId, // optional if { structure } is provided\n  structure, // optional if { drawDefinition, structureId } are provided\n});\n\nconst [{ drawPosition, participantId, qualifier, bye }] = positionAssignments;\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getscaledentries"},"getScaledEntries"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"../concepts/scaleItems"},"Scale Items"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { scaledEntries } = tournamentEngine.getScaledEntries({\n  eventId, // optional - not required if provided array of entries\n  entries, // optional - overrides use of event.entries\n  stage, // optional - filter entries by stage\n\n  scaleAttributes,\n  scaleSortMethod, // optional - function(a, b) {} sort method, useful when scaleValue is an object or further proessing is required\n  sortDescending, // optional - default sorting is ASCENDING; only applies to default sorting method.\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getseedscount"},"getSeedsCount"),(0,r.kt)("p",null,"Takes a policyDefinition, drawSize and participantCount and returrns the number of seeds valid for the specified drawSize"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { seedsCount, error } = getSeedsCount({\n  drawSizeProgression, // optional - fits the seedsCount to the participantsCount rather than the drawSize\n  policyDefinition: SEEDING_USTA,\n  participantCount: 15,\n  drawSize: 128,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getstate"},"getState"),(0,r.kt)("p",null,"Returns a deep copy of the current tournamentEngine state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { tournamentRecord } = tournamentEngine.getState({\n  convertExtensions, // optional - convert extensions to '_' prefixed attributes\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"gettournamentparticipants"},"getTournamentParticipants"),(0,r.kt)("p",null,"Returns ",(0,r.kt)("strong",{parentName:"p"},"deepCopies")," of tournament participants filtered by participantFilters which are arrays of desired participant attribute values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const participantFilters = {\n  accessorValues: [{ accessor, value }], // optional - see Accessors in Concepts\n  eventEntriesOnly, // boolean\n  participantTypes: [INDIVIDUAL],\n  participantRoles, [COMPETITOR],\n  signInStatus, // specific signIn status\n  eventIds, // events in which participants appear\n};\nconst { tournamentParticipants } = tournamentEngine.getTournamentParticipants({\n  inContext, // optional - adds individualParticipants for all individualParticipantIds\n  withStatistics, // optional - adds events, machUps and statistics, e.g. 'winRatio'\n  withOpponents, // optional - include opponent participantIds\n  withMatchUps, // optional - include all matchUps in which the participant appears\n  convertExtensions, // optional - BOOLEAN - convert extensions so _extensionName attributes\n  policyDefinition, // optional - can accept a privacy policy to filter participant attributes\n  participantFilters, // optional - filters\n});\n")),(0,r.kt)("p",null,"participantFilters imlemented: eventIds, participantIds, participantTypes, participantRoles, signInStatus"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"gettournamentpersons"},"getTournamentPersons"),(0,r.kt)("p",null,"Returns ",(0,r.kt)("strong",{parentName:"p"},"deepCopies")," of persons extracted from tournament participants. Each person includes an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"participantIds")," from which person data was retrieved."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { tournamentPersons } = tournamentEngine.getTournamentPersons({\n  participantFilters: { participantRoles: [COMPETITOR] }, // optional - filters\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"gettournamentpenalties"},"getTournamentPenalties"),(0,r.kt)("p",null,"Returns an array of all penalties issued during a tournament."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { penalties } = tournamentEngine.getTournamentPenalties();\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"gettournamentinfo"},"getTournamentInfo"),(0,r.kt)("p",null,"Returns tournament attributes. Used to attach details to publishing payload by ",(0,r.kt)("inlineCode",{parentName:"p"},"getEventData"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { tournamentInfo } = getTournamentInfo({ tournamentRecord });\nconst {\n  tournamentId,\n  tournamentRank,\n\n  formalName,\n  tournamentName,\n  promotionalName,\n  onlineResources,\n\n  localTimeZone,\n  startDate,\n  endDate,\n\n  hostCountryCode,\n  tournamentContacts,\n  tournamentAddresses,\n} = tournamentInfo;\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getvenues"},"getVenues"),(0,r.kt)("p",null,"Returns an array of all Venues which are part of a tournamentRecord."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { venues } = tournamentEngine.getVenues();\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getvenuedata"},"getVenueData"),(0,r.kt)("p",null,"Returns restricted venue attributes along with information for all associated courts. Used primarily by ",(0,r.kt)("inlineCode",{parentName:"p"},"getEventData")," to return a subset of venue/courts information for publishing purposes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  venueName,\n  venueAbbreviation,\n  courtsInfo, // array of courts and associated attributes\n} = tournamentEngine.getVenueData({ venueId });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"isvalidmatchupformat"},"isValidMatchUpFormat"),(0,r.kt)("p",null,"Returns boolean indicating whether matchUpFormat code is valid."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const valid = tournamentEngine.isValidMatchUpFormat(matchUpFormat);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"luckyloserdrawpositionassignment"},"luckyLoserDrawPositionAssignment"),(0,r.kt)("p",null,"Replaces an existing drawPosition assignment with a luckyLoserParticipantId. This method is included in ",(0,r.kt)("inlineCode",{parentName:"p"},"validActions")," for ",(0,r.kt)("a",{parentName:"p",href:"../policies/positionActions"},"positionActions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.luckyLoserDrawPositionAssignment({\n  drawId,\n  structureId,\n  drawPosition,\n  luckyLoserParticipantId,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"matchupactions"},"matchUpActions"),(0,r.kt)("p",null,"Return an array of all validActions for a specific matchUp."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  isByeMatchUp, // boolean; true if matchUp includes a BYE\n  structureIsComplete, // boolean; true if structure is ready for positioning\n  validActions, // array of possible actions given current matchUpStatus\n} = tournamentEngine.matchUpActions({\n  drawId, // optional - not strictly required; method will find matchUp by brute force without it\n  matchUpId,\n});\n\nconst {\n  type, // 'REFEREE', 'SCHEDULE', 'PENALTY', 'STATUS', 'SCORE', 'START', 'END'.\n  method, // tournamentEngine method relating to action type\n  payload, // attributes to be passed to method\n  // additional method-specific options for values to be added to payload when calling method\n} = validAction;\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"mergeparticipants"},"mergeParticipants"),(0,r.kt)("p",null,"Merge ",(0,r.kt)("inlineCode",{parentName:"p"},"participants")," array with existing tournament participants. Useful when synchronizing with a remote registration service, for example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.mergeParticipants({ participants });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modifycourtavailability"},"modifyCourtAvailability"),(0,r.kt)("p",null,"Modifies the ",(0,r.kt)("inlineCode",{parentName:"p"},"dateAvailability")," attribute of a specified court. Warns if existing scheduled matchUps would be affected. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/concepts/scheduling"},"Scheduling"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const result = tournamentEngine.modifyCourtAvailability({\n  courtId,\n  dateAvailability,\n  force, // override warning that existing scheduled matchUps exist\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modifydrawname"},"modifyDrawName"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.modifyDrawName({\n  eventId,\n  drawId,\n  drawName,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modifyeventmatchupformattiming"},"modifyEventMatchUpFormatTiming"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.modifyEventMatchUpFormatTiming({\n  eventId,\n  matchUpFormat,\n  averageMinutes,\n  recoveryMinutes,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modifymatchupformattiming"},"modifyMatchUpFormatTiming"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.modifyMatchUpFormatTiming({\n  matchUpFormat: 'SET3-S:6/TB7',\n  averageTimes: [\n    {\n      categoryNames: [U12, U14],\n      minutes: { [DOUBLES]: 110, default: 130 },\n    },\n    {\n      categoryNames: [U16, U18],\n      minutes: { [DOUBLES]: 100, default: 120 },\n    },\n  ],\n  recoveryTimes: [\n    { categoryNames: [], minutes: { default: 15, [DOUBLES]: 15 } },\n  ],\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modifyentriesstatus"},"modifyEntriesStatus"),(0,r.kt)("p",null,"Modify the entryStatus of participants already in an event or flight/draw. Does not allow participants assigned positions in structures to have an entryStatus of WITHDRAWN."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const result = tournamentEngine.modifyEntriesStatus({\n  participantIds, // ids of participants whose entryStatus will be modified\n  entryStatus, // new entryStatus\n  eventId, // id of event where the modification(s) will occur\n  drawId, // optional - scope to a specific flight/draw\n  stage, // optional - scope to a specific stage\n\n  eventSync, // optional - if there is only a single drawDefinition in event, keep event.entries in sync\n  autoEntryPositions, // optional - keeps entries ordered by entryStage/entryStatus and auto-increments\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modifyevententries"},"modifyEventEntries"),(0,r.kt)("p",null,"Modify the entries for an event. For DOUBLES events automatically create PAIR participants if not already present."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.modifyEventEntries({\n  eventId,\n  entryStage = MAIN,\n  participantIdPairs = [],\n  unpairedParticipantIds = [],\n  entryStatus = DIRECT_ACCEPTANCE,\n})\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modifyindividualparticipantids"},"modifyIndividualParticipantIds"),(0,r.kt)("p",null,"Modify ",(0,r.kt)("inlineCode",{parentName:"p"},"individualParticipantIds")," of a grouping participant ",(0,r.kt)("inlineCode",{parentName:"p"},"{ participantType: TEAM || GROUP }"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.devContext(true).modifyIndividualParticipantIds({\n  groupingParticipantId, // participant (TEAM or GROUP) to which participantIds are to be added\n  individualParticipantIds: newIndividualParticipantIds,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modifyparticipant"},"modifyParticipant"),(0,r.kt)("p",null,"Modifies attributes of a participant with integrity checks to insure valid values for e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"{ participantType, participantRole }"),". Adds participant if not found."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.modifyParticipant({\n  participant: updatedIndividualParticipant,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modifypenalty"},"modifyPenalty"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const penaltyData = {\n  participantIds: [participantId],\n  penaltyType: BALL_ABUSE,\n  matchUpId,\n  issuedAt,\n  notes: 'Hit ball into sea',\n};\nlet result = tournamentEngine.addPenalty(penaltyData);\nconst { penaltyId } = result;\n\nconst notes = 'Hit ball into spectator';\nconst modifications = { notes };\ntournamentEngine.modifyPenalty({ penaltyId, modifications });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modifyparticipantssigninstatus"},"modifyParticipantsSignInStatus"),(0,r.kt)("p",null,"Modify the signInStatus of multiple participants, referenced by participantId."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.modifyParticipantsSignInStatus({\n  participantIds: [participantId],\n  signInState: SIGNED_IN,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modifyseedassignment"},"modifySeedAssignment"),(0,r.kt)("p",null,"Change the display representation of a seedNumber for a specified ",(0,r.kt)("inlineCode",{parentName:"p"},"participantId"),". This method is included in ",(0,r.kt)("inlineCode",{parentName:"p"},"validActions")," for ",(0,r.kt)("a",{parentName:"p",href:"../policies/positionActions"},"positionActions"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.modifySeedAssignment({\n  drawId,\n  structureId,\n  participantId,\n  seedValue, // display representation such as '5-8'\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modifyvenue"},"modifyVenue"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/concepts/scheduling"},"Scheduling"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const modifications = {\n  venueName,\n  venueAbbreviation,\n  courts: [\n    {\n      courtId: 'b9df6177-e430-4a70-ba47-9b9ff60258cb',\n      courtName: 'Custom Court 1',\n      dateAvailability: [\n        {\n          date: '2020-01-01',\n          startTime: '16:30',\n          endTime: '17:30',\n        },\n      ],\n    },\n  ],\n};\ntournamentEngine.modifyVenue({ venueId, modifications });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"newtournamentrecord"},"newTournamentRecord"),(0,r.kt)("p",null,"Creates a new tournamentRecord in tournamentEngine state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.newTournamentRecord({\n  tournamentId, // optional - will be generated if not provided\n});\n\nconst { tournamentRecord } = tournamentEngine.getState();\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"participantscaleitem"},"participantScaleItem"),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("a",{parentName:"p",href:"#getParticipantScaleItem"},"getParticipantScaleItem")," but takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"participant")," object and doesn't require ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentEngine.setState(tournamentRecord)"),"."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"../concepts/scaleItems"},"Scale Items"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const scaleAttributes = {\n  scaleType: RATING,\n  eventType: SINGLES,\n  scaleName: 'WTN',\n  accessor, // optional - string determining how to access attribute if scaleValue is an object\n};\nconst {\n  scaleItem: { scaleValue },\n} = tournamentEngine.participantScaleItem({\n  participant,\n  scaleAttributes,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"positionactions"},"positionActions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const positionActions = tournamentEngine.positionActions({\n  drawId,\n  structureId,\n  drawPosition,\n  policyDefinition: positionActionsPolicy, // optional - policy defining what actions are allowed in client context\n});\n\nconst {\n  isActiveDrawPosition, // boolean\n  isByePosition, // boolean\n  isDrawPosition, // boolean\n  hasPositionAssiged, // boolean\n  validActions,\n} = positionActions;\n\nconst {\n  type, // 'ASSIGN', 'LUCKY', 'SWAP', 'BYE', 'REMOVE'\n  method, // tournamentEngine method relating to action type\n  payload, // attributes to be passed to method\n  // additional method-specific options for values to be added to payload when calling method\n} = validAction;\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"publishevent"},"publishEvent"),(0,r.kt)("p",null,"Utilizes ",(0,r.kt)("a",{parentName:"p",href:"#getEventData"},"getEventData")," to prepare data for display. Differs from ",(0,r.kt)("a",{parentName:"p",href:"#getEventData"},"getEventData")," in that it modifies the ",(0,r.kt)("inlineCode",{parentName:"p"},"publishState")," of the event. Subscriptions or middleware may be used to deliver the generated payload for presentation on a public website."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"../concepts/policies"},"Policies")," for more details on ",(0,r.kt)("inlineCode",{parentName:"p"},"policyDefinitions"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const policyDefinition = Object.assign(\n  {},\n  ROUND_NAMING_POLICY,\n  PARTICIPANT_PRIVACY_DEFAULT\n);\n\nconst { eventData } = tournamentEngine.publishEvent({\n  policyDefinition,\n  eventId,\n  drawIds, // optional - array of drawIds within the event to publish\n  structureIds = [], // optional - specify structureIds\n  drawIdsToRemove, // optional - add these drawIds to drawIds already published\n  drawIdsToAdd, // optional - remove these drawIds from drawIds published\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"rankbyratings"},"rankByRatings"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removedrawdefinitionextension"},"removeDrawDefinitionExtension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.removeDrawDefintionExtension({ eventId, drawId, name });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removedrawpositionassignment"},"removeDrawPositionAssignment"),(0,r.kt)("p",null,"Clear draw position and optionally replace with a BYE, change entryStatus, or decompose a PAIR participant into UNGROUPED participants (DOUBLES only)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"removeDrawPositionAssignment({\n  drawDefinition,\n  structureId,\n  drawPosition,\n  replaceWithBye, // optional\n  entryStatus, // optional - change the entryStatus of the removed participant\n  destroyPair, // optional - decompose PAIR participant into UNGROUPED participants\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removedrawentries"},"removeDrawEntries"),(0,r.kt)("p",null,"Removes participantIds from ",(0,r.kt)("inlineCode",{parentName:"p"},"drawDefinition.entries")," (if generated) as well as any relevent ",(0,r.kt)("inlineCode",{parentName:"p"},"flightProfile.flights"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.removeDrawEntries({\n  drawId,\n  eventId,\n  participantIds\n  autoEntryPositions, // optional - keeps entries ordered by entryStage/entryStatus and auto-increments\n  });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removeevententries"},"removeEventEntries"),(0,r.kt)("p",null,"Removes ",(0,r.kt)("inlineCode",{parentName:"p"},"participantIds")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"event.entries")," with integrity checks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.removeEventEntries({\n  eventId,\n  participantIds,\n  autoEntryPositions, // optional - keeps entries ordered by entryStage/entryStatus and auto-increments\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removeeventextension"},"removeEventExtension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.removeEventExtension({ eventId, name });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removeeventmatchupformattiming"},"removeEventMatchUpFormatTiming"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.removeEventMatchUpFormatTiming({ eventId });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removeindividualparticipantids"},"removeIndividualParticipantIds"),(0,r.kt)("p",null,"Remove an array of individualParticipantIds from a grouping participant ","[TEAM, GROUP]"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.removeIndividualParticipantIds({\n  groupingParticipantId,\n  individualParticipantIds,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removeparticipantidsfromallteams"},"removeParticipantIdsFromAllTeams"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.removeParticipantIdsFromAllTeams({\n  individualParticipantIds,\n  groupingType, // optional - restrict to removing from only specified groupingType\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removeparticipantextension"},"removeParticipantExtension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.removeParticipantExtension({ participantId, name });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removepenalty"},"removePenalty"),(0,r.kt)("p",null,"Removes a penalty from all relevant tournament participants."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.removePenalty({ penaltyId });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removescalevalues"},"removeScaleValues"),(0,r.kt)("p",null,"Removes scale values for participants in a particular event. Optionally restrict by draw or stage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.removeScaleValues({\n  eventId,\n  scaleAttributes, // { scaleType, scaleName, eventType }\n  scaleName, // optional - override default scaleName, event.category.categoryName || event.category.ageCategoryCode\n  drawId, // optional - to scope participants to entries in a specific draw\n  stage, // optinal - scope participants to entries in a specific stage of draw\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removeseeding"},"removeSeeding"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.removeSeeding({\n  eventId,\n  scaleName, // optional - override default scaleName, event.category.categoryName || event.category.ageCategoryCode\n  drawId, // optional - to scope participants to entries in a specific draw\n  stage, // optinal - scope participants to entries in a specific stage of draw\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removestructure"},"removeStructure"),(0,r.kt)("p",null,"Removes targeted ",(0,r.kt)("inlineCode",{parentName:"p"},"drawDefinition.structure")," and all other child ",(0,r.kt)("inlineCode",{parentName:"p"},"structures")," along with all associated ",(0,r.kt)("inlineCode",{parentName:"p"},"drawDefinition.links"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { removedMatchUpIds } = tournamentEngine.removeStructure({\n  drawId,\n  structureId,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"removetournamentextension"},"removeTournamentExtension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.removeTournamentExtension({ name });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setdrawdefaultmatchupformat"},"setDrawDefaultMatchUpFormat"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setDrawDefaultMatchUpFormat({\n  drawId,\n  matchUpFormat, // TODS matchUpFormatCode\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setdrawparticipantrepresentativeids"},"setDrawParticipantRepresentativeIds"),(0,r.kt)("p",null,"Set the participantIds of participants in the draw who are representing players by observing the creation of the draw."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setDrawParticipantRepresentativeIds({\n  drawId,\n  representativeParticipantIds,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"seteventdefaultmatchupformat"},"setEventDefaultMatchUpFormat"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setEventDefaultMatchUpFormat({\n  eventId,\n  matchUpFormat, // TODS matchUpFormatCode\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"seteventdates"},"setEventDates"),(0,r.kt)("p",null,"Where startDate and/or endDate are strings 'YYYY-MM-DD'."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setEventDates({ eventId, startDate, endDate });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"seteventenddate"},"setEventEndDate"),(0,r.kt)("p",null,"Where endDate is a string 'YYYY-MM-DD'."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setEventEndDate({ eventId, endDate });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"seteventstartdate"},"setEventStartDate"),(0,r.kt)("p",null,"Where startDate is a string 'YYYY-MM-DD'."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setEventStartDate({ eventId, startDate });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setmatchupdailylimits"},"setMatchUpDailyLimits"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setMatchUpDailyLimits({\n  dailyLimits: { SINGLES: 2, DOUBLES: 1, total: 3 },\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setmatchupstatus"},"setMatchUpStatus"),(0,r.kt)("p",null,"Sets either matchUpStatus or score and winningSide; values to be set are passed in outcome object. Handles any winner/loser participant movements within or across structures."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const outcome = {\n  score,\n  winningSide,\n  matchUpStatus,\n};\n\ntournamentEngine.setMatchUpStatus({\n  drawId,\n  matchUpId,\n  matchUpTieId, // optional - if part of a TIE matchUp\n  outcome,\n  schedule: {\n    // optional - set schedule items\n    courtId, // requires scheduledDate\n    venueId,\n    scheduledDate,\n    scheduledTime,\n    startTime,\n    endTime,\n  },\n  notes, // optional - add note (string) to matchUp object\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setparticipantscaleitem"},"setParticipantScaleItem"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"scaleItem = {\n  scaleValue: 12,\n  scaleName: 'U16',\n  scaleType: RANKING,\n  eventType: SINGLES,\n  scaleDate: '2020-06-06',\n};\n\nresult = tournamentEngine.setParticipantScaleItem({\n  participantId,\n  scaleItem,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setparticipantscaleitems"},"setParticipantScaleItems"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const scaleItemsWithParticipantIds = [\n  {\n    participantId,\n    scaleItems: [\n      {\n        scaleValue: 8.3,\n        scaleName: 'WTN',\n        scaleType: RATING,\n        eventType: SINGLES,\n        scaleDate: '2021-01-01',\n      },\n    ],\n  },\n];\ntournamentEngine.setParticipantScaleItems({ scaleItemsWithParticipantIds });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setstructuredefaultmatchupformat"},"setStructureDefaultMatchUpFormat"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setStructureDefaultMatchUpFormat({\n  drawId,\n  structureId,\n  matchUpFormat, // TODS matchUpFormatCode\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setstate"},"setState"),(0,r.kt)("p",null,"Loads a tournament record into tournamentEngine."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"By default a deep copy of the ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentRecord")," is made so that mutations made by ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentEngine")," do not affect the source object. An optional boolean parameter, ",(0,r.kt)("em",{parentName:"p"},"deepCopy")," can be set to false to override this default behavior."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setsState(tournamentRecord, deepCopy);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setsuborder"},"setSubOrder"),(0,r.kt)("p",null,"Assigns a subOrder value to a participant within a structure by drawPosition where participant has been assigned"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setSubOrder({\n  drawId,\n  structureId,\n  drawPosition: 1,\n  subOrder: 2,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"settournamentcategories"},"setTournamentCategories"),(0,r.kt)("p",null,"Define categories to be used in event creation for tournament record."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const categories = [\n  {\n    categoryName: 'U18',\n    type: eventConstants.AGE,\n  },\n  {\n    categoryName: 'U16',\n    type: eventConstants.AGE,\n  },\n  {\n    categoryName: 'WTN',\n    type: eventConstants.RATING,\n  },\n];\ntournamentEngine.setTournamentCategories({ categories });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"settournamentenddate"},"setTournamentEndDate"),(0,r.kt)("p",null,"Accepts an ISO String Date;"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setTournamentEndDate({ endDate });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"settournamentid"},"setTournamentId"),(0,r.kt)("p",null,"Points ",(0,r.kt)("inlineCode",{parentName:"p"},"tournamentEngine")," to a tournamentRecord that is in shared state, e.g. loaded by ",(0,r.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setTournamentId(tournamentId);\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"settournamentname"},"setTournamentName"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const tournamentName = 'CourtHive Challenge';\ntournamentEngine.setTournamentName({\n  tournamentName,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"settournamentnotes"},"setTournamentNotes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setTournamentNotes({ notes });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"settournamentstartdate"},"setTournamentStartDate"),(0,r.kt)("p",null,"Accepts an ISO String Date;"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.setTournamentStartDate({ StartDate });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"toggleparticipantcheckinstate"},"toggleParticipantCheckInState"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.toggleParticipantCheckInState({\n  drawId,\n  matchUpId,\n  participantId,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"tournamentmatchups"},"tournamentMatchUps"),(0,r.kt)("p",null,"Returns tournament matchUps grouped by matchUpStatus. These matchUps are returned with ",(0,r.kt)("em",{parentName:"p"},"context"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  abandonedMatchUps,\n  byeMatchUps,\n  completedMatchUps,\n  pendingMatchUps,\n  upcomingMatchUps,\n} = tournamentEngine.tournamentMatchUps({\n  matchUpFilters, // optional; [ scheduleDates: [], c]urtIds: [], s]ages: [], r]undNumbers: [], matchUpStatuses: [], matchUpFormats: []]\n  scheduleVisibilityFilters,\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"unpublishevent"},"unPublishEvent"),(0,r.kt)("p",null,"Modifies the ",(0,r.kt)("inlineCode",{parentName:"p"},"publishState")," of an event. ",(0,r.kt)("inlineCode",{parentName:"p"},"Subscriptions")," or middleware can be used to trigger messaging to services which make event data visible on public websites."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.unPublishEvent({ eventId });\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"updatedrawidsorder"},"updateDrawIdsOrder"),(0,r.kt)("p",null,"Updates the ",(0,r.kt)("inlineCode",{parentName:"p"},"drawOrder")," attribute of all ",(0,r.kt)("inlineCode",{parentName:"p"},"drawDefinitions")," within an event. The ",(0,r.kt)("inlineCode",{parentName:"p"},"drawOrder")," attribute can be used for sorting or for differentiating ",(0,r.kt)("inlineCode",{parentName:"p"},"drawDefinitions"),' for the award of rankings points, when "flighting" separates participants by some ',(0,r.kt)("inlineCode",{parentName:"p"},"scaleValue"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.updateDrawIdsOrder({\n  eventId,\n  orderedDrawIdsMap: {\n    'id-Of-draw-1': 1,\n    'id-of-draw-2': 2,\n  },\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"withdrawparticipantatdrawposition"},"withdrawParticipantAtDrawPosition"),(0,r.kt)("p",null,"Thin wrapper around ",(0,r.kt)("a",{parentName:"p",href:"#removeDrawPositionAssignment"},"removeDrawPositionAssignment"),". This method is included in ",(0,r.kt)("inlineCode",{parentName:"p"},"validActions")," for ",(0,r.kt)("a",{parentName:"p",href:"../policies/positionActions"},"positionActions"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"withdrawParticipantAtDrawPosition({\n  drawDefinition,\n  structureId,\n  drawPosition,\n  replaceWithBye, // optional\n  entryStatus = WITHDRAWN,\n  destroyPair, // optional - decompose PAIR participant into UNPAIRED participants\n});\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"version"},"version"),(0,r.kt)("p",null,"Returns NPM package version. Can be used in configurations that utilize Competition Factory engines on both client and server to ensure equivalency."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const version = tournamentEngine.version();\n")),(0,r.kt)("hr",null))}c.isMDXComponent=!0}}]);