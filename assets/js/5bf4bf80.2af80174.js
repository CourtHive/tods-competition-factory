"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8199],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9770:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const o={title:"competitionEngine API"},l=void 0,r={unversionedId:"apis/competition-engine-api",id:"apis/competition-engine-api",title:"competitionEngine API",description:"All _competitionEngine_ methods which make a mutation return either { success: true } or { error }",source:"@site/docs/apis/competition-engine-api.md",sourceDirName:"apis",slug:"/apis/competition-engine-api",permalink:"/tods-competition-factory/docs/apis/competition-engine-api",draft:!1,tags:[],version:"current",frontMatter:{title:"competitionEngine API"},sidebar:"docs",previous:{title:"Competition Engine",permalink:"/tods-competition-factory/docs/engines/competition-engine-overview"},next:{title:"Tournament Engine",permalink:"/tods-competition-factory/docs/engines/tournament-engine-overview"}},s={},d=[{value:"addCourts",id:"addcourts",level:2},{value:"addDrawDefinition",id:"adddrawdefinition",level:2},{value:"addExtension",id:"addextension",level:2},{value:"addMatchUpEndTime",id:"addmatchupendtime",level:2},{value:"addMatchUpOfficial",id:"addmatchupofficial",level:2},{value:"addMatchUpResumeTime",id:"addmatchupresumetime",level:2},{value:"addMatchUpScheduledDate",id:"addmatchupscheduleddate",level:2},{value:"addMatchUpScheduledTime",id:"addmatchupscheduledtime",level:2},{value:"addMatchUpScheduleItems",id:"addmatchupscheduleitems",level:2},{value:"addMatchUpStartTime",id:"addmatchupstarttime",level:2},{value:"addMatchUpStopTime",id:"addmatchupstoptime",level:2},{value:"addPenalty",id:"addpenalty",level:2},{value:"addPersonRequests",id:"addpersonrequests",level:2},{value:"addSchedulingProfileRound",id:"addschedulingprofileround",level:2},{value:"addVenue",id:"addvenue",level:2},{value:"allocateTeamMatchUpCourts",id:"allocateteammatchupcourts",level:2},{value:"allCompetitionMatchUps",id:"allcompetitionmatchups",level:2},{value:"assignMatchUpCourt",id:"assignmatchupcourt",level:2},{value:"assignMatchUpVenue",id:"assignmatchupvenue",level:2},{value:"attachPolicies",id:"attachpolicies",level:2},{value:"bulkMatchUpStatusUpdate",id:"bulkmatchupstatusupdate",level:2},{value:"bulkRescheduleMatchUps",id:"bulkreschedulematchups",level:2},{value:"bulkScheduleMatchUps",id:"bulkschedulematchups",level:2},{value:"calculateScheduleTimes",id:"calculatescheduletimes",level:2},{value:"clearScheduledMatchUps",id:"clearscheduledmatchups",level:2},{value:"competitionMatchUps",id:"competitionmatchups",level:2},{value:"competitionScheduleMatchUps",id:"competitionschedulematchups",level:2},{value:"deleteCourt",id:"deletecourt",level:2},{value:"deleteVenue",id:"deletevenue",level:2},{value:"devContext",id:"devcontext",level:2},{value:"disableCourts",id:"disablecourts",level:2},{value:"disableTiaAutoCalc",id:"disabletiaautocalc",level:2},{value:"disableVenues",id:"disablevenues",level:2},{value:"enableCourts",id:"enablecourts",level:2},{value:"enableTiaAutoCalc",id:"enabletiaautocalc",level:2},{value:"enableVenues",id:"enablevenues",level:2},{value:"executionQueue",id:"executionqueue",level:2},{value:"findExtension",id:"findextension",level:2},{value:"findParticipant",id:"findparticipant",level:2},{value:"getCompetitionDateRange",id:"getcompetitiondaterange",level:2},{value:"getCompetitionParticipants",id:"getcompetitionparticipants",level:2},{value:"Implemented participantFilters",id:"implemented-participantfilters",level:3},{value:"getCompetitionPenalties",id:"getcompetitionpenalties",level:2},{value:"getCompetitionVenues",id:"getcompetitionvenues",level:2},{value:"getEventMatchUpFormatTiming",id:"geteventmatchupformattiming",level:2},{value:"getLinkedTournamentIds",id:"getlinkedtournamentids",level:2},{value:"getMatchUpDailyLimits",id:"getmatchupdailylimits",level:2},{value:"getMatchUpDependencies",id:"getmatchupdependencies",level:2},{value:"getRounds",id:"getrounds",level:2},{value:"getParticipantScaleItem",id:"getparticipantscaleitem",level:2},{value:"getPersonRequests",id:"getpersonrequests",level:2},{value:"getState",id:"getstate",level:2},{value:"getSchedulingProfile",id:"getschedulingprofile",level:2},{value:"getSchedulingProfileIssues",id:"getschedulingprofileissues",level:2},{value:"generateBookings",id:"generatebookings",level:2},{value:"getVenuesAndCourts",id:"getvenuesandcourts",level:2},{value:"getVenuesReport",id:"getvenuesreport",level:2},{value:"linkTournaments",id:"linktournaments",level:2},{value:"matchUpActions",id:"matchupactions",level:2},{value:"matchUpScheduleChange",id:"matchupschedulechange",level:2},{value:"modifyCourt",id:"modifycourt",level:2},{value:"modifyEventMatchUpFormatTiming",id:"modifyeventmatchupformattiming",level:2},{value:"modifyMatchUpFormatTiming",id:"modifymatchupformattiming",level:2},{value:"modifyPersonRequests",id:"modifypersonrequests",level:2},{value:"modifyPenalty",id:"modifypenalty",level:2},{value:"modifyVenue",id:"modifyvenue",level:2},{value:"publishOrderOfPlay",id:"publishorderofplay",level:2},{value:"removeEventMatchUpFormatTiming",id:"removeeventmatchupformattiming",level:2},{value:"removeExtension",id:"removeextension",level:2},{value:"removeMatchUpCourtAssignment",id:"removematchupcourtassignment",level:2},{value:"removePersonRequests",id:"removepersonrequests",level:2},{value:"removePenalty",id:"removepenalty",level:2},{value:"removeTournamentRecord",id:"removetournamentrecord",level:2},{value:"removeUnlinkedTournamentRecords",id:"removeunlinkedtournamentrecords",level:2},{value:"reorderUpcomingMatchUps",id:"reorderupcomingmatchups",level:2},{value:"scheduleMatchUps",id:"schedulematchups",level:2},{value:"scheduleProfileRounds",id:"scheduleprofilerounds",level:2},{value:"setMatchUpDailyLimits",id:"setmatchupdailylimits",level:2},{value:"setMatchUpStatus",id:"setmatchupstatus",level:2},{value:"setState",id:"setstate",level:2},{value:"setSchedulingProfile",id:"setschedulingprofile",level:2},{value:"setTournamentRecord",id:"settournamentrecord",level:2},{value:"toggleParticipantCheckInState",id:"toggleparticipantcheckinstate",level:2},{value:"unlinkTournament",id:"unlinktournament",level:2},{value:"unlinkTournaments",id:"unlinktournaments",level:2},{value:"unPublishOrderOfPlay",id:"unpublishorderofplay",level:2},{value:"updateTieMatchUpScore",id:"updatetiematchupscore",level:2},{value:"validateSchedulingProfile",id:"validateschedulingprofile",level:2},{value:"version",id:"version",level:2}],p={toc:d};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"All ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"competitionEngine"))," methods which make a mutation return either ",(0,i.kt)("inlineCode",{parentName:"p"},"{ success: true }")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"{ error }")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addcourts"},"addCourts"),(0,i.kt)("p",null,"Convenience function to bulk add courts to a Venue. Only adds ",(0,i.kt)("strong",{parentName:"p"},"dateAvailability")," and ",(0,i.kt)("strong",{parentName:"p"},"courtName"),". See ",(0,i.kt)("a",{parentName:"p",href:"/docs/concepts/scheduling"},"Scheduling"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.addCourts({\n  venueId,\n  courtsCount: 3, // optional, can be added/modified later\n  courtNames: ['Court 1', 'Court 2', 'Court 3'], // optional\n  dateAvailability, // optional -- see definition in Tournament Engine API\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"adddrawdefinition"},"addDrawDefinition"),(0,i.kt)("p",null,"Adds a drawDefinition to an event in a tournamentRecord."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"if (!error) {\n  const result = competitionEngine.addDrawDefinition({\n    allowReplacement, // optional - defaults to false\n    drawDefinition,\n    tournamentId,\n    eventId,\n    flight, // optional - pass flight definition object for integrity check\n  });\n}\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addextension"},"addExtension"),(0,i.kt)("p",null,"Adds an extension to all ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentRecords")," loaded into ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.addExtension({ extension });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupendtime"},"addMatchUpEndTime"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const endTime = '2020-01-01T09:05:00Z';\ncompetitionEngine.addMatchUpEndTime({\n  validateTimeSeries, // optional - true by default - when false does not verify endTime is later than startTime\n  disableNotice, // when disabled subscribers will not be notified\n  tournamentId,\n  matchUpId,\n  endTime,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupofficial"},"addMatchUpOfficial"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.addMatchUpOfficial({\n  drawId,\n  matchUpId,\n  tournamentId,\n  participantId,\n  officialType,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupresumetime"},"addMatchUpResumeTime"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const resumeTime = '2020-01-01T09:00:00Z';\ncompetitionEngine.addMatchUpResumeTime({\n  drawId,\n  matchUpId,\n  resumeTime,\n  tournamentId,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupscheduleddate"},"addMatchUpScheduledDate"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const scheduledDate = '2020-01-01';\ncompetitionEngine.addMatchUpScheduledDate({\n  drawId,\n  matchUpId,\n  tournamentId,\n  scheduledDate,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupscheduledtime"},"addMatchUpScheduledTime"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const scheduledTime = '08:00';\ncompetitionEngine.addMatchUpScheduledTime({\n  drawId,\n  matchUpId,\n  tournamentId,\n  scheduledTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupscheduleitems"},"addMatchUpScheduleItems"),(0,i.kt)("p",null,"Convenience function to add several schedule items at once."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.addMatchUpScheduleItems({\n  drawId,\n  matchUpId,\n  tournamentId,\n  schedule: {\n    courtIds, // applies only to TEAM matchUps\n    courtId, // requires scheduledDate\n    venueId,\n    scheduledTime,\n    scheduledDate,\n    startTime,\n    endTime,\n  },\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupstarttime"},"addMatchUpStartTime"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const startTime = '2020-01-01T08:05:00Z';\ncompetitionEngine.addMatchUpStartTime({\n  drawId,\n  matchUpId,\n  startTime,\n  tournamentId,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupstoptime"},"addMatchUpStopTime"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const stopTime = '2020-01-01T08:15:00Z';\ncompetitionEngine.addMatchUpStopTime({\n  drawId,\n  matchUpId,\n  stopTime,\n  tournamentId,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addpenalty"},"addPenalty"),(0,i.kt)("p",null,"Add a penaltyItem to one or more participants."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const createdAt = new Date().toISOString();\nconst penaltyData = {\n  refereeParticipantId, // optional\n  participantIds: [participantId],\n  penaltyType: BALL_ABUSE,\n  penaltyCode: 'Organization specific code', // optional\n  matchUpId,\n  issuedAt, // optional ISO timeStamp for time issued to participant\n  createdAt,\n  notes: 'Hit ball into sea',\n};\nlet result = competitionEngine.addPenalty(penaltyData);\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addpersonrequests"},"addPersonRequests"),(0,i.kt)("p",null,"Validates and adds person requests."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const requests = [\n  {\n    date, // 'YYYY-MM-DD' date string\n    startTime, // '00:00' time string\n    endTime, // '00:00' time string\n    requestType: 'DO_NOT_SCHEDULE',\n  },\n];\ncompetitionEngine.addPersonRequests({ personId, requests });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addschedulingprofileround"},"addSchedulingProfileRound"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.addSchedulingProfileRound({\n  scheduleDate, // string date, e.g. '2022-01-01' or '2022-01-01T00:00'\n  venueId, // id of the venue to which the round has been assigned\n  round, // details of a round to be played on specified date\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addvenue"},"addVenue"),(0,i.kt)("p",null,"Adds ",(0,i.kt)("strong",{parentName:"p"},"venueId")," if not provided."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.addVenue({\n  venue: { venueName },\n  context, // optional - adds detail in CONTEXT extension\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"allocateteammatchupcourts"},"allocateTeamMatchUpCourts"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let result = competitionEngine.allocateTeamMatchUpCourts({\n  removePriorValues, // optional boolean\n  matchUpId,\n  courtIds,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"allcompetitionmatchups"},"allCompetitionMatchUps"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { matchUps } = competitionEngine.allCompetitionMatchUps({\n  scheduleVisibilityFilters, // { visibilityThreshold: Date, eventIds, drawIds }\n  afterRecoveryTimes, // optional boolean; include participant recovery times for each matchUp\n  matchUpFilters, // optional; [ scheduledDate, scheduledDates: [], courtIds: [], stages: [], roundNumbers: [], matchUpStatuses: [], matchUpFormats: []]\n  nextMatchUps, // include winnerTo and loserTo matchUps\n  contextProfile, // optional: { inferGender: true, contextProfile: ['attribute', 'to', 'exclude'], withScaleValues }\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"assignmatchupcourt"},"assignMatchUpCourt"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.assignMatchUpCourt({\n  removePriorValues, // optional boolean\n  drawId, // drawId where matchUp is found\n  courtDayDate, // ISO Date String or 'YYYY-MM-DD'\n  tournamentId,\n  matchUpId,\n  courtId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"assignmatchupvenue"},"assignMatchUpVenue"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.assignMatchUpVenue({\n  removePriorValues, // optional boolean\n  tournamentId,\n  matchUpId,\n  drawId, // drawId where matchUp is found\n  venueId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"attachpolicies"},"attachPolicies"),(0,i.kt)("p",null,"Attaches ",(0,i.kt)("inlineCode",{parentName:"p"},"policyDefinitions")," to all tournamentRecords currently loaded into ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.attachPolicies({ policyDefinitions });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"bulkmatchupstatusupdate"},"bulkMatchUpStatusUpdate"),(0,i.kt)("p",null,"Provides the ability to update the outcomes of multiple matchUps at once."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const outcomes = [\n  {\n    tournamentId,\n    eventId,\n    drawId,\n    matchUpId,\n    matchUpFormat,\n    matchUpStatus,\n    winningSide,\n    score,\n  },\n];\ncompetitionEngine.bulkMatchUpStatusUpdate({ outcomes });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"bulkreschedulematchups"},"bulkRescheduleMatchUps"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  rescheduled, // array of inContext matchUps which have been rescheduled\n  notRescheduled, // array of inContext matchUps which have NOT been rescheduled\n  allRescheduled, // boolean indicating whether all matchUps have been rescheduled\n  dryRun, // boolean - only report what would happen without making modifications\n} = competitionEngine.bulkRescheduleMatchUps({\n  matchUpIds, // array of matchUupIds for matchUps which are to be rescheduled\n  scheduleChange: {\n    daysChange: 1, // number of days +/-\n    minutesChange: 30, // number of minutes +/-\n  },\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"bulkschedulematchups"},"bulkScheduleMatchUps"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const schedule = {\n  scheduledTime: '08:00',\n  scheduledDate: '2021-01-01T00:00', // best practice to provide ISO date string\n  venueId,\n};\nconst matchUpContextIds = [{ tournamentId, matchUpId }];\ncompetitionEngine.bulkScheduleMatchUps({ matchUpContextIds, schedule });\n")),(0,i.kt)("h2",{id:"calculatescheduletimes"},"calculateScheduleTimes"),(0,i.kt)("p",null,"Returns an array of available schedule times for a given date (and optional time range)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { scheduleTimes } = competitionEngine.calculateScheduleTimes({\n  scheduleDate,\n\n  startTime, // optional - if not provided will be derived from court availability for the tiven date\n  endTime, // optional - if not provided will be derived from court availability for the tiven date\n\n  averageMatchUpMinutes = 90, // optional - defualts to 90\n  periodLength = 30, // optional - defualts to 30\n\n  venueIds, // optional - restrict calculation to specified venueIds\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"clearscheduledmatchups"},"clearScheduledMatchUps"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.clearScheduledMatchUps({\n  ignoreMatchUpStatuses, // optional - specify matchUpStatus values to be ignored; defaults to all completed matchUpStatuses\n  scheduleAttributes, // optional - specify which attributes should be considered; defaults to ['scheduledDate', 'scheduledTime']\n  scheduledDates, // optional - array of dates to be cleared; only matchUps with specified scheduledDate will be cleared\n  venueIds, // optional - array of venueIds; only matchUps at specified venues will be cleared\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"competitionmatchups"},"competitionMatchUps"),(0,i.kt)("p",null,'Returns aggregated arrays of "inContext" matchUps for all tournamentRecords loaded into ',(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  byeMatchUps,\n  abandonedMatchUps,\n  completedMatchUps,\n  pendingMatchUps,\n  upcomingMatchUps,\n} = competitionEngine.competitionMatchUps({\n  scheduleVisibilityFilters, // { visibilityThreshold: Date, eventIds, drawIds }\n  matchUpFilters, // optional; [ scheduledDate, scheduledDates: [], courtIds: [], stages: [], roundNumbers: [], matchUpStatuses: [], matchUpFormats: []]\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"competitionschedulematchups"},"competitionScheduleMatchUps"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const matchUpFilters = {\n  isMatchUpTie: false,\n  scheduledDate, // scheduled date of matchUps to return\n};\n\nconst { completedMatchUps, dateMatchUps, courtsData, venues } =\n  competitionEngine.competitionScheduleMatchUps({\n    alwaysReturnCompleted, // boolean - when true return completed matchUps regardless of publish state\n    participantsProfile, // optional - ability to specify additions to context (see parameters of tournamentEngine.getTournamentParticipants())\n    sortDateMatchUps, // boolean - optional - defaults to `true`\n    usePublishState, // boolean - when true filter out events and dates that have not been published\n    matchUpFilters, // optional; [ scheduledDate, scheduledDates: [], courtIds: [], stages: [], roundNumbers: [], matchUpStatuses: [], matchUpFormats: []]\n    sortCourtsData, // boolean - optional\n  });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"deletecourt"},"deleteCourt"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.deleteCourt({\n  courtId,\n  force, // override warnings about matchUps scheduled on specified court\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"deletevenue"},"deleteVenue"),(0,i.kt)("p",null,"If a venue has scheduled matchUps then it will not be deleted unless ",(0,i.kt)("inlineCode",{parentName:"p"},"{ force: true }")," in which case all relevant matchUps will be unscheduled."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.deleteVenue({ venueId, force });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"devcontext"},"devContext"),(0,i.kt)("p",null,"Setting devContext(true) bypasses ",(0,i.kt)("strong",{parentName:"p"},"try {} catch (err) {}")," code block and in some cases enables enhanced logging"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.devContext(true);\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"disablecourts"},"disableCourts"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.disableCourts({\n  courtIds,\n  dates, // optional - if not provided, courts will be disalbed for all dates\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"disabletiaautocalc"},"disableTiaAutoCalc"),(0,i.kt)("p",null,"Disable default behavior of auto calculating TEAM matchUp scores."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.disableTieAutoCalc({ tournamentId, drawId, matchUpId });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"disablevenues"},"disableVenues"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.disableVenues({ venueIds });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"enablecourts"},"enableCourts"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.enableCourts({\n  enableAll, // optional boolean\n  courtIds,\n  dates, // optional - array of dates to enable (if they have been disabled)\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"enabletiaautocalc"},"enableTiaAutoCalc"),(0,i.kt)("p",null,"Re-enable default behavior of auto calculating TEAM matchUp scores, and trigger auto calculation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.enableTieAutoCalc({ tournamentId, drawId, matchUpId });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"enablevenues"},"enableVenues"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.enableVenues({ venueIds, enableAll });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"executionqueue"},"executionQueue"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"executionQueue")," method accepts an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine")," methods and associated parameters,\nallowing for multiple queries or mutations in a single API call, which is significant if a client is making a\nrequest of a server and the server needs to prepare context by loading a tournament record."),(0,i.kt)("p",null,"An additional benefit of the ",(0,i.kt)("inlineCode",{parentName:"p"},"executionQueue")," is that subscribers to ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine")," events are not notified\nuntil all methods in the queue have completed successfully, and a failure of any one method can be used to roll back state\nwith the assurance that there are no side-effects caused by subscribers responding to notifications. This also means\nthat the server context can not be blocked by any long-running external processes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const result = competitionEngine.executionQueue([\n  {\n    method: 'getCompetitionParticipants',\n    params: { participantFilters: { participantTypes: [PAIR] } },\n  },\n  {\n    method: 'getCompetitionParticipants',\n    params: { participantFilters: { participantTypes: [INDIVIDUAL] } },\n  },\n]);\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"findextension"},"findExtension"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { extension } = competitionEngine.findExtension({ name });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"findparticipant"},"findParticipant"),(0,i.kt)("p",null,"Find tournament participant by either ",(0,i.kt)("inlineCode",{parentName:"p"},"participantId")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"personId"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { participant, tournamentId } = competitionEngine.findParticipant({\n  participantId,\n  personId, // required only if no participantId provided\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getcompetitiondaterange"},"getCompetitionDateRange"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { startDate, endDate } = competitionEngine.getCompetitionDateRange();\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getcompetitionparticipants"},"getCompetitionParticipants"),(0,i.kt)("p",null,"Returns ",(0,i.kt)("strong",{parentName:"p"},"deepCopies")," of competition participants filtered by participantFilters which are arrays of desired participant attribute values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const participantFilters = {\n  accessorValues,\n  eventEntryStatuses, // boolean\n  participantTypes: [INDIVIDUAL],\n  participantRoles, [COMPETITOR],\n  signInStatus, // specific signIn status\n  eventIds, // events in which participants appear\n};\nconst {\n  competitionParticipants,\n  participantIdsWithConflicts // returns array of participantIds which have scheduling conflicts\n} =\n  competitionEngine.getCompetitionParticipants({\n    inContext, // optional - adds individualParticipants for all individualParticipantIds\n\n    withMatchUps, // optional - include all matchUps in which the participant appears, as well as potentialMatchUps\n    withScaleValues, // optional - include { ratings, rankings } attributes extracted from timeItems\n    withStatistics, // optional - adds events, machUps and statistics, e.g. 'winRatio'\n    withGroupings, // optional - include membership in group, pair, and team participants\n    withOpponents, // optional - include opponent participantIds\n    withSeeding, // optionsl - add event seeding\n    withEvents, // optional - defaults to true if any other context options are specified\n    withDraws, // optional - defaults to true if any other context options are specified\n    withISO2, // optional - will add ISO2 country code and countryName to participant persons\n    withIOC, // optional - will add IOC country code and countryName to participant persons\n\n    scheduleAnalysis: {\n      scheduledMinutesDifference // optional - scheduling conflicts determined by scheduledTime difference between matchUps\n    },\n\n    convertExtensions, // optional - BOOLEAN - convert extensions so _extensionName attributes\n    policyDefinitions, // optional - can accept a privacy policy to filter participant attributes\n    participantFilters, // optional - filters\n    usePublishState, // optional - BOOLEAN - don't add seeding information when not published\n  });\n")),(0,i.kt)("h3",{id:"implemented-participantfilters"},"Implemented participantFilters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"enableOrFiltering: boolean - use OR logic instead of default AND"),(0,i.kt)("li",{parentName:"ul"},"accessorValues: array of accessors and targeted value ",(0,i.kt)("inlineCode",{parentName:"li"},"[{ accessor, value }]")),(0,i.kt)("li",{parentName:"ul"},"drawEntryStatuses: array of ",(0,i.kt)("inlineCode",{parentName:"li"},"entryStatus")," values for participantIds found in draw.entries"),(0,i.kt)("li",{parentName:"ul"},"eventEntryStatuses: array of ",(0,i.kt)("inlineCode",{parentName:"li"},"entryStatus")," values for participantIds found in event.entries"),(0,i.kt)("li",{parentName:"ul"},"eventIds: array of targeted eventIds"),(0,i.kt)("li",{parentName:"ul"},"participantIds: array of targeted participantIds"),(0,i.kt)("li",{parentName:"ul"},"participantRoles: array of targeted participantRoles"),(0,i.kt)("li",{parentName:"ul"},"participantTypes: array of targeted participantTypes"),(0,i.kt)("li",{parentName:"ul"},"positionedParticipants: participantIds positioned in structures ",(0,i.kt)("inlineCode",{parentName:"li"},"[true, false, undefined]")),(0,i.kt)("li",{parentName:"ul"},"signInStatus: SIGNED_IN or SIGNED_OUT")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getcompetitionpenalties"},"getCompetitionPenalties"),(0,i.kt)("p",null,"Returns an array of all penalties issued for all tournaments loaded into competitionEngine."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { penalties } = competitionEngine.getCompetitionPenalties();\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getcompetitionvenues"},"getCompetitionVenues"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { venues, venueIds } = competitionEngine.getCompetitionVenues();\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"geteventmatchupformattiming"},"getEventMatchUpFormatTiming"),(0,i.kt)("p",null,"Method is used internally in advanced scheduling to determine averageMatchUp times for matchUps within an event."),(0,i.kt)("p",null,"Requires an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpFormats")," either be defined in scoring policy that is attached to the tournamentRecord or an event, or passed in as parameter. ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpFormats")," can be passed either as an array of strings, or an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"[{ matchUpFormat }]"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { eventMatchUpFormatTiming } =\n  competitionEngine.getEventMatchUpFormatTiming({\n    matchUpFormats, // optional - can be retrieved from policy\n    categoryType, // optional - categoryType is not part of TODS or event attributes, but can be defined in a policy\n    eventId,\n  });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getlinkedtournamentids"},"getLinkedTournamentIds"),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"linkedTournamentIds")," for each tournamentRecord loaded in ",(0,i.kt)("inlineCode",{parentName:"p"},"compeitionEngine"),"."),(0,i.kt)("p",null,'Caters for the possibility that, for instance, two "linked" tournaments and one "unlinked" tournament could be loaded.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { linkedTournamentIds } = competitionEngine.getLinkedTournamentIds();\n/*\n{\n  'tournamentId-1': ['tournamentId-2', 'tournamentId-3'],\n  'tournamentId-2': ['tournamentId-1', 'touranmentId-3'],\n  'tournamentId-3': ['tournamentId-1', 'tournamentId-2']\n}\n*/\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getmatchupdailylimits"},"getMatchUpDailyLimits"),(0,i.kt)("p",null,"Returns player daily match limits for singles/doubles/total matches."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { matchUpDailyLimits } = competitionEngine.getMatchUpDailyLimits({\n  tournamentId, // optional - scope search to specific tournamentRecord\n});\nconst { DOUBLES, SINGLES, total } = matchUpDailyLimits;\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getmatchupdependencies"},"getMatchUpDependencies"),(0,i.kt)("p",null,"For each ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpId")," returns an array of other ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpIds")," which occur earlier in the draw."),(0,i.kt)("p",null,"Optionally returns an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"participantIds")," which could potentially appear in each ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUp"),";\nused internally to ensure that auto scheduling respects the ",(0,i.kt)("inlineCode",{parentName:"p"},"timeAfterRecovery")," of all potential participants."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  matchUpDependencies: {\n    [matchUpId]: {\n      matchUpIds: [matchUpIdDependency], // array of all matchUpIds which occur prior to this matchUpId in the draw; crosses all structures\n      participantIds: [potentialParticipantIds], // array of all participantIds which could potentially appear in this matchUp\n      dependentMatchUpIds: [dependentMatchUpId], // array of matchUpIds which occur after this matchUpId in the draw; crosses all structures\n    },\n  },\n} = competitionEngine.getMatchUpDependencies({\n  includeParticipantDependencies, // boolean - defaults to false\n  drawIds, // optional array of drawIds to scope the analysis\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getrounds"},"getRounds"),(0,i.kt)("p",null,"Returns all rounds of all ",(0,i.kt)("inlineCode",{parentName:"p"},"structures")," in all ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentRecords"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { rounds, excludedRounds } = competitionEngine.getRounds({\n  excludeScheduleDateProfileRounds, // optional date string - exclude rounds which appear in schedulingProfile on given date\n  excludeCompletedRounds, // optional boolean - exclude rounds where all matchUps are completed\n  excludeScheduledRounds, // optional boolean - exclude rounds where all matchUps are scheduled\n  inContextMatchUps, // optional - if not provided will be read from tournamentRecords\n  schedulingProfile, // optional - if not provided will be read from tournamentRecords (where applicable)\n  withSplitRounds, // optional boolean - read schedulingProfile and split rounds where defined\n  matchUpFilters, // optional - filter competition matchUps before deriving rounds\n  withRoundId, // optional boolean - return a unique id for each derived round\n  context, // optional - object to be spread into derived rounds\n});\n")),(0,i.kt)("p",null,"Returns the following detail for each round:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"  {\n    roundSegment: { segmentsCount, segmentNumber }, // if the round has been split in schedulingProfile\n    winnerFinishingPositionRange,\n    unscheduledCount,\n    incompleteCount,\n    minFinishingSum,\n    matchUpsCount,\n    stageSequence,\n    segmentsCount, // when { withSplitRounds: true } and a round split is defined in schedulingProfile\n    structureName,\n    tournamentId,\n    isScheduled, // whether every matchUp in the round has been scheduled (does not consider matchUpStatus: BYE)\n    isComplete, // whether every matchUp in the round has been COMPLETED or ABANDONED/CANCELLED\n    matchUpType,\n    roundNumber,\n    structureId,\n    eventName,\n    roundName,\n    drawName,\n    matchUps,\n    byeCount\n    eventId,\n    drawId,\n    id, // unique id provided when { withRoundId: true }\n  } = round;\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getparticipantscaleitem"},"getParticipantScaleItem"),(0,i.kt)("p",null,"Return a ranking or rating or seeding value for a participant, referenced by participantId."),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"../concepts/scaleItems"},"Scale Items"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const scaleAttributes = {\n  scaleType: RATING,\n  eventType: SINGLES,\n  scaleName: 'WTN',\n  accessor, // optional - string determining how to access attribute if scaleValue is an object\n};\nconst {\n  scaleItem: { scaleValue },\n  tournamentId,\n} = competitionEngine.getParticipantScaleItem({\n  scaleAttributes,\n  participantId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getpersonrequests"},"getPersonRequests"),(0,i.kt)("p",null,"Returns an object with array of requests for each relevant ",(0,i.kt)("inlineCode",{parentName:"p"},"personId"),". Request objects are returned with a ",(0,i.kt)("inlineCode",{parentName:"p"},"requestId")," which can be used to call ",(0,i.kt)("a",{parentName:"p",href:"competition-engine-api#modifypersonrequests"},"modifyPersonRequests"),"."),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"competition-engine-api#addpersonrequests"},"addPersonRequests")," for request object structure."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { personRequests } = competitionEngine.getPersonRequests({\n  requestType, // optional filter\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getstate"},"getState"),(0,i.kt)("p",null,"Returns a deep copy ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentRecords")," which have been loaded, along with currently selected ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentId"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentEngine")," share state; ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentId")," points to the ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentRecord")," that\n",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentEngine")," methods will mutate.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { tournamentId, tournamentRecords } = competitionEngine.getState({\n  convertExtensions, // optional - convert extensions to '_' prefixed attributes\n  removeExtensions, // optional - strip all extensions out of tournamentRecord\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getschedulingprofile"},"getSchedulingProfile"),(0,i.kt)("p",null,"Returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"schedulingProfile")," (if present). Checks the integrity of the profile to account for any ",(0,i.kt)("inlineCode",{parentName:"p"},"venues")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"drawDefinitions")," which have been deleted."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { schedulingProfile } = competitionEngine.getSchedulingProfile();\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getschedulingprofileissues"},"getSchedulingProfileIssues"),(0,i.kt)("p",null,"Analyzes the ",(0,i.kt)("inlineCode",{parentName:"p"},"schedulingProfile")," (if any) that is attached to the ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentRecord(s)")," and reports any issues with the ordering of rounds."),(0,i.kt)("p",null,"The analysis for each ",(0,i.kt)("inlineCode",{parentName:"p"},"scheduleDate")," only includes ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps")," to be scheduled on that date.\nIn other words, the method only reports on scheduling issues relative to the group of ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpIds")," derived from rounds which are being scheduled for each date."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In some cases it is valid to schedule a second round, for instance, before a first round, because there may be some second round ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps")," which are ready to be played... possibly due to ",(0,i.kt)("inlineCode",{parentName:"p"},"participants")," advancing via first round BYEs or WALKOVERs."),(0,i.kt)("p",{parentName:"admonition"},"Regardless of issues reported, ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine.scheduleProfileRounds()")," will attempt to follow the desired order, but will not schedule ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps")," before dependencies.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  profileIssues: {\n    // object includes matchUpIds which are out of order\n    matchUpIdsShouldBeAfter: {\n      [matchUpId]: {\n        earlierRoundIndices: [index], // indices of scheduled rounds which must be scheduled before matchUpId\n        shouldBeAfter: [matchUpId], // array of matchUpIds which must be scheduled before matchUpId\n      },\n    },\n  },\n  // roundIndex is the index of the round to be scheduled within the schedulingProfile for a givn date\n  roundIndexShouldBeAfter: {\n    [scheduleDate]: {\n      [index]: [indexOfEarlierRound], // maps the index of the round within a date's scheduled rounds to those rounds which should be scheduled first\n    },\n  },\n} = competitionEngine.getSchedulingProfileIssues({\n  dates, // optional array of target dates\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"generatebookings"},"generateBookings"),(0,i.kt)("p",null,'This methods is used internally for creating a "virtual" view of court availability.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { bookings, relevantMatchUps } = competitionEngine.generateBookings({\n  defaultRecoveryMinutes, // optional\n  averageMatchUpMinutes, // optional\n  periodLength, // optional - scheduling period in minutes\n  scheduleDate, // optional - only consider matchUps scheduled on scheduleDate\n  venueIds, // optional - only consider matchUps at specific venue(s)\n  matchUps,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getvenuesandcourts"},"getVenuesAndCourts"),(0,i.kt)("p",null,"Returns an aggregate view of venues and courts across all tournamentRecords loaded into ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { courts, venues } = competitionEngine.getVenuesAndCourts({\n  convertExtensions, // optional boolean\n  ignoreDisabled, // optional boolean\n  dates, // optional - used with ignoreDisabled - applies to courts\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getvenuesreport"},"getVenuesReport"),(0,i.kt)("p",null,"Returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"venueReports")," array which provides details for each targt ",(0,i.kt)("inlineCode",{parentName:"p"},"venue")," for targt date(s)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { venuesReport } = competitionEngine.getVenuesReport({\n  dates, // optional array of target dates\n  venueIds, // optional array of target venueIds\n  ignoreDisabled, // optional boolean, defaults to true - ignore disabled venues/courts\n});\n\nconst {\n  availableCourts, // how many courts are available for date\n  availableMinutes, // total courts minutes available for date\n  scheduledMinutes, // minutes of court time that are scheduled for matchUps\n  scheduledMatchUpsCount, // number of scheduled matchUps\n  percentUtilization, // percent of available minutes utilized by scheduled matchUps\n} = venuesReport[0].venueReport[date];\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"linktournaments"},"linkTournaments"),(0,i.kt)("p",null,"Links all tournaments currently loaded in ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.linkTournaments();\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"matchupactions"},"matchUpActions"),(0,i.kt)("p",null,"Convenience pass through to ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentEngine.matchUpActions")," for use in contexts where multiple tournamentRecords are loaded into ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { matchUpActions } = competitionEngine.matchUpActions({\n  tournamentId,\n  matchUpId,\n  eventId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"matchupschedulechange"},"matchUpScheduleChange"),(0,i.kt)("p",null,"Swaps the schedule details of two scheduled matchUps."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.matchUpScheduleChange({\n  courtDayDate: dateSelected,\n  sourceMatchUpContextIds,\n  targetMatchUpContextIds,\n  sourceCourtId,\n  targetCourtId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"modifycourt"},"modifyCourt"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.modifyCourt({\n  courtId,\n  force, // applies only to dateAvailability, will remove scheduling information from matchUps where court is no longer available\n  modifications: {\n    courtName,\n    dateAvailability,\n    courtDimensions,\n    onlineResources,\n    surfaceCategory,\n    surfaceDate,\n    surfaceType,\n    altitude,\n    latitude,\n    longitude,\n    notes,\n    pace,\n  },\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"modifyeventmatchupformattiming"},"modifyEventMatchUpFormatTiming"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.modifyEventMatchUpFormatTiming({\n  recoveryMinutes,\n  averageMinutes,\n  matchUpFormat,\n  eventId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"modifymatchupformattiming"},"modifyMatchUpFormatTiming"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.modifyMatchUpFormatTiming({\n  matchUpFormat: 'SET3-S:6/TB7',\n  averageTimes: [\n    {\n      categoryNames: [U12, U14],\n      minutes: { [DOUBLES]: 110, default: 130 },\n    },\n    {\n      categoryNames: [U16, U18],\n      minutes: { [DOUBLES]: 100, default: 120 },\n    },\n  ],\n  recoveryTimes: [\n    { categoryNames: [], minutes: { default: 15, [DOUBLES]: 15 } },\n  ],\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"modifypersonrequests"},"modifyPersonRequests"),(0,i.kt)("p",null,"Modifies existing person requests."),(0,i.kt)("p",null,"Any requests without a ",(0,i.kt)("inlineCode",{parentName:"p"},"requestId")," will be ",(0,i.kt)("strong",{parentName:"p"},"added"),". Any requests without ",(0,i.kt)("inlineCode",{parentName:"p"},"requestType")," will be ",(0,i.kt)("strong",{parentName:"p"},"removed"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.modifyPersonRequests({\n  personId, // optional - scope to single personId; avoid brute-force updates\n  requests: [\n    {\n      requestType,\n      requestId, // if requestId is not present, will attempt to added\n      startTime,\n      endTime,\n      date,\n    },\n  ],\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"modifypenalty"},"modifyPenalty"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const notes = 'Hit ball into spectator';\nconst modifications = { notes };\ncompetitionEngine.modifyPenalty({ penaltyId, modifications });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"modifyvenue"},"modifyVenue"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/concepts/scheduling"},"Scheduling"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const modifications = {\n  venueName,\n  onlineResources,\n  venueAbbreviation,\n  courts: [\n    {\n      courtId: 'b9df6177-e430-4a70-ba47-9b9ff60258cb',\n      courtName: 'Custom Court 1',\n      dateAvailability: [\n        {\n          date: '2020-01-01', // if no date is provided then `startTime` and `endTime` will be considered default values\n          startTime: '16:30',\n          endTime: '17:30',\n        },\n      ],\n    },\n  ],\n};\ncompetitionEngine.modifyVenue({ venueId, modifications });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"publishorderofplay"},"publishOrderOfPlay"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.publishOrderOfPlay({\n  removePriorValues, // optional boolean - when true will delete prior timeItems\n  scheduledDates, // optional - if not provided will publish all scheduledDates\n  eventIds, // optional - if not provided will publish all eventIds\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removeeventmatchupformattiming"},"removeEventMatchUpFormatTiming"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeEventMatchUpFormatTiming({ eventId });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removeextension"},"removeExtension"),(0,i.kt)("p",null,"Removes an extension from all ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentRecords")," loaded into ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeExtension({ name });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removematchupcourtassignment"},"removeMatchUpCourtAssignment"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeMatchUpCourtAssignment({\n  tournamentId,\n  courtDayDate,\n  matchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removepersonrequests"},"removePersonRequests"),(0,i.kt)("p",null,"Removes person requests matching passed values. If no paramaters are provided, removes ",(0,i.kt)("strong",{parentName:"p"},"all")," person requests."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"result = competitionEngine.removePersonRequests({\n  personId, // optional - scope to personId\n  requestType, // optioanl - scope to requestType\n  requestId, // optional - scope to a single requestId\n  date, // optional - scope to a specific date\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removepenalty"},"removePenalty"),(0,i.kt)("p",null,"Removes a penalty from all relevant tournament participants."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removePenalty({ penaltyId });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removetournamentrecord"},"removeTournamentRecord"),(0,i.kt)("p",null,"Removes a tournamentRecord from ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine")," state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeTournamentRecord(tournamentId);\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removeunlinkedtournamentrecords"},"removeUnlinkedTournamentRecords"),(0,i.kt)("p",null,"Removes all tournamentRecords from ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine")," state that are unlinked."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeUnlinkedTournamentRecords();\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"reorderupcomingmatchups"},"reorderUpcomingMatchUps"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const matchUpContextIds = [{ tournamentId, drawId, matchUpId }];\ncompetitionEngine.reorderUpcomingMatchUps({\n  matchUpContextIds,\n  firstToLast, // boolean - direction of reorder\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"schedulematchups"},"scheduleMatchUps"),(0,i.kt)("p",null,"Auto schedule matchUps on a given date using the Garman formula."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'competitionEngine.scheduleMatchUps({\n  scheduleDate, // date string in the format `YYYY-MM-DD`\n  startTime, // optional - if not provided will be derived from court availability for the tiven date\n  endTime, // optional - if not provided will be derived from court availability for the tiven date\n  venueIds, // optional - defaults to all known; if a single venueId is provided then all matchUps will be scheduled for that venue\n  matchUpIds, // array of matchUpIds; if no schedulingProfile is present will be auto-sorted by draw size and roundNumbers\n  periodLength = 30, // optional - size of scheduling blocks\n  averageMatchUpMinutes = 90, // optional - defaults to 90\n  recoveryMinutes = 0, // optional - amount of time participants are given to recover between matchUps\n  matchUpDailyLimits, // optional - policy declaration; SINGLES, DOUBLES and total limits per individual participant\n  checkPotentialRequestConflicts, // boolean - defaults to true - consider individual requests when matchUp participants are "potential"\n});\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"scheduleprofilerounds"},"scheduleProfileRounds"),(0,i.kt)("p",null,"Auto-schedules all rounds which have been specified in a ",(0,i.kt)("inlineCode",{parentName:"p"},"schedulingProfile")," which has been saved to the tournamentRecord using ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine.setSchedulingProfile"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"SINGLES and DOUBLES ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps")," will be scheduled, but not TEAM ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const result = competitionEngine.scheduleProfileRounds({\n  checkPotentialRequestConflicts, // boolean - defaults to true - consider individual requests when matchUp participants are "potential"\n  periodLength = 30, // optional - size of scheduling blocks\n  clearScheduleDates, // optional - boolean: true to clear ALL dates, otherwise array of scheduleDates to clear\n  scheduleDates, // optional array of dates to schedule\n  dryRun, // boolean - only report what would happen without making modifications\n  pro: // boolean - defaults to false; schedule specific courts without using garman\n});\n\nconst {\n  scheduledDates, // dates for which matchUps have been scheduled\n  scheduledMatchUpIds, // array of matchUpIds which have been scheduled\n  noTimeMatchUpIds, // array of matchUpids which have NOT been scheduled\n  overLimitMatchUpIds, // matchUps not scheduled because of participant daily limits\n  requestConflicts, // array of { date, conflicts } objects for each date in schedulingProfile\n} = result;\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"setmatchupdailylimits"},"setMatchUpDailyLimits"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.setMatchUpDailyLimits({\n  dailyLimits: { SINGLES: 2, DOUBLES: 1, total: 3 },\n  tournamentId, // optional - scope to a specific tournamentId\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"setmatchupstatus"},"setMatchUpStatus"),(0,i.kt)("p",null,"Sets either matchUpStatus or score and winningSide; values to be set are passed in outcome object. Handles any winner/loser participant movements within or across structures."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const outcome = {\n  matchUpStatus, // optional\n  winningSide, // optional\n  score, // optional\n};\n\ncompetitionEngine.setMatchUpStatus({\n  disableScoreValidation, // optional boolean\n  allowChangePropagation, // optional boolean - allow winner/loser to be swapped and propgate change throughout draw structures\n  disableAutoCalc, // optional - applies only to { matchUpType: TEAM }\n  enableAutoCalc, // optional - applies only to { matchUpType: TEAM }\n  tournamentId,\n  matchUpTieId, // optional - if part of a TIE matchUp\n  matchUpId,\n  drawId,\n  outcome, // optional\n  schedule: {\n    // optional - set schedule items\n    courtIds, // optional - applies only to TEAM matchUps => creates .allocatedCourts\n    courtId, // requires scheduledDate\n    venueId,\n    scheduledDate,\n    scheduledTime,\n    startTime,\n    endTime,\n  },\n  notes, // optional - add note (string) to matchUp object\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"setstate"},"setState"),(0,i.kt)("p",null,"Loads tournament records into competitionEngine; supports both an array of tournamentRecords and an object with tournamentId keys."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const tournamentRecords = [tournamentRecord];\n// or const tournamentRecords = { [tournamentId]: tournamentRecord }\n\ncompetitionEngine.setsState(tournamentRecords, deepCopy, deepCopyConfig);\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"By default a deep copy of the ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentRecords")," is made so that mutations made by ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine")," do not affect the source objects. An optional boolean parameter, ",(0,i.kt)("em",{parentName:"p"},"deepCopy")," can be set to false to override this default behavior.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"deepCopyConfig")," is an optional configuration for ",(0,i.kt)("inlineCode",{parentName:"p"},"makeDeepCopy"),". In server configurations when ",(0,i.kt)("inlineCode",{parentName:"p"},"deepCopy")," is FALSE and ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentRecords")," are retrieved from Mongo, for instance, there are scenarios where nodes of the JSON structure contain prototypes which cannot be converted.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const deepCopyConfig = {\n  ignore, // optional - either an array of attributes to ignore or a function which processes attributes to determine whether to ignore them\n  toJSON, // optional - an array of attributes to convert to JSON if the attribute in question is an object with .toJSON property\n  stringify, // optional - an array of attributes to stringify\n  modulate, // optional - function to process every attribute and return custom values, or undefined, which continues normal processing\n};\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"setschedulingprofile"},"setSchedulingProfile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.setSchedulingProfile({ schedulingProfile });\n")),(0,i.kt)("h2",{id:"settournamentrecord"},"setTournamentRecord"),(0,i.kt)("p",null,"Adds a tournamentRecord to ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine")," state, or overwrite/replace an existing ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentRecord")," with the same ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentId"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.setTournamentRecord(tournamentRecord);\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"toggleparticipantcheckinstate"},"toggleParticipantCheckInState"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.toggleParticipantCheckInState({\n  drawId,\n  matchUpId,\n  tournamentId,\n  participantId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"unlinktournament"},"unlinkTournament"),(0,i.kt)("p",null,"Unlink the tournament specified by ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentId")," from other tournaments loaded in ",(0,i.kt)("inlineCode",{parentName:"p"},"compeitionEngine"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.unlinkTournament({ tournamentId });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"unlinktournaments"},"unlinkTournaments"),(0,i.kt)("p",null,"Removes links between all tournaments currently loaded in ",(0,i.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.unlinkTournaments();\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"unpublishorderofplay"},"unPublishOrderOfPlay"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.unPublishOrderOfPlay({\n  removePriorValues, // optional boolean - when true will delete prior timeItems\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"updatetiematchupscore"},"updateTieMatchUpScore"),(0,i.kt)("p",null,"Trigger automatic calculation of the score of a TEAM matchUp."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.updateTieMatchUpScore({\n  tournamentId,\n  matchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"validateschedulingprofile"},"validateSchedulingProfile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { valid, error } = competitionEngine.validateSchedulingProfile({\n  schedulingProfile,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"version"},"version"),(0,i.kt)("p",null,"Returns NPM package version. Can be used in configurations that utilize Competition Factory engines on both client and server to ensure equivalency."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const version = competitionEngine.version();\n")),(0,i.kt)("hr",null))}c.isMDXComponent=!0}}]);