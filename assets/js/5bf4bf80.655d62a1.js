(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var c=n(0),a=n.n(c);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);t&&(c=c.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,c)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,c,a=function(e,t){if(null==e)return{};var n,c,a={},o=Object.keys(e);for(c=0;c<o.length;c++)n=o[c],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(c=0;c<o.length;c++)n=o[c],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,c=e.mdxType,o=e.originalType,r=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),b=c,m=u["".concat(r,".").concat(b)]||u[b]||d[b]||o;return n?a.a.createElement(m,i(i({ref:t},p),{},{components:n})):a.a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var o=n.length,r=new Array(o);r[0]=b;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:c,r[1]=i;for(var p=2;p<o;p++)r[p]=n[p];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return p}));var c=n(3),a=(n(0),n(101));const o={name:"API",title:"Competition Engine API"},r={unversionedId:"apis/competition-engine-api",id:"apis/competition-engine-api",isDocsHomePage:!1,title:"Competition Engine API",description:"allCompetitionMatchUps",source:"@site/docs/apis/competition-engine-api.md",slug:"/apis/competition-engine-api",permalink:"/tods-competition-factory/docs/apis/competition-engine-api",version:"current",sidebar:"docs",previous:{title:"Mocks Engine API",permalink:"/tods-competition-factory/docs/apis/mocks-engine-api"},next:{title:"Tournament Engine API",permalink:"/tods-competition-factory/docs/apis/tournament-engine-api"}},i=[{value:"allCompetitionMatchUps",id:"allcompetitionmatchups",children:[]},{value:"competitionMatchUps",id:"competitionmatchups",children:[]},{value:"competitionScheduleMatchUps",id:"competitionschedulematchups",children:[]},{value:"devContext",id:"devcontext",children:[]},{value:"getState",id:"getstate",children:[]},{value:"getVenuesAndCourts",id:"getvenuesandcourts",children:[]},{value:"matchUpScheduleChange",id:"matchupschedulechange",children:[]},{value:"removeMatchUpCourtAssignment",id:"removematchupcourtassignment",children:[]},{value:"reorderUpcomingMatchUps",id:"reorderupcomingmatchups",children:[]},{value:"scheduleMatchUps",id:"schedulematchups",children:[]},{value:"setState",id:"setstate",children:[]},{value:"setSubscriptions",id:"setsubscriptions",children:[]},{value:"toggleParticipantCheckInState",id:"toggleparticipantcheckinstate",children:[]},{value:"version",id:"version",children:[]}],s={toc:i};function p({components:e,...t}){return Object(a.b)("wrapper",Object(c.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"allcompetitionmatchups"},"allCompetitionMatchUps"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"const { matchUps } = competitionEngine.allCompetitionMatchUps();\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"competitionmatchups"},"competitionMatchUps"),Object(a.b)("p",null,'Return an array of all matchUps, "inContext", contained within the collection of tournaments loaded into `competitionEngine.'),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"const { matchUps } = competitionEngine.competitionMatchUps();\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"competitionschedulematchups"},"competitionScheduleMatchUps"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"const matchUpFilters = {\n  isMatchUpTie: false,\n  scheduledDate, // scheduled date of matchUps to return\n\n  localTimeZone, // optional - used to convert scheduleDate\n  localPerspective: true,\n};\n\nconst {\n  completedMatchUps,\n  dateMatchUps,\n  courtsData,\n  venues,\n} = competitionEngine.competitionScheduleMatchUps({ matchUpFilters });\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"devcontext"},"devContext"),Object(a.b)("p",null,"Setting devContext(true) bypasses ",Object(a.b)("strong",{parentName:"p"},"try {} catch (err) {}")," code block and in some cases enables enhanced logging"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"competitionEngine.devContext(true);\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"getstate"},"getState"),Object(a.b)("p",null,"Returns a deep copy of the current competitionEngine state."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"const { tournaentRecords } = competition.getState({\n  convertExtensions, // optional - convert extensions to '_' prefixed attributes\n});\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"getvenuesandcourts"},"getVenuesAndCourts"),Object(a.b)("p",null,"Returns an aggregate view of venues and courts across all tournamentRecords loaded into ",Object(a.b)("inlineCode",{parentName:"p"},"competitionEngine"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"const { courts, venues } = competitionEngine.getVenuesAndCourts();\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"matchupschedulechange"},"matchUpScheduleChange"),Object(a.b)("p",null,"Swaps the schedule details of two scheduled matchUps."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"competitionEngine.matchUpScheduleChange({\n  sourceMatchUpContextIds,\n  targetMatchUpContextIds,\n  sourceCourtId,\n  targetCourtId,\n  courtDayDate: dateSelected,\n});\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"removematchupcourtassignment"},"removeMatchUpCourtAssignment"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeMatchUpCourtAssignment({\n  drawId,\n  matchUpId,\n  tournamentId,\n  courtDayDate,\n});\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"reorderupcomingmatchups"},"reorderUpcomingMatchUps"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"const matchUpContextIds = [{ tournamentId, drawId, matchUpId }];\ncompetitionEngine.reorderUpcomingMatchUps({\n  matchUpContextIds,\n  firstToLast, // boolean - direction of reorder\n});\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"schedulematchups"},"scheduleMatchUps"),Object(a.b)("p",null,"Auto schedule matchUps on a given date using the Garmin formula."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"competitionEngine.scheduleMatchUps({\n  date,\n  matchUps\n  venueIds,\n  periodLength = 30,\n  averageMatchUpTime = 90,\n});\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"setstate"},"setState"),Object(a.b)("p",null,"Loads tournament records into competitionEngine."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"competitionEngine.setsState(tournamentRecords, deepCopy);\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"setsubscriptions"},"setSubscriptions"),Object(a.b)("p",null,"Please refer to the ",Object(a.b)("a",{parentName:"p",href:"../concepts/subscriptions"},"Subscriptions")," in General Concepts."),Object(a.b)("hr",null),Object(a.b)("h2",{id:"toggleparticipantcheckinstate"},"toggleParticipantCheckInState"),Object(a.b)("hr",null),Object(a.b)("h2",{id:"version"},"version"),Object(a.b)("p",null,"Returns NPM package version. Can be used in configurations that utilize Competition Factory engines on both client and server to ensure equivalency."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"const version = competitionEngine.version();\n")),Object(a.b)("hr",null))}p.isMDXComponent=!0}}]);