"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[528],{4137:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,r(r({ref:t},s),{},{components:n})):a.createElement(h,r({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},806:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(4137));const o={title:"matchUpEngine API"},r=void 0,l={unversionedId:"apis/matchup-engine-api",id:"apis/matchup-engine-api",title:"matchUpEngine API",description:"All matchUpEngine methods which make a mutation return either { success: true } or { error }",source:"@site/docs/apis/matchup-engine-api.md",sourceDirName:"apis",slug:"/apis/matchup-engine-api",permalink:"/tods-competition-factory/docs/apis/matchup-engine-api",draft:!1,tags:[],version:"current",frontMatter:{title:"matchUpEngine API"},sidebar:"docs",previous:{title:"MatchUp Engine",permalink:"/tods-competition-factory/docs/engines/matchup-engine-overview"},next:{title:"Overview",permalink:"/tods-competition-factory/docs/engines/scale-engine-overview"}},c={},p=[{value:"addCollectionDefinition",id:"addcollectiondefinition",level:2},{value:"addCollectionGroup",id:"addcollectiongroup",level:2},{value:"analyzeMatchUp",id:"analyzematchup",level:3},{value:"modifyCollectionDefinition",id:"modifycollectiondefinition",level:2},{value:"orderCollectionDefinitions",id:"ordercollectiondefinitions",level:2},{value:"removeCollectionDefinition",id:"removecollectiondefinition",level:2},{value:"removeCollectionGroup",id:"removecollectiongroup",level:2},{value:"reverseScore",id:"reversescore",level:2},{value:"scoreHasValue",id:"scorehasvalue",level:2},{value:"tallyParticipantResults",id:"tallyparticipantresults",level:2},{value:"validateScore",id:"validatescore",level:2}],s={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"All ",(0,i.kt)("strong",{parentName:"p"},"matchUpEngine")," methods which make a mutation return either ",(0,i.kt)("inlineCode",{parentName:"p"},"{ success: true }")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"{ error }")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addcollectiondefinition"},"addCollectionDefinition"),(0,i.kt)("p",null,"Adds a ",(0,i.kt)("inlineCode",{parentName:"p"},"collectionDefinition")," to the specified target, either ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUp"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"structure"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"drawDefinition")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"event"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"matchUpEngine.addCollectionDefinition({\n  updateInProgressMatchUps, // defaults to true; in progress matchUps have matchUpStatus: IN_PROGRESS\n  collectionDefinition, // will be validated\n  tieFormatName, // if not provided, existing tieFormatName will be deleted\n  uuids, // optional - array of UUIDs to use for newly created matchUps\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addcollectiongroup"},"addCollectionGroup"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"matchUpEngine.addCollectionGroup({\n  tieFormatName: 'Swelled',\n  groupDefinition,\n  collectionIds,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"analyzematchup"},"analyzeMatchUp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let analysis = matchUpEngine.analyzeMatchUp({ matchUp });\n\nconst {\n  isActiveSet,\n  isExistingSet,\n  existingValue,\n  hasExistingValue,\n  isValidSideNumber,\n  completedSetsCount,\n  isCompletedMatchUp,\n  isLastSetWithValues,\n  validMatchUpOutcome,\n  matchUpScoringFormat: {\n    bestOf,\n    setFormat: { setTo, tiebreakFormat, tiebreakAt },\n  },\n  calculatedWinningSide,\n  validMatchUpWinningSide,\n  completedSetsHaveValidOutcomes,\n  specifiedSetAnalysis: {\n    expectTiebreakSet,\n    expectTimedSet,\n    hasTiebreakCondition,\n    isCompletedSet,\n    isDecidingSet,\n    isTiebreakSet,\n    isValidSet,\n    isValidSetNumber,\n    isValidSetOutcome,\n    setFormat,\n    sideGameScores,\n    sideGameScoresCount,\n    sidePointScores,\n    sidePointScoresCount,\n    sideTiebreakScores,\n    sideTiebreakScoresCount,\n    winningSide,\n  },\n} = analysis;\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"modifycollectiondefinition"},"modifyCollectionDefinition"),(0,i.kt)("p",null,"Modifies the ",(0,i.kt)("inlineCode",{parentName:"p"},"collectionName")," and/or ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpFormat")," for targeted ",(0,i.kt)("inlineCode",{parentName:"p"},"collectionId")," within ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUp.tieFormat"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"matchUpEngine.modifyCollectionDefinition({\n  collectionName, // optional\n  matchUpFormat, // optional\n  collectionId, // required\n\n  // value assignment, only one is allowed to have a value\n  collectionValueProfiles, // optional - [{ collectionPosition: 1, value: 2 }] - there must be a value provided for all matchUp positions\n  collectionValue, // optional - value awarded for winning more than half of the matchUps in the collection\n  matchUpValue, // optional - value awarded for each matchUp won\n  scoreValue, // optional - value awarded for each game or point won (points for tiebreak sets)\n  setValue, // optional - value awarded for each set won\n  gender, // optional\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"ordercollectiondefinitions"},"orderCollectionDefinitions"),(0,i.kt)("p",null,"Modify the array order of ",(0,i.kt)("inlineCode",{parentName:"p"},"tieFormat.collectionDefinitions")," for an ",(0,i.kt)("inlineCode",{parentName:"p"},"event"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"drawDefinition"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"structure"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUp"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"matchUpEngine.orderCollectionDefinitions({\n  orderMap: { collectionId1: 1, collectionId2: 2 },\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removecollectiondefinition"},"removeCollectionDefinition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"matchUpEngine.removeCollectionDefinition({\n  updateInProgressMatchUps, // optional; defaults to true\n  tieFormatComparison, // optional; defaults to false; when true will not delete unique collections on unscored matchUps\n  tieFormatName, // any time a collectionDefinition is modified a new name must be provided\n  collectionId, // required - id of collectionDefinition to be removed\n  structureId, // optional - if removing from tieFormat associated with a specific structure\n  matchUpId, // optional - if removing from tieFormat asscoiated with a specific matchUp\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removecollectiongroup"},"removeCollectionGroup"),(0,i.kt)("p",null,"Removes a ",(0,i.kt)("inlineCode",{parentName:"p"},"collectionGroup")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"tieFormat")," found for the ",(0,i.kt)("inlineCode",{parentName:"p"},"event"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"drawDefinition"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"structure")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUp"),"; recalculates"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"matchUpEngine.removeCollectionGroup({\n  updateInProgressMatchUps, // optional - defaults to true\n  tieFormatName: 'New tieFormat', // if no name is provided then there will be no name\n  collectionGroupNumber: 1,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"reversescore"},"reverseScore"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { reversedScore } = machUpEngine.reverseScore({ score });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"scorehasvalue"},"scoreHasValue"),(0,i.kt)("p",null,"Returns boolean whether or not a ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUp.score")," contains a point, game or set value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const result = matchUpEngine.scoreHasValue(); // use matchUp that is in state\nconst result = matchUpEngine.scoreHasValue({ matchUp }); // pass matchUp\nconst result = matchUpEngine.scoreHasValue({ score }); // pass score\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"tallyparticipantresults"},"tallyParticipantResults"),(0,i.kt)("p",null,"Processes ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"{ drawType: 'ROUND_ROBIN' }")," from a single grouping within a ROUND_ROBIN structure and produces a detailed tally of particpant metrics."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { participantResults } = matchUpEngine.tallyParticipantResults({\n  matchUpFormat, // required for accurate calculations\n  tallyPolicy, // optional - can configure determination of winner when tied values\n  subOrderMap, // map { [participantId]: subOrder } // manual determination of order when ties cannot be broken\n  matchUps, // optional - array of Group matchUps; will use matchUps in state when not provided\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"validatescore"},"validateScore"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { valid, error } = validateScore({\n  matchUpFormat,\n  matchUpStatus,\n  winningSide,\n  score,\n});\n")),(0,i.kt)("hr",null))}d.isMDXComponent=!0}}]);