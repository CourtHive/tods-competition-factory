"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9898],{3805:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>u});var r=t(758);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),d=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(p.Provider,{value:n},e.children)},y="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),y=d(t),g=a,u=y["".concat(p,".").concat(g)]||y[g]||c[g]||i;return t?r.createElement(u,o(o({ref:n},l),{},{components:t})):r.createElement(u,o({ref:n},l))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[y]="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},911:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=t(2232),a=(t(758),t(3805));const i={title:"Entries Governor"},o=void 0,s={unversionedId:"governors/entries-governor",id:"governors/entries-governor",title:"Entries Governor",description:"addDrawEntries",source:"@site/docs/governors/entries-governor.md",sourceDirName:"governors",slug:"/governors/entries-governor",permalink:"/tods-competition-factory/docs/governors/entries-governor",draft:!1,tags:[],version:"current",frontMatter:{title:"Entries Governor"},sidebar:"docs",previous:{title:"Draws Governor",permalink:"/tods-competition-factory/docs/governors/draws-governor"},next:{title:"Event Governor",permalink:"/tods-competition-factory/docs/governors/event-governor"}},p={},d=[{value:"addDrawEntries",id:"adddrawentries",level:2},{value:"addEventEntries",id:"addevententries",level:2},{value:"addEventEntryPairs",id:"addevententrypairs",level:2},{value:"checkValidEntries",id:"checkvalidentries",level:2},{value:"destroyGroupEntry",id:"destroygroupentry",level:2},{value:"destroyPairEntry",id:"destroypairentry",level:2},{value:"modifyEntriesStatus",id:"modifyentriesstatus",level:2},{value:"modifyEventEntries",id:"modifyevententries",level:2},{value:"setEntryPosition",id:"setentryposition",level:2},{value:"setEntryPositions",id:"setentrypositions",level:2}],l={toc:d},y="wrapper";function c(e){let{components:n,...t}=e;return(0,a.yg)(y,(0,r.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import { entriesGovernor } from 'tods-competition-factory';\n")),(0,a.yg)("h2",{id:"adddrawentries"},"addDrawEntries"),(0,a.yg)("p",null,"Bulk add an array of ",(0,a.yg)("inlineCode",{parentName:"p"},"participantIds")," to a specific ",(0,a.yg)("strong",{parentName:"p"},"stage")," of a draw with a specific ",(0,a.yg)("strong",{parentName:"p"},"entryStatus"),". Will fail if ",(0,a.yg)("inlineCode",{parentName:"p"},"participantIds")," are not already present in ",(0,a.yg)("inlineCode",{parentName:"p"},"event.entries"),". Use ",(0,a.yg)("inlineCode",{parentName:"p"},"addEventEntries")," to add to both ",(0,a.yg)("inlineCode",{parentName:"p"},"event")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"drawDefinition")," at the same time."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"engine.addDrawEntries({\n  suppressDuplicateEntries, // do not throw error on duplicates; instead notify to DATA_ISSUE subscribers\n  ignoreStageSpace, // optional boolean to disable checking available positions\n  entryStageSequence, // optional - applies to qualifying\n  autoEntryPositions, // optional - keeps entries ordered by entryStage/entryStatus and auto-increments\n  entryStatus: ALTERNATE, // optional\n  entryStage: MAIN, // optional\n  participantIds,\n  eventId,\n  drawId,\n});\n")),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"addevententries"},"addEventEntries"),(0,a.yg)("p",null,"Adds ",(0,a.yg)("inlineCode",{parentName:"p"},"participantIds")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"event.entries"),"; optionally pass drawId to add participantIds to ",(0,a.yg)("inlineCode",{parentName:"p"},"flightProfile.flight[].drawEntries")," at the same time."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Will ",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("em",{parentName:"strong"},"not"))," throw an error if unable to add entries into specified ",(0,a.yg)("inlineCode",{parentName:"p"},"flightProfile.flight[].drawEntries"),",\nwhich can occur if a ",(0,a.yg)("inlineCode",{parentName:"p"},"drawDefinition")," has already been generated and an attempt is made to add\na participant with ",(0,a.yg)("inlineCode",{parentName:"p"},"entryStatus: DIRECT_ACCEPTANCE"),".")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"engine.addEventEntries({\n  suppressDuplicateEntries, // do not throw error on duplicates; instead notify to DATA_ISSUE subscribers\n  entryStatus: ALTERNATE, // optional; defaults to DIRECT_ACCEPTANCE\n  entryStage: MAIN, // optional; defaults to MAIN\n  autoEntryPositions, // optional - keeps entries ordered by entryStage/entryStatus and auto-increments\n  participantIds,\n  enforceGender, // optional - defaults to true\n  eventId,\n  drawId, // optional - will add participantIds to specified flightProfile.flight[].drawEntries and drawDefinition.entries (if possible)\n});\n")),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"addevententrypairs"},"addEventEntryPairs"),(0,a.yg)("p",null,"Add ",(0,a.yg)("strong",{parentName:"p"},"PAIR")," participant to an event. Creates new ",(0,a.yg)("inlineCode",{parentName:"p"},"{ participantType: PAIR }")," participants if the combination of ",(0,a.yg)("inlineCode",{parentName:"p"},"individualParticipantIds")," does not already exist."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"engine.addEventEntryPairs({\n  allowDuplicateParticipantIdPairs, // optional - boolean - allow multiple pair participants with the same individualParticipantIds\n  uuids, // optional - array of UUIDs to use for newly created pairs\n  entryStatus: ALTERNATE, // optional\n  entryStage: QUALIFYING, // optional\n  participantIdPairs,\n  eventId,\n});\n")),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"checkvalidentries"},"checkValidEntries"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"const { error, success } = engine.checkValidEntries({\n  consideredEntries, // optional array of entries to check\n  enforceGender, // optional boolean - defaults to true\n  eventId, // required\n});\n")),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"destroygroupentry"},"destroyGroupEntry"),(0,a.yg)("p",null,'Removes a "grouping" entry from a event and adds the ',(0,a.yg)("inlineCode",{parentName:"p"},"individualParticipantIds")," to entries. Grouping entries are ",(0,a.yg)("inlineCode",{parentName:"p"},"participantType")," ",(0,a.yg)("strong",{parentName:"p"},"TEAM")," and ",(0,a.yg)("strong",{parentName:"p"},"PAIR"),", both of which include ",(0,a.yg)("inlineCode",{parentName:"p"},"individualParticipantIds"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"engine.destroyGroupEntry({\n  participantId,\n  eventId,\n\n  entryStatus, // optional - new entryStatus for individualParticipantIds\n  removeGroupParticipant, // optional - removes group participant from tournament participants\n});\n")),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"destroypairentry"},"destroyPairEntry"),(0,a.yg)("p",null,"Removes a ",(0,a.yg)("inlineCode",{parentName:"p"},"{ participantType: PAIR }")," entry from an event and adds the individualParticipantIds to entries as entryStatus: UNGROUPED"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"engine.destroyPairEntry({\n  participantId,\n  eventId,\n});\n")),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"modifyentriesstatus"},"modifyEntriesStatus"),(0,a.yg)("p",null,"Modify the entryStatus of participants already in an event or flight/draw. Does not allow participants assigned positions in structures to have an entryStatus of WITHDRAWN."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"const result = engine.modifyEntriesStatus({\n  autoEntryPositions, // optional - keeps entries ordered by entryStage/entryStatus and auto-increments\n  participantIds, // ids of participants whose entryStatus will be modified\n  entryStatus, // new entryStatus\n  entryStage, // optional - e.g. QUALIFYING\n  eventSync, // optional - if there is only a single drawDefinition in event, keep event.entries in sync\n  extension, // optional - { name, value } - add if value; removes if value is undefined\n  eventId, // id of event where the modification(s) will occur\n  drawId, // optional - scope to a specific flight/draw\n  stage, // optional - scope to a specific stage\n});\n")),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"modifyevententries"},"modifyEventEntries"),(0,a.yg)("p",null,"Modify the entries for an event. For DOUBLES events automatically create PAIR participants if not already present."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"engine.modifyEventEntries({\n  entryStatus = DIRECT_ACCEPTANCE,\n  unpairedParticipantIds = [],\n  participantIdPairs = [],\n  entryStage = MAIN,\n  eventId,\n})\n")),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"setentryposition"},"setEntryPosition"),(0,a.yg)("p",null,"Set entry position a single event entry"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"engine.setEntryPosition({\n  entryPosition,\n  participantId,\n  eventId, // optional if drawId is provided\n  drawId, // optional if eventId is provided\n});\n")),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"setentrypositions"},"setEntryPositions"),(0,a.yg)("p",null,"Set entry position for multiple event entries."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"engine.setEntryPositions({\n  entryPositions, // array of [{ entryPosition: 1, participantId: 'participantid' }]\n  eventId, // optional if drawId is provided\n  drawId, // optional if eventId is provided\n});\n")),(0,a.yg)("hr",null))}c.isMDXComponent=!0}}]);