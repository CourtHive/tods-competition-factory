"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2552],{7942:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(959);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(t),u=a,f=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2473:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(8957),a=(t(959),t(7942));const o={title:"mocksEngine"},i=void 0,s={unversionedId:"testing/mocks-engine",id:"testing/mocks-engine",title:"mocksEngine",description:"mocksEngine generates complete tournament objects, or tournamentRecords, as well as mock persons, participants and matchUp outcomes.",source:"@site/docs/testing/mocks-engine.md",sourceDirName:"testing",slug:"/testing/mocks-engine",permalink:"/tods-competition-factory/docs/testing/mocks-engine",draft:!1,tags:[],version:"current",frontMatter:{title:"mocksEngine"},sidebar:"docs",previous:{title:"Testing Overview",permalink:"/tods-competition-factory/docs/testing/testing-overview"},next:{title:"Factory Server",permalink:"/tods-competition-factory/docs/testing/factory-server"}},p={},c=[{value:"Simple Example",id:"simple-example",level:3},{value:"drawProfiles",id:"drawprofiles",level:2},{value:"score completion",id:"score-completion",level:3},{value:"eventProfiles",id:"eventprofiles",level:2}],l={toc:c},m="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { mocksEngine } from 'tods-competition-factory';\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"mocksEngine")," generates complete tournament objects, or ",(0,a.kt)("inlineCode",{parentName:"p"},"tournamentRecords"),", as well as mock ",(0,a.kt)("inlineCode",{parentName:"p"},"persons"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"participants")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"matchUp")," outcomes."),(0,a.kt)("h3",{id:"simple-example"},"Simple Example"),(0,a.kt)("p",null,"Generates a tournament record with, by default, 32 participants."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { tournamentRecord } = mocksEngine.generateTournamentRecord();\n")),(0,a.kt)("h2",{id:"drawprofiles"},"drawProfiles"),(0,a.kt)("p",null,"In testing, very specific scenarios are required. Any number of draws can be added to a generated tournament, and scores for specific ",(0,a.kt)("inlineCode",{parentName:"p"},"matchUps")," within the generated draw structures can be added as well."),(0,a.kt)("p",null,"The completed ",(0,a.kt)("inlineCode",{parentName:"p"},"matchUps")," in this example may be found by navigating in the ",(0,a.kt)("strong",{parentName:"p"},"Result")," panel below:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"tournamentRecord => events[0] => drawDefinitions[0] => structures[0]")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/concepts/matchup-context"},"Concepts => Context")," for more direct access to ",(0,a.kt)("inlineCode",{parentName:"p"},"matchUps"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function MocksEngineDemo(props) {\n  const drawProfiles = [\n    { drawSize: 8, eventType: 'DOUBLES' },\n    { drawSize: 4, drawType: 'ROUND_ROBIN' },\n  ];\n  const { tournamentRecord } = mocksEngine.generateTournamentRecord({\n    completeAllMatchUps: true,\n    drawProfiles,\n  });\n\n  return <Tournament data={tournamentRecord} />;\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"drawProfiles")," may contain any of the parameters normally passed to ",(0,a.kt)("a",{parentName:"p",href:"/docs/governors/generation-governor#generatedrawdefinition"},"generateDrawDefinition"),",\nwith the addition of ",(0,a.kt)("inlineCode",{parentName:"p"},"{ withPlayoffs }")," which may contain any of the parameters passed to ",(0,a.kt)("a",{parentName:"p",href:"/docs/governors/draws-governor#addplayoffstructures"},"addPlayoffStructures"),"."),(0,a.kt)("p",{parentName:"admonition"},"Additionally, the parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"idPrefix")," may be used to define a string value to prepend generated ",(0,a.kt)("inlineCode",{parentName:"p"},"matchUpIds"),", which will then include ",(0,a.kt)("inlineCode",{parentName:"p"},"roundNumber")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"roundPosition"),".")),(0,a.kt)("h3",{id:"score-completion"},"score completion"),(0,a.kt)("p",null,"In the following example a Doubles draw with 32 positions is generated with 30 PAIR participants, leaving two positions to be filled with BYEs. The score for the second ",(0,a.kt)("inlineCode",{parentName:"p"},"matchUp")," in the first round is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function MocksEngineDemo(props) {\n  const drawProfiles = [\n    {\n      drawSize: 32,\n      participantsCount: 30,\n      participantType: 'PAIR',\n      outcomes: [\n        {\n          roundNumber: 1,\n          roundPosition: 2,\n          scoreString: '6-1 6-2',\n          winningSide: 1,\n        },\n      ],\n    },\n  ];\n\n  const { tournamentRecord } = mocksEngine.generateTournamentRecord({\n    drawProfiles,\n  });\n\n  return <Tournament data={tournamentRecord} />;\n}\n")),(0,a.kt)("h2",{id:"eventprofiles"},"eventProfiles"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"eventProfiles")," enable multiple draws to be generated in a single event."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const eventProfiles = [\n  {\n    eventName: 'Event Flights Test',\n    eventType: SINGLES,\n    category: {\n      categoryName: 'U12',\n    },\n    matchUpFormat: FORMAT_STANDARD,\n    drawProfiles: [\n      {\n        drawSize: 16,\n        drawName: 'Qualifying Draw',\n        stage: QUALIFYING,\n      },\n      {\n        drawSize: 32,\n        qualifyingPositions: 4,\n        drawName: 'Main Draw',\n        drawType: COMPASS,\n      },\n      {\n        drawName: 'Consolation Draw',\n        stage: VOLUNTARY_CONSOLATION,\n      },\n    ],\n  },\n];\nconst {\n  eventIds: [eventId],\n  drawIds,\n} = mocksEngine.generateTournamentRecord({\n  eventProfiles,\n});\n")))}d.isMDXComponent=!0}}]);