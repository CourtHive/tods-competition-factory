"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4406],{888:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>u});var r=t(1527),s=t(7942),o=t(8681),i=t(7407);const a={title:"Draw Generation"},c=void 0,d={id:"concepts/draw-generation",title:"Draw Generation",description:"Example",source:"@site/docs/concepts/draw-generation.mdx",sourceDirName:"concepts",slug:"/concepts/draw-generation",permalink:"/tods-competition-factory/docs/concepts/draw-generation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Draw Generation"},sidebar:"docs",previous:{title:"Context / Hydration",permalink:"/tods-competition-factory/docs/concepts/context"},next:{title:"Global State",permalink:"/tods-competition-factory/docs/concepts/globalState"}},l={},u=[{value:"Example",id:"example",level:2},{value:"Draw Types",id:"draw-types",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["Themed visualization of draws by ",(0,r.jsx)(n.a,{href:"https://github.com/CourtHive/courthive-components",children:"courthive-components"}),"."]}),"\n",(0,r.jsx)(o.Z,{children:()=>(0,r.jsx)(i.Z,{drawType:"COMPASS",drawSize:8})}),"\n",(0,r.jsx)(n.h2,{id:"draw-types",children:"Draw Types"}),"\n",(0,r.jsxs)(n.p,{children:["The convenience method ",(0,r.jsx)(n.code,{children:"tournamentEngine.generateDrawDefinition()"})," generates the following draw types:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"AD_HOC"})," - An arbitrary number of matchUps may be added to an arbitrary number of rounds."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"COMPASS"})," - Includes up to 8 structures; ensures participants a minimum of 3 matchUps."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CURTIS"})," - Includes 2 consolation structures, each fed by 2 main structure rounds, and a 3-4 playoff."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DOUBLE_ELIMINATION"})," - Main structure losers feed into consolation; consolation winner plays main structure winner."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FEED_IN_CHAMPIONSHIP_TO_QF"})," - Main structure losers feed into consolation through the Quarterfinals."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FEED_IN_CHAMPIONSHIP_TO_R16"})," - Main structure losers feed into consolation through the Round of 16."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FEED_IN_CHAMPIONSHIP_TO_SF"})," - Main structure losers feed into consolation through the Semifinals."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FEED_IN_CHAMPIONSHIP"})," - Main structure losers in every round feed into consolation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FEED_IN"}),' - Also known as "staggered entry", participants feed into the main structure at specified rounds.']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FIRST_MATCH_LOSER_CONSOLATION"})," - Losers feed into consolation whenever their first loss occurs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FIRST_ROUND_LOSER_CONSOLATION"})," - Only first round losers feed into consolation structure."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MODIFIED_FEED_IN_CHAMPIONSHIP"})," - First and Second round losers are fed into consolation structure."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OLYMPIC"})," - Includes up to 4 structures; ensures participants a minimum of 2 matchUps."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PLAY_OFF"})," - All positions are played off; structures are added to ensure unique finishing positions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ROUND_ROBIN"})," - Participants divided into specified group sizes."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ROUND_ROBIN_WITH_PLAYOFF"})," - Includes automated generation of specified playoff structures."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SINGLE_ELIMINATION"})," - Standard knockout draw structure."]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Additional Playoff Structures"}),"\n",(0,r.jsx)(n.code,{children:"getAvailablePlayoffProfiles()"})," provides valid attributes for playoff structures generation.\n",(0,r.jsx)(n.code,{children:"generateAndPopulatePlayoffStructures()"})," generates playoff structures.\n",(0,r.jsx)(n.code,{children:"attachPlayoffStructures()"})," attaches playoff structures to target drawDefinition.\n",(0,r.jsx)(n.code,{children:"addPlayoffStructures()"})," combines generation and attachment of playoff structures."]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Voluntary Consolation Structure"}),"\n",(0,r.jsx)(n.code,{children:"getEligibleVoluntaryConsolationParticipants()"})," configurable method for determining eligibility.\n",(0,r.jsx)(n.code,{children:"generateVoluntaryConsolation()"})," generates matchUps for consolation structure."]})]})]})}function p(e={}){const{wrapper:n}={...(0,s.ah)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},7407:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(4721),s=t(1601),o=(t(959),t(1527));const i=e=>{let{drawType:n,drawSize:t=8}=e;const i={seedsCount:4,drawType:n,drawSize:t};"AD_HOC"===n&&Object.assign(i,{automated:!0,roundsCount:3});const a=s.QO.generateTournamentRecord({drawProfiles:[i],completeAllMatchUps:!0,randomWinningSide:!0}),{tournamentRecord:c,eventIds:d}=a||{},l=d?.[0],{eventData:u}=s.M6.setState(c).getEventData({participantsProfile:{withIOC:!0,withISO2:!0},eventId:l})||{},h=u?.drawsData?.[0]?.structures||[],p=h[0]?.structureId,f=h?.find((e=>e.structureId===p)),x=f?.roundMatchUps,m=x?Object.values(x)?.flat():[],j=s.hC.randomMember(["Australian","Wimbledon","National","US Open","French","ITF"]),g=(0,r.K)({composition:r.Ex[j],matchUps:m});return(0,o.jsx)("div",{style:{zoom:.9},children:(0,o.jsx)("div",{ref:e=>{for(;e?.firstChild;)e.removeChild(e.firstChild);e&&e.appendChild(g)}})})}}}]);