(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[199],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(n),m=i,h=p["".concat(d,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7349:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return d},toc:function(){return s},default:function(){return u}});var a=n(2122),i=n(9756),o=(n(7294),n(3905)),r=["components"],l={name:"API",title:"Competition Engine API"},d={unversionedId:"apis/competition-engine-api",id:"apis/competition-engine-api",isDocsHomePage:!1,title:"Competition Engine API",description:"addExtension",source:"@site/docs/apis/competition-engine-api.md",sourceDirName:"apis",slug:"/apis/competition-engine-api",permalink:"/tods-competition-factory/docs/apis/competition-engine-api",version:"current",frontMatter:{name:"API",title:"Competition Engine API"},sidebar:"docs",previous:{title:"Advanced Scheduling",permalink:"/tods-competition-factory/docs/pseudocode/scheduling"},next:{title:"Tournament Engine API",permalink:"/tods-competition-factory/docs/apis/tournament-engine-api"}},s=[{value:"addExtension",id:"addextension",children:[]},{value:"addMatchUpEndTime",id:"addmatchupendtime",children:[]},{value:"addMatchUpOfficial",id:"addmatchupofficial",children:[]},{value:"addMatchUpResumeTime",id:"addmatchupresumetime",children:[]},{value:"addMatchUpScheduledDate",id:"addmatchupscheduleddate",children:[]},{value:"addMatchUpScheduledTime",id:"addmatchupscheduledtime",children:[]},{value:"addMatchUpScheduleItems",id:"addmatchupscheduleitems",children:[]},{value:"addMatchUpStartTime",id:"addmatchupstarttime",children:[]},{value:"addMatchUpStopTime",id:"addmatchupstoptime",children:[]},{value:"addPenalty",id:"addpenalty",children:[]},{value:"addPersonRequests",id:"addpersonrequests",children:[]},{value:"addSchedulingProfileRound",id:"addschedulingprofileround",children:[]},{value:"addVenue",id:"addvenue",children:[]},{value:"allCompetitionMatchUps",id:"allcompetitionmatchups",children:[]},{value:"assignMatchUpVenue",id:"assignmatchupvenue",children:[]},{value:"attachPolicy",id:"attachpolicy",children:[]},{value:"bulkMatchUpStatusUpdate",id:"bulkmatchupstatusupdate",children:[]},{value:"bulkScheduleMatchUps",id:"bulkschedulematchups",children:[]},{value:"calculateScheduleTimes",id:"calculatescheduletimes",children:[]},{value:"competitionMatchUps",id:"competitionmatchups",children:[]},{value:"competitionScheduleMatchUps",id:"competitionschedulematchups",children:[]},{value:"devContext",id:"devcontext",children:[]},{value:"findExtension",id:"findextension",children:[]},{value:"getCompetitionDateRange",id:"getcompetitiondaterange",children:[]},{value:"getCompetitionPenalties",id:"getcompetitionpenalties",children:[]},{value:"getCompetitionVenues",id:"getcompetitionvenues",children:[]},{value:"getLinkedTournamentIds",id:"getlinkedtournamentids",children:[]},{value:"getMatchUpDailyLimits",id:"getmatchupdailylimits",children:[]},{value:"getPersonRequests",id:"getpersonrequests",children:[]},{value:"getState",id:"getstate",children:[]},{value:"getSchedulingProfile",id:"getschedulingprofile",children:[]},{value:"getVenuesAndCourts",id:"getvenuesandcourts",children:[]},{value:"isValidSchedulingProfile",id:"isvalidschedulingprofile",children:[]},{value:"linkTournaments",id:"linktournaments",children:[]},{value:"matchUpActions",id:"matchupactions",children:[]},{value:"matchUpScheduleChange",id:"matchupschedulechange",children:[]},{value:"modifyMatchUpFormatTiming",id:"modifymatchupformattiming",children:[]},{value:"modifyPersonRequests",id:"modifypersonrequests",children:[]},{value:"modifyPenalty",id:"modifypenalty",children:[]},{value:"modifyVenue",id:"modifyvenue",children:[]},{value:"removeEventMatchUpFormatTiming",id:"removeeventmatchupformattiming",children:[]},{value:"removeExtension",id:"removeextension",children:[]},{value:"removeMatchUpCourtAssignment",id:"removematchupcourtassignment",children:[]},{value:"removePersonRequests",id:"removepersonrequests",children:[]},{value:"removePenalty",id:"removepenalty",children:[]},{value:"removeTournamentRecord",id:"removetournamentrecord",children:[]},{value:"removeUnlinkedTournamentRecords",id:"removeunlinkedtournamentrecords",children:[]},{value:"reorderUpcomingMatchUps",id:"reorderupcomingmatchups",children:[]},{value:"scheduleMatchUps",id:"schedulematchups",children:[]},{value:"scheduleProfileRounds",id:"scheduleprofilerounds",children:[]},{value:"setMatchUpDailyLimits",id:"setmatchupdailylimits",children:[]},{value:"setMatchUpStatus",id:"setmatchupstatus",children:[]},{value:"setState",id:"setstate",children:[]},{value:"setSchedulingProfile",id:"setschedulingprofile",children:[]},{value:"setTournamentRecord",id:"settournamentrecord",children:[]},{value:"setSubscriptions",id:"setsubscriptions",children:[]},{value:"toggleParticipantCheckInState",id:"toggleparticipantcheckinstate",children:[]},{value:"unlinkTournament",id:"unlinktournament",children:[]},{value:"unlinkTournaments",id:"unlinktournaments",children:[]},{value:"version",id:"version",children:[]}],c={toc:s};function u(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"addextension"},"addExtension"),(0,o.kt)("p",null,"Adds an extension to all ",(0,o.kt)("inlineCode",{parentName:"p"},"tournamentRecords")," loaded into ",(0,o.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.addExtension({ extension });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addmatchupendtime"},"addMatchUpEndTime"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const endTime = '2020-01-01T09:05:00Z';\ncompetitionEngine.addMatchUpEndTime({\n  drawId,\n  matchUpId,\n  tournamentId,\n  endTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addmatchupofficial"},"addMatchUpOfficial"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.addMatchUpOfficial({\n  drawId,\n  matchUpId,\n  tournamentId,\n  participantId,\n  officialType,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addmatchupresumetime"},"addMatchUpResumeTime"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const resumeTime = '2020-01-01T09:00:00Z';\ncompetitionEngine.addMatchUpResumeTime({\n  drawId,\n  matchUpId,\n  resumeTime,\n  tournamentId,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addmatchupscheduleddate"},"addMatchUpScheduledDate"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const scheduledDate = '2020-01-01';\ncompetitionEngine.addMatchUpScheduledDate({\n  drawId,\n  matchUpId,\n  tournamentId,\n  scheduledDate,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addmatchupscheduledtime"},"addMatchUpScheduledTime"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const scheduledTime = '08:00';\ncompetitionEngine.addMatchUpScheduledTime({\n  drawId,\n  matchUpId,\n  tournamentId,\n  scheduledTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addmatchupscheduleitems"},"addMatchUpScheduleItems"),(0,o.kt)("p",null,"Convenience function to add several schedule items at once."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.addMatchUpScheduleItems({\n  drawId,\n  matchUpId,\n  tournamentId,\n  schedule: {\n    courtId, // requires scheduledDate\n    venueId,\n    scheduledTime,\n    scheduledDate,\n    startTime,\n    endTime,\n  },\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addmatchupstarttime"},"addMatchUpStartTime"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const startTime = '2020-01-01T08:05:00Z';\ncompetitionEngine.addMatchUpStartTime({\n  drawId,\n  matchUpId,\n  startTime,\n  tournamentId,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addmatchupstoptime"},"addMatchUpStopTime"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const stopTime = '2020-01-01T08:15:00Z';\ncompetitionEngine.addMatchUpStopTime({\n  drawId,\n  matchUpId,\n  stopTime,\n  tournamentId,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addpenalty"},"addPenalty"),(0,o.kt)("p",null,"Add a penaltyItem to one or more participants."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const createdAt = new Date().toISOString();\nconst penaltyData = {\n  tournamentId, // required\n  refereeParticipantId, // optional\n  participantIds: [participantId],\n  penaltyType: BALL_ABUSE,\n  penaltyCode: 'Organization specific code', // optional\n  matchUpId,\n  issuedAt, // optional ISO timeStamp for time issued to participant\n  createdAt,\n  notes: 'Hit ball into sea',\n};\nlet result = competitionEngine.addPenalty(penaltyData);\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addpersonrequests"},"addPersonRequests"),(0,o.kt)("p",null,"Validates and adds person requests."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const requests = [\n  {\n    date, // 'YYYY-MM-DD' date string\n    startTime, // '00:00' time string\n    endTime, // '00:00' time string\n    requestType: 'DO_NOT_SCHEDULE',\n  },\n];\ncompetitionEngine.addPersonRequests({ personId, requests });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addschedulingprofileround"},"addSchedulingProfileRound"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.addSchedulingProfileRound({\n  scheduleDate, // string date, e.g. '2022-01-01' or '2022-01-01T00:00'\n  venueId, // id of the venue to which the round has been assigned\n  round, // details of a round to be played on specified date\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addvenue"},"addVenue"),(0,o.kt)("p",null,"Adds ",(0,o.kt)("strong",{parentName:"p"},"venueId")," if not provided."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.addVenue({ venue: { venueName } });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"allcompetitionmatchups"},"allCompetitionMatchUps"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { matchUps } = competitionEngine.allCompetitionMatchUps({\n  scheduleVisibilityFilters,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"assignmatchupvenue"},"assignMatchUpVenue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.assignMatchUVenue({\n  tournamentId,\n  matchUpId,\n  drawId, // drawId where matchUp is found\n  venueId,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"attachpolicy"},"attachPolicy"),(0,o.kt)("p",null,"Attaches a ",(0,o.kt)("inlineCode",{parentName:"p"},"policyDefinition")," to all tournamentRecords currently loaded into ",(0,o.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.attachPolicy({ policyDefinition });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"bulkmatchupstatusupdate"},"bulkMatchUpStatusUpdate"),(0,o.kt)("p",null,"Provides the ability to update the outcomes of multiple matchUps at once."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const outcomes = [\n  {\n    tournamentId,\n    eventId,\n    drawId,\n    matchUpId,\n    matchUpFormat,\n    matchUpStatus,\n    winningSide,\n    score,\n  },\n];\ncompetitionEngine.bulkMatchUpStatusUpdate({ outcomes });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"bulkschedulematchups"},"bulkScheduleMatchUps"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const schedule = {\n  scheduledTime: '08:00',\n  scheduledDate: '2021-01-01T00:00', // best practice to provide ISO date string\n  venueId,\n};\nconst matchUpContextIds = [{ tournamentId, matchUpId }];\ncompetitionEngine.bulkScheduleMatchUps({ matchUpContextIds, schedule });\n")),(0,o.kt)("h2",{id:"calculatescheduletimes"},"calculateScheduleTimes"),(0,o.kt)("p",null,"Returns an array of available schedule times for a given date (and optional time range)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { scheduleTimes } = competitionEngine.calculateScheduleTimes({\n  date,\n\n  startTime, // optional - if not provided will be derived from court availability for the tiven date\n  endTime, // optional - if not provided will be derived from court availability for the tiven date\n\n  averageMatchUpMinutes = 90, // optional - defualts to 90\n  periodLength = 30, // optional - defualts to 30\n\n  venueIds, // optional - restrict calculation to specified venueIds\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"competitionmatchups"},"competitionMatchUps"),(0,o.kt)("p",null,'Returns aggregated arrays of "inContext" matchUps for all tournamentRecords loaded into ',(0,o.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  byeMatchUps,\n  abandonedMatchUps,\n  completedMatchUps,\n  pendingMatchUps,\n  upcomingMatchUps,\n} = competitionEngine.competitionMatchUps({\n  scheduleVisibilityFilters,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"competitionschedulematchups"},"competitionScheduleMatchUps"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const matchUpFilters = {\n  isMatchUpTie: false,\n  scheduledDate, // scheduled date of matchUps to return\n\n  localTimeZone, // optional - used to convert scheduleDate\n  localPerspective: true,\n};\n\nconst { completedMatchUps, dateMatchUps, courtsData, venues } =\n  competitionEngine.competitionScheduleMatchUps({\n    matchUpFilters,\n    sortCourtsData, // boolean - optional\n    sortDateMatchUps, // boolean - optional - defaults to `true`\n  });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"devcontext"},"devContext"),(0,o.kt)("p",null,"Setting devContext(true) bypasses ",(0,o.kt)("strong",{parentName:"p"},"try {} catch (err) {}")," code block and in some cases enables enhanced logging"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.devContext(true);\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"findextension"},"findExtension"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { extension } = competitionEngine.findExtension({ name });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"getcompetitiondaterange"},"getCompetitionDateRange"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { startDate, endDate } = competitionEngine.getCompetitionDateRange();\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"getcompetitionpenalties"},"getCompetitionPenalties"),(0,o.kt)("p",null,"Returns an array of all penalties issued for all tournaments loaded into competitionEngine."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { penalties } = competitionEngine.getCompetitionPenalties();\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"getcompetitionvenues"},"getCompetitionVenues"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { venues, venueIds } = competitionEngine.getCompetitionVenues();\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"getlinkedtournamentids"},"getLinkedTournamentIds"),(0,o.kt)("p",null,"Returns ",(0,o.kt)("inlineCode",{parentName:"p"},"linkedTournamentIds")," for each tournamentRecord loaded in ",(0,o.kt)("inlineCode",{parentName:"p"},"compeitionEngine"),"."),(0,o.kt)("p",null,'Caters for the possibility that, for instance, two "linked" tournaments and one "unlinked" tournament could be loaded.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { linkedTournamentIds } = competitionEngine.getLinkedTournamentIds();\n/*\n{\n  'tournamentId-1': ['tournamentId-2', 'tournamentId-3'],\n  'tournamentId-2': ['tournamentId-1', 'touranmentId-3'],\n  'tournamentId-3': ['tournamentId-1', 'tournamentId-2']\n}\n*/\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"getmatchupdailylimits"},"getMatchUpDailyLimits"),(0,o.kt)("p",null,"Returns player daily match limits for singles/doubles/total matches."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { matchUpDailyLimits } = competitionEngine.getMatchUpDailyLimits({\n  tournamentId, // optional - scope search to specific tournamentRecord\n});\nconst { DOUBLES, SINGLES, total } = matchUpDailyLimits;\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"getpersonrequests"},"getPersonRequests"),(0,o.kt)("p",null,"Returns an object with array of requests for each relevant ",(0,o.kt)("inlineCode",{parentName:"p"},"personId"),". Request objects are returned with a ",(0,o.kt)("inlineCode",{parentName:"p"},"requestId")," which can be used to call ",(0,o.kt)("a",{parentName:"p",href:"competition-engine-api#modifypersonrequests"},"modifyPersonRequests"),"."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"competition-engine-api#addpersonrequests"},"addPersonRequests")," for request object structure."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { personRequests } = competitionEngine.getPersonRequests({\n  requestType, // optional filter\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"getstate"},"getState"),(0,o.kt)("p",null,"Returns a deep copy of the current competitionEngine state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { tournaentRecords } = competition.getState({\n  convertExtensions, // optional - convert extensions to '_' prefixed attributes\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"getschedulingprofile"},"getSchedulingProfile"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { schedulingProfile } = competitionEngine.getSchedulingProfile();\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"getvenuesandcourts"},"getVenuesAndCourts"),(0,o.kt)("p",null,"Returns an aggregate view of venues and courts across all tournamentRecords loaded into ",(0,o.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { courts, venues } = competitionEngine.getVenuesAndCourts();\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"isvalidschedulingprofile"},"isValidSchedulingProfile"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const isValid = competitionEngine.isValidSchedulingProfile({\n  schedulingProfile,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"linktournaments"},"linkTournaments"),(0,o.kt)("p",null,"Links all tournaments currently loaded in ",(0,o.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.linkTournaments();\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"matchupactions"},"matchUpActions"),(0,o.kt)("p",null,"Convenience pass through to ",(0,o.kt)("inlineCode",{parentName:"p"},"tournamentEngine.matchUpActions")," for use in contexts where multiple tournamentRecords are loaded into ",(0,o.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { matchUpActions } = competitionEngine.matchUpActions({\n  tournamentId,\n  eventId,\n  drawId,\n  matchUpId,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"matchupschedulechange"},"matchUpScheduleChange"),(0,o.kt)("p",null,"Swaps the schedule details of two scheduled matchUps."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.matchUpScheduleChange({\n  sourceMatchUpContextIds,\n  targetMatchUpContextIds,\n  sourceCourtId,\n  targetCourtId,\n  courtDayDate: dateSelected,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"modifymatchupformattiming"},"modifyMatchUpFormatTiming"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.modifyMatchUpFormatTiming({\n  matchUpFormat: 'SET3-S:6/TB7',\n  averageTimes: [\n    {\n      categoryNames: [U12, U14],\n      minutes: { [DOUBLES]: 110, default: 130 },\n    },\n    {\n      categoryNames: [U16, U18],\n      minutes: { [DOUBLES]: 100, default: 120 },\n    },\n  ],\n  recoveryTimes: [\n    { categoryNames: [], minutes: { default: 15, [DOUBLES]: 15 } },\n  ],\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"modifypersonrequests"},"modifyPersonRequests"),(0,o.kt)("p",null,"Modifies existing person requests."),(0,o.kt)("p",null,"Any requests without a ",(0,o.kt)("inlineCode",{parentName:"p"},"requestId")," will be ",(0,o.kt)("strong",{parentName:"p"},"added"),". Any requests without ",(0,o.kt)("inlineCode",{parentName:"p"},"requestType")," will be ",(0,o.kt)("strong",{parentName:"p"},"removed"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.modifyPersonRequests({\n  personId, // optional - scope to single personId; avoid brute-force updates\n  requests: [\n    {\n      requestType,\n      requestId, // if requestId is not present, will attempt to added\n      startTime,\n      endTime,\n      date,\n    },\n  ],\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"modifypenalty"},"modifyPenalty"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const notes = 'Hit ball into spectator';\nconst modifications = { notes };\ncompetitionEngine.modifyPenalty({ penaltyId, tournamentId, modifications });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"modifyvenue"},"modifyVenue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const modifications = {\n  venueName,\n  venueAbbreviation,\n  courts: [\n    {\n      courtId: 'b9df6177-e430-4a70-ba47-9b9ff60258cb',\n      courtName: 'Custom Court 1',\n      dateAvailability: [\n        {\n          date: '2020-01-01',\n          startTime: '16:30',\n          endTime: '17:30',\n        },\n      ],\n    },\n  ],\n};\ncompetitionEngine.modifyVenue({ venueId, modifications });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"removeeventmatchupformattiming"},"removeEventMatchUpFormatTiming"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeEventMatchUpFormatTiming({ eventId });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"removeextension"},"removeExtension"),(0,o.kt)("p",null,"Removes an extension from all ",(0,o.kt)("inlineCode",{parentName:"p"},"tournamentRecords")," loaded into ",(0,o.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeExtension({ name });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"removematchupcourtassignment"},"removeMatchUpCourtAssignment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeMatchUpCourtAssignment({\n  drawId,\n  matchUpId,\n  tournamentId,\n  courtDayDate,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"removepersonrequests"},"removePersonRequests"),(0,o.kt)("p",null,"Removes person requests matching passed values. If no paramaters are provided, removes ",(0,o.kt)("strong",{parentName:"p"},"all")," person requests."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"result = competitionEngine.removePersonRequests({\n  personId, // optional - scope to personId\n  requestType, // optioanl - scope to requestType\n  requestId, // optional - scope to a single requestId\n  date, // optional - scope to a specific date\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"removepenalty"},"removePenalty"),(0,o.kt)("p",null,"Removes a penalty from all relevant tournament participants."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removePenalty({ penaltyId, tournamentId });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"removetournamentrecord"},"removeTournamentRecord"),(0,o.kt)("p",null,"Removes a tournamentRecord from ",(0,o.kt)("inlineCode",{parentName:"p"},"competitionEngine")," state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeTournamentRecord(tournamentId);\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"removeunlinkedtournamentrecords"},"removeUnlinkedTournamentRecords"),(0,o.kt)("p",null,"Removes all tournamentRecords from ",(0,o.kt)("inlineCode",{parentName:"p"},"competitionEngine")," state that are unlinked."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeUnlinkedTournamentRecords();\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"reorderupcomingmatchups"},"reorderUpcomingMatchUps"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const matchUpContextIds = [{ tournamentId, drawId, matchUpId }];\ncompetitionEngine.reorderUpcomingMatchUps({\n  matchUpContextIds,\n  firstToLast, // boolean - direction of reorder\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"schedulematchups"},"scheduleMatchUps"),(0,o.kt)("p",null,"Auto schedule matchUps on a given date using the Garman formula."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'competitionEngine.scheduleMatchUps({\n  date,\n  startTime, // optional - if not provided will be derived from court availability for the tiven date\n  endTime, // optional - if not provided will be derived from court availability for the tiven date\n  venueIds, // optional - defaults to all known; if a single venueId is provided then all matchUps will be scheduled for that venue\n  matchUpIds, // array of matchUpIds; if no schedulingProfile provided will be auto-sorted by draw size and roundNumbers\n  periodLength = 30, // optional - size of scheduling blocks\n  averageMatchUpMinutes = 90, // optional - defaults to 90\n  recoveryMinutes = 0, // optional - amount of time participants are given to recover between matchUps\n  matchUpDailyLimits, // optional - policy declaration; SINGLES, DOUBLES and total limits per individual participant\n  checkPotentialConflicts, // boolean - defaults to true - consider individual requests when matchUp participants are "potential"\n});\n')),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"scheduleprofilerounds"},"scheduleProfileRounds"),(0,o.kt)("p",null,"Auto-schedules all rounds which have been specified in a ",(0,o.kt)("inlineCode",{parentName:"p"},"schedulingProfile")," which has been saved to the tournamentRecord using ",(0,o.kt)("inlineCode",{parentName:"p"},"competitionEngine.setSchedulingProfile"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'competitionEngine.scheduleProfileRounds({\n  scheduleDates, // optional array of dates to schedule\n  periodLength = 30, // optional - size of scheduling blocks\n\n  checkPotentialConflicts, // boolean - defaults to true - consider individual requests when matchUp participants are "potential"\n});\n')),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"setmatchupdailylimits"},"setMatchUpDailyLimits"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.setMatchUpDailyLimits({\n  dailyLimits: { SINGLES: 2, DOUBLES: 1, total: 3 },\n  tournamentId, // optional - scope to a specific tournamentId\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"setmatchupstatus"},"setMatchUpStatus"),(0,o.kt)("p",null,"Sets either matchUpStatus or score and winningSide; values to be set are passed in outcome object. Handles any winner/loser participant movements within or across structures."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const outcome = {\n  score,\n  winningSide,\n  matchUpStatus,\n};\n\ncompetitionEngine.setMatchUpStatus({\n  drawId,\n  matchUpId,\n  tournamentId,\n  matchUpTieId, // optional - if part of a TIE matchUp\n  outcome,\n  schedule: {\n    // optional - set schedule items\n    courtId, // requires scheduledDate\n    venueId,\n    scheduledDate,\n    scheduledTime,\n    startTime,\n    endTime,\n  },\n  notes, // optional - add note (string) to matchUp object\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"setstate"},"setState"),(0,o.kt)("p",null,"Loads tournament records into competitionEngine; supports both an array of tournamentRecords and an object with tournamentId keys."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const tournamentRecords = [tournamentRecord];\n// or const tournamentRecords = { [tournamentId]: tournamentRecord }\n\ncompetitionEngine.setsState(tournamentRecords, deepCopy);\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"setschedulingprofile"},"setSchedulingProfile"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.setSchedulingProfile({ schedulingProfile });\n")),(0,o.kt)("h2",{id:"settournamentrecord"},"setTournamentRecord"),(0,o.kt)("p",null,"Adds a tournamentRecord to ",(0,o.kt)("inlineCode",{parentName:"p"},"competitionEngine")," state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.setTournamentRecord(tournamentRecord);\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"setsubscriptions"},"setSubscriptions"),(0,o.kt)("p",null,"Please refer to the ",(0,o.kt)("a",{parentName:"p",href:"../concepts/subscriptions"},"Subscriptions")," in General Concepts."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"toggleparticipantcheckinstate"},"toggleParticipantCheckInState"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.toggleParticipantCheckInState({\n  drawId,\n  matchUpId,\n  tournamentId,\n  participantId,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"unlinktournament"},"unlinkTournament"),(0,o.kt)("p",null,"Unlink the tournament specified by ",(0,o.kt)("inlineCode",{parentName:"p"},"tournamentId")," from other tournaments loaded in ",(0,o.kt)("inlineCode",{parentName:"p"},"compeitionEngine"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.unlinkTournament({ tournamentId });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"unlinktournaments"},"unlinkTournaments"),(0,o.kt)("p",null,"Removes links between all tournaments currently loaded in ",(0,o.kt)("inlineCode",{parentName:"p"},"competitionEngine"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"competitionEngine.unlinkTournaments();\n")),(0,o.kt)("h2",{id:"version"},"version"),(0,o.kt)("p",null,"Returns NPM package version. Can be used in configurations that utilize Competition Factory engines on both client and server to ensure equivalency."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const version = competitionEngine.version();\n")),(0,o.kt)("hr",null))}u.isMDXComponent=!0}}]);