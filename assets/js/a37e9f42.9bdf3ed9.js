"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9384],{3805:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>m});var n=a(758);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),h=i,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||r;return a?n.createElement(m,o(o({ref:t},c),{},{components:a})):n.createElement(m,o({ref:t},c))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},9535:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=a(2232),i=(a(758),a(3805));const r={title:"Round Robin Tally Policy"},o=void 0,l={unversionedId:"policies/tallyPolicy",id:"policies/tallyPolicy",title:"Round Robin Tally Policy",description:"A Tally Policy controls how order is determined for Round Robin groups.",source:"@site/docs/policies/tallyPolicy.md",sourceDirName:"policies",slug:"/policies/tallyPolicy",permalink:"/tods-competition-factory/docs/policies/tallyPolicy",draft:!1,tags:[],version:"current",frontMatter:{title:"Round Robin Tally Policy"},sidebar:"docs",previous:{title:"Introduction to Policies",permalink:"/tods-competition-factory/docs/concepts/policies"},next:{title:"Avoidance Policies",permalink:"/tods-competition-factory/docs/policies/avoidance"}},s={},p=[{value:"Default Behavior",id:"default-behavior",level:2},{value:"Implementation Details",id:"implementation-details",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...a}=e;return(0,i.yg)(d,(0,n.A)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"A ",(0,i.yg)("strong",{parentName:"p"},"Tally Policy")," controls how order is determined for Round Robin groups."),(0,i.yg)("p",null,"See ",(0,i.yg)("a",{parentName:"p",href:"/docs/governors/policy-governor#attachpolicies"},"engine.attachPolicies"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"const roundRobinTally = {\n  groupOrderKey: 'matchUpsWon', // possible to group by tieMatchUpsWon, tieSinglesWon, tieDoublesWon, matchUpsWon, pointsWon, gamesWon, setsWon, gamesPct, setsPct, pointsPct, matchUpsPct\n  groupTotalGamesPlayed: false, // optional - when true will calculate % of games won based on total group games played rather than participant games played\n  groupTotalSetsPlayed: false, // optional - when true will calculate % of sets won based on total group sets played rather than participant sets played\n  headToHead: { disabled: false },\n  tallyDirectives: [\n    // these are the default values if no tallyDirectives provided; edit to suit\n    // groupTotals scopes the tally calculations to all sets or games or matches played by all participants\n    // idsFilter scopes the tally calculations to only tied participants\n    // with { idsFilter: false } the ratio is calculated from all group matchUps\n    // with { idsFilter: true } the ratio is calculated from matchUps including tied participants\n    // when { maxParticipants: 2 } is defined, the rule only applies when # of participants is <= maxParticipants\n    // any attribute/idsFilter combination can be selectively disabled for Head to Head calculations\n    { attribute: 'matchUpsPct', idsFilter: false, disbleHeadToHead: false },\n    { attribute: 'allDefaults', reversed: true, idsFilter: false }, // reversed: true => reverses default which is greatest to least\n    {\n      attribute: 'tieMatchUpsPct',\n      idsFilter: false,\n      disbleHeadToHead: false,\n    },\n    { attribute: 'setsPct', idsFilter: false, disbleHeadToHead: false },\n    { attribute: 'gamesPct', idsFilter: false, disbleHeadToHead: false },\n    { attribute: 'pointsPct', idsFilter: false, disbleHeadToHead: false },\n    { attribute: 'matchUpsPct', idsFilter: true, disbleHeadToHead: false },\n    { attribute: 'tieMatchUpsPct', idsFilter: true, disbleHeadToHead: false },\n    { attribute: 'setsPct', idsFilter: true, disbleHeadToHead: false },\n    { attribute: 'gamesPct', idsFilter: true, disbleHeadToHead: false },\n    { attribute: 'pointsPct', idsFilter: true, disbleHeadToHead: false },\n  ],\n  excludeMatchUpStatuses: [], // matchUpStatuses to exclude from calculations, e.g. ABANDONED, INCOMPLETE\n  setsCreditForDefaults: false, // whether or not to award e.g. 2 sets won for participant who wins by opponent DEFAULT\n  setsCreditForWalkovers: false, // whether or not to award e.g. 2 sets won for participant who wins by opponent WALKOVER\n  setsCreditForRetirements: false, // whether or not to award e.g. 2 sets won for participant who wins by opponent RETIREMENT\n  gamesCreditForDefaults: false, // whether or not to award e.g. 12 games won for participant who wins by opponent DEFAULT\n  gamesCreditForWalkovers: false, // whether or not to award e.g. 12 games won for participant who wins by opponent WALKOVER\n  gamesCreditForRetirements: false, // whether or not to award e.g. 2 sets won for participant who wins by opponent RETIREMENT\n  gamesCreditForTiebreakSets: true, // defaults to true; whether to count a tiebreak set as a game won, e.g. 6-2 2-6 [10-3]\n  GEMscore: ['matchUpsPct', 'tieMatchUpsPct', 'setsPct', 'gamesPct', 'pointsPct'],\n  precision: 3, // controls % rounding in tally results, e.g. precision of 3 returns .667 whereas precision 5 returns .66667\n};\n\nengine.attachPolicies({ policyDefinitions: { roundRobinTally } });\n")),(0,i.yg)("h2",{id:"default-behavior"},"Default Behavior"),(0,i.yg)("p",null,"Round Robin group tally logic by default implements the following guidelines:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"The participant who wins the most matches is the winner."),(0,i.yg)("li",{parentName:"ol"},"If two players are tied, then the winner of their head-to-head match is the winner.")),(0,i.yg)("p",null,"If three or more participants are tied, tie are broken as follows:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"The head-to-head win-loss record in matches involving just the tied players;"),(0,i.yg)("li",{parentName:"ul"},"The participant with the highest percentage of sets won of all sets completed;"),(0,i.yg)("li",{parentName:"ul"},"The head-to-head win-loss record in matches involving the players who remain tied;"),(0,i.yg)("li",{parentName:"ul"},"The participant with the highest percentage of games won of all games completed;"),(0,i.yg)("li",{parentName:"ul"},"The head-to-head win-loss record in matches involving the players who remain tied;"),(0,i.yg)("li",{parentName:"ul"},"The participant with the highest percentage of sets won of sets completed among players in the group under consideration;"),(0,i.yg)("li",{parentName:"ul"},"The head-to-head win-loss record in matches involving the players who remain tied;"),(0,i.yg)("li",{parentName:"ul"},"The participant with the highest percentage of games won of games completed among the players under consideration; and"),(0,i.yg)("li",{parentName:"ul"},"The head-to-head win-loss record in matches involving the players who remain tied.")),(0,i.yg)("h2",{id:"implementation-details"},"Implementation Details"),(0,i.yg)("p",null,"After initial separation of participants by ",(0,i.yg)("inlineCode",{parentName:"p"},"matchUpsWon"),",\nthe implementation is configurable by supplying an array of ",(0,i.yg)("inlineCode",{parentName:"p"},"tallyDirectives")," in the ",(0,i.yg)("strong",{parentName:"p"},"Tally Policy"),"."),(0,i.yg)("p",null,"The algorithm relies on the values availble in the calculated ",(0,i.yg)("inlineCode",{parentName:"p"},"participantResults")," and works as follows:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"separate participants into groups by a given attribute"),(0,i.yg)("li",{parentName:"ul"},"a group with a single participant is 'resolved'"),(0,i.yg)("li",{parentName:"ul"},"groups of two participants are resolved by head-to-head (if not disabled/if participants faced each other)"),(0,i.yg)("li",{parentName:"ul"},"groups of three or more search for an attribute that will separate them into smaller groups"),(0,i.yg)("li",{parentName:"ul"},"participantResults scoped to the members of a group and recalculated when ",(0,i.yg)("inlineCode",{parentName:"li"},"{ idsFilter: true }"))))}u.isMDXComponent=!0}}]);