(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8632],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2160:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],s={title:"Score Governor"},c={unversionedId:"scoreGovernor",id:"scoreGovernor",isDocsHomePage:!1,title:"Score Governor",description:"The scoreGovernor is a collection of scoring related utilities exported from the Competition Factory;",source:"@site/docs/scoreGovernor.mdx",sourceDirName:".",slug:"/scoreGovernor",permalink:"/tods-competition-factory/docs/scoreGovernor",version:"current",frontMatter:{title:"Score Governor"},sidebar:"docs",previous:{title:"API",permalink:"/tods-competition-factory/docs/apis/draw-engine-api"},next:{title:"Constants",permalink:"/tods-competition-factory/docs/constants"}},l=[{value:"API",id:"api",children:[{value:"analyzeMatchUp",id:"analyzematchup",children:[]},{value:"analyzeSet",id:"analyzeset",children:[]},{value:"checkSetIsComplete",id:"checksetiscomplete",children:[]},{value:"generateScoreString",id:"generatescorestring",children:[]},{value:"getSetComplement",id:"getsetcomplement",children:[]},{value:"getTiebreakComplement",id:"gettiebreakcomplement",children:[]},{value:"generateTieMatchUpScore",id:"generatetiematchupscore",children:[]},{value:"isValidMatchUpFormat",id:"isvalidmatchupformat",children:[]},{value:"keyValueScore",id:"keyvaluescore",children:[]},{value:"tallyParticipantResults",id:"tallyparticipantresults",children:[]},{value:"validateTieFormat",id:"validatetieformat",children:[]}]}],p={toc:l};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"scoreGovernor")," is a collection of scoring related utilities exported from the Competition Factory;\nthese utilities provide analysis/validation or generate values, but do not make any mutations."),(0,o.kt)("p",null,"Lightweight independent/reusable components such as scoring dialogs can make use of the ",(0,o.kt)("strong",{parentName:"p"},"scoreGovernor")," without having to import any Competition Factory engines."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { scoreGovernor } from 'tods-competition-factory';\n// -- or --\nconst { scoreGovernor } = require('tods-competition-factory');\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"analyzematchup"},"analyzeMatchUp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let analysis = scoreGovernor.analyzeMatchUp({ matchUp });\n\nconst {\n  isActiveSet,\n  isExistingSet,\n  existingValue,\n  hasExistingValue,\n  isValidSideNumber,\n  completedSetsCount,\n  isCompletedMatchUp,\n  isLastSetWithValues,\n  validMatchUpOutcome,\n  matchUpScoringFormat: {\n    bestOf,\n    setFormat: { setTo, tiebreakFormat, tiebreakAt },\n  },\n  calculatedWinningSide,\n  validMatchUpWinningSide,\n  completedSetsHaveValidOutcomes,\n  specifiedSetAnalysis: {\n    expectTiebreakSet,\n    expectTimedSet,\n    hasTiebreakCondition,\n    isCompletedSet,\n    isDecidingSet,\n    isTiebreakSet,\n    isValidSet,\n    isValidSetNumber,\n    isValidSetOutcome,\n    setFormat,\n    sideGameScores,\n    sideGameScoresCount,\n    sidePointScores,\n    sidePointScoresCount,\n    sideTiebreakScores,\n    sideTiebreakScoresCount,\n    winningSide,\n  },\n} = analysis;\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"analyzeset"},"analyzeSet"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  expectTiebreakSet,\n  expectTimedSet,\n  hasTiebreakCondition,\n  isCompletedSet,\n  isDecidingSet,\n  isTiebreakSet,\n  isValidSet,\n  isValidSetNumber,\n  isValidSetOutcome,\n  setFormat,\n  sideGameScores,\n  sideGameScoresCount,\n  sidePointScores,\n  sidePointScoresCount,\n  sideTiebreakScores,\n  sideTiebreakScoresCount,\n  winningSide,\n} = scoreGovernor.analyzeSet({\n  matchUpScoringFormat,\n  setObject,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"checksetiscomplete"},"checkSetIsComplete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const hasWinningSide = scoreGovernor.checkSetIsComplete({\n  set: { side1Score, side2Score,\n  ignoreTiebreak,\n  matchUpFormat,\n  isDecidingSet,\n  isTiebreakSet,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"generatescorestring"},"generateScoreString"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const sets = [\n  {\n    side1Score: 6,\n    side2Score: 7,\n    side1TiebreakScore: 3,\n    side2TiebreakScore: 7,\n    winningSide: 2,\n  },\n  {\n    side1Score: 7,\n    side2Score: 6,\n    side1TiebreakScore: 14,\n    side2TiebreakScore: 12,\n    winningSide: 1,\n  },\n  { side1Score: 3 },\n];\nlet result = scoreGovernor.generateScoreString({\n    sets, // TODS sets object\n    winningSide, // optional - 1 or 2\n    reversed, // optional - reverse the score\n    winnerFirst = true, // optional - boolean - tranform sets so that winningSide is first (on left)\n    matchUpStatus, // optional - used to annotate scoreString\n    addOutcomeString, // optional - tranform matchUpStatus into outcomeString appended to scoreString\n    autoComplete: true, // optional - complete missing set score\n  });\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"getsetcomplement"},"getSetComplement"),(0,o.kt)("p",null,"Returns complementary sideScore given a ",(0,o.kt)("inlineCode",{parentName:"p"},"lowValue"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"tieBreakAt")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"setTo")," details."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const [side1Score, side2Score] = scoreGovernor.getSetComplement({\n  tiebreakAt,\n  lowValue,\n  isSide1,\n  setTo,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"gettiebreakcomplement"},"getTiebreakComplement"),(0,o.kt)("p",null,"Returns complementary sideScore given a ",(0,o.kt)("inlineCode",{parentName:"p"},"lowValue"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"tieBreakNoAd")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tiebreakTo")," details."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const [side1Score, side2Score] = scoreGovernor.getSetComplement({\n  tiebreakNoAd, // boolean whether tiebreak is "no advantage"\n  tiebreakTo,\n  lowValue,\n  isSide1,\n});\n')),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"generatetiematchupscore"},"generateTieMatchUpScore"),(0,o.kt)("p",null,"Returns string representation of current tieMatchUp score."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { scoreStringSide1, scoreStringSide2, set, winningSide } =\n  scoreGovernor.generateTieMatchUpScore({\n    matchUp, // must have { matchUpType: 'TEAM' }\n    separator, // optional - defaults to '-'\n  });\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"isvalidmatchupformat"},"isValidMatchUpFormat"),(0,o.kt)("p",null,"Returns boolean indicating whether matchUpFormat code is valid."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const valid = scoreGovernor.isValidMatchUpFormat(matchUpFormat);\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"keyvaluescore"},"keyValueScore"),(0,o.kt)("p",null,"Utility for generating score strings based on key entry. Please see ",(0,o.kt)("inlineCode",{parentName:"p"},"keyValueScore.test.js")," in the source for more detail."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"tallyparticipantresults"},"tallyParticipantResults"),(0,o.kt)("p",null,"Processes ",(0,o.kt)("inlineCode",{parentName:"p"},"matchUps")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"{ drawType: 'ROUND_ROBIN' }")," from a single grouping within a ROUND_ROBIN structure and produces a detailed tally of particpant metrics."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { participantResults } = scoreGovernor.tallyParticipantResults({\n  policyDefinitions, // optional - can configure determination of winner when tied values\n  matchUpFormat, // required for accurate calculations\n  matchUps = [], // array of Group matchUps\n  subOrderMap, // map { [participantId]: subOrder } // manual determination of order when ties cannot be broken\n});\n")),(0,o.kt)("h4",{id:"participantresults"},"participantResults"),(0,o.kt)("p",null,"An array of ",(0,o.kt)("inlineCode",{parentName:"p"},"{ drawPosition, participantId, participantResult }")," objects is returned for each group of processed matchUps."),(0,o.kt)("p",null,"In the example given below 3 of 4 participants were tied with equivalent metrics and final ",(0,o.kt)("inlineCode",{parentName:"p"},"rankOrder")," was determined by ",(0,o.kt)("strong",{parentName:"p"},"Head to Head")," analysis.\nSee ",(0,o.kt)("a",{parentName:"p",href:"policies/tally-policy"},"Round Robin Tally Policy"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{\n  drawPosition: 4,\n  participantId: 'uniqueParticipantId1',\n  participantResult: {\n    allDefaults: 0,\n    defaults: 0,\n    retirements: 0,\n    walkovers: 0,\n    matchUpsWon: 3,\n    matchUpsLost: 1,\n    victories: [\n      'uniqueMatchUpId1',\n      'uniqueMatchUpId2',\n      'uniqueMatchUpId3',\n    ],\n    defeats: ['uniqueMatchUpId4'],\n    matchUpsCancelled: 0,\n    setsWon: 6,\n    setsLost: 2,\n    gamesWon: 36,\n    gamesLost: 12,\n    pointsWon: 0,\n    pointsLost: 0,\n    setsRatio: 3,\n    matchUpsRatio: 3,\n    gamesRatio: 0.75,\n    pointsRatio: 0,\n    result: '3/1',\n    games: '36/12',\n    rankOrder: 1,\n    GEMscore: 30003000075000000,\n    groupOrder: 1,\n  },\n};\n")),(0,o.kt)("h4",{id:"gemscore"},"GEMscore"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"GEMscore")," is a hash of key participant metrics and is used for sorting participants from multiple groups where ",(0,o.kt)("strong",{parentName:"p"},"Head to Head"),' does not apply.\nThis is used to determine "seedProxies" when ordered participants from each group progress to playoff strutures.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const GEM =\n  matchUpsRatio * Math.pow(10, 16) +\n  setsRatio * Math.pow(10, 12) +\n  gamesRatio * Math.pow(10, 8) +\n  pointsRatio * Math.pow(10, 3);\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"validatetieformat"},"validateTieFormat"),(0,o.kt)("p",null,"Provides validation for ",(0,o.kt)("inlineCode",{parentName:"p"},"tieFormat")," objects. See ",(0,o.kt)("a",{parentName:"p",href:"concepts/tieFormat"},"tieFormats and lineUps")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  valid, // boolean whether valid or not\n  errors, // array of detailed errors\n} = validateTieFormat({ tieFormat });\n")),(0,o.kt)("hr",null))}d.isMDXComponent=!0}}]);