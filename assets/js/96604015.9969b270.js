"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3560],{7942:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var a=t(959);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),d=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=d(t),y=o,m=c["".concat(p,".").concat(y)]||c[y]||u[y]||r;return t?a.createElement(m,i(i({ref:n},l),{},{components:t})):a.createElement(m,i({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=y;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var d=2;d<r;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},5921:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=t(8957),o=(t(959),t(7942));const r={title:"Subscriptions"},i=void 0,s={unversionedId:"engines/subscriptions",id:"engines/subscriptions",title:"Subscriptions",description:"Subscriptions enable external methods to be called when certain events occur while the Competition Factory engines are mutating a tournament document.",source:"@site/docs/engines/subscriptions.md",sourceDirName:"engines",slug:"/engines/subscriptions",permalink:"/tods-competition-factory/docs/engines/subscriptions",draft:!1,tags:[],version:"current",frontMatter:{title:"Subscriptions"},sidebar:"docs",previous:{title:"Mutation Engines",permalink:"/tods-competition-factory/docs/engines/mutation-engines"},next:{title:"Custom Engines",permalink:"/tods-competition-factory/docs/engines/custom-engines"}},p={},d=[],l={toc:d},c="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Subscriptions enable external methods to be called when certain events occur while the Competition Factory engines are mutating a tournament document."),(0,o.kt)("p",null,"The payload for each subscription is an array of objects, with each element of the array having been produced by an ",(0,o.kt)("inlineCode",{parentName:"p"},"addNotice")," statement within engine methods. Subscription methods are called ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"after"))," an engine method completes, not during execution."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"All engine methods may be passed the additional parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"{ delayNotify: true }"),", in which case subscription methods are ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"not"))," called until a subsequent engine method is invoked.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const subscriptions = {\n  audit: (payload) => {}, // payload = [{ action: '', payload: {} }]\n\n  addMatchUps: (payload) => {}, // payload = [{ matchUps }]\n  deletedMatchUpIds: (payload) => {}, // payload = [{ matchUpIds }]\n  modifyMatchUp: (payload) => {}, // payload = [{ matchUp }]\n\n  publishEvent: (payload) => (), // payload = [{ eventData }]\n  unPublishEvent: (payload) => (), // payload = [{ eventId }]\n\n  publishEventSeeding: (payload) => (), // payload\n  unPublishEventSeeding: (payload) => (), // payload\n\n  publishOrderOfPlay: (payload) => (), // payload\n  unPublishOrderOfPlay: (payload) => (), // payload\n\n  addVenue: (payload) => (), // payload [{ venue }]\n  modifyVenue: (payload) => (), // payload [{ venue }]\n  deleteVenue: (payload) => (), // payload [{ venueId }]\n\n  addParticipants: (payload) => () // payload [{ participants }]\n  modifyParticipants: (payload) => () // payload [{ participants }]\n  deleteParticipants: (payload) => () // payload [{ participantIds }]\n\n  modifyPositionAssignments: (payload) => () // pauload [{ positionAssignments, tournamentId, eventId, drawId, structureId}]\n  modifySeedAssignments: (payload) => () // pauload [{ seedAssignments, tournamentId, eventId, drawId, structureId}]\n\n  addDrawDefinitions: (payload) => (), // payload = [{ drawDefinition }]\n  modifyDrawDefinitions: (payload) => (), // payload = [{ drawDefinition }]\n  deletedDrawIds: (payload) => (), // payload = [{ drawId }]\n};\n")),(0,o.kt)("p",null,"Subscriptions are defined once for all engines."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { globalState: { setSubcriptions } } from 'tods-competition-factory';\n\nsetSubscriptions(subscriptions);\n")))}u.isMDXComponent=!0}}]);