"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1790],{7942:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(959);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),s=d(a),m=i,h=s["".concat(l,".").concat(m)]||s[m]||u[m]||r;return a?n.createElement(h,p(p({ref:t},c),{},{components:a})):n.createElement(h,p({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,p=new Array(r);p[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[s]="string"==typeof e?e:i,p[1]=o;for(var d=2;d<r;d++)p[d]=a[d];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1105:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=a(8957),i=(a(959),a(7942));const r={title:"matchUp Governor"},p=void 0,o={unversionedId:"governors/matchup-governor",id:"governors/matchup-governor",title:"matchUp Governor",description:"addMatchUpEndTime",source:"@site/docs/governors/matchup-governor.md",sourceDirName:"governors",slug:"/governors/matchup-governor",permalink:"/tods-competition-factory/docs/governors/matchup-governor",draft:!1,tags:[],version:"current",frontMatter:{title:"matchUp Governor"},sidebar:"docs",previous:{title:"Generation Governor",permalink:"/tods-competition-factory/docs/governors/generation-governor"},next:{title:"matchUpFormat Governor",permalink:"/tods-competition-factory/docs/governors/matchup-format-governor"}},l={},d=[{value:"addMatchUpEndTime",id:"addmatchupendtime",level:2},{value:"addMatchUpOfficial",id:"addmatchupofficial",level:2},{value:"addMatchUpResumeTime",id:"addmatchupresumetime",level:2},{value:"addMatchUpScheduledDate",id:"addmatchupscheduleddate",level:2},{value:"addMatchUpScheduledTime",id:"addmatchupscheduledtime",level:2},{value:"addMatchUpScheduleItems",id:"addmatchupscheduleitems",level:2},{value:"addMatchUpStartTime",id:"addmatchupstarttime",level:2},{value:"addMatchUpStopTime",id:"addmatchupstoptime",level:2},{value:"addMatchUpCourtOrder",id:"addmatchupcourtorder",level:2},{value:"applyLinueUps",id:"applylinueups",level:2},{value:"assignMatchUpSideParticipant",id:"assignmatchupsideparticipant",level:2},{value:"assignMatchUpCourt",id:"assignmatchupcourt",level:2},{value:"assignMatchUpVenue",id:"assignmatchupvenue",level:2},{value:"assignTieMatchUpParticipantId",id:"assigntiematchupparticipantid",level:2},{value:"bulkMatchUpStatusUpdate",id:"bulkmatchupstatusupdate",level:2},{value:"checkInParticipant",id:"checkinparticipant",level:2},{value:"checkOutParticipant",id:"checkoutparticipant",level:2},{value:"disableTieAutoCalc",id:"disabletieautocalc",level:2},{value:"enableTiaAutoCalc",id:"enabletiaautocalc",level:2},{value:"findMatchUp",id:"findmatchup",level:2},{value:"getHomeParticipantId",id:"gethomeparticipantid",level:2},{value:"modifyMatchUpFormatTiming",id:"modifymatchupformattiming",level:2},{value:"removeMatchUpSideParticipant",id:"removematchupsideparticipant",level:2},{value:"replaceTieMatchUpParticipantId",id:"replacetiematchupparticipantid",level:2},{value:"removeTieMatchUpParticipantId",id:"removetiematchupparticipantid",level:2},{value:"resetAdHocMatchUps",id:"resetadhocmatchups",level:2},{value:"resetScorecard",id:"resetscorecard",level:2},{value:"resetTieFormat",id:"resettieformat",level:2},{value:"setMatchUpDailyLimits",id:"setmatchupdailylimits",level:2},{value:"setMatchUpFormat",id:"setmatchupformat",level:2},{value:"setMatchUpHomeParticipantId",id:"setmatchuphomeparticipantid",level:2},{value:"setMatchUpStatus",id:"setmatchupstatus",level:2},{value:"setOrderOfFinish",id:"setorderoffinish",level:2},{value:"Validation",id:"validation",level:3},{value:"toggleParticipantCheckInState",id:"toggleparticipantcheckinstate",level:2},{value:"updateTieMatchUpScore",id:"updatetiematchupscore",level:2}],c={toc:d},s="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(s,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { matchUpGovernor } from 'tods-competition-factory';\n")),(0,i.kt)("h2",{id:"addmatchupendtime"},"addMatchUpEndTime"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const endTime = '2020-01-01T09:05:00Z';\nengine.addMatchUpEndTime({\n  validateTimeSeries, // optional - true by default - when false does not verify endTime is later than startTime\n  disableNotice, // when disabled subscribers will not be notified\n  matchUpId,\n  endTime,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupofficial"},"addMatchUpOfficial"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.addMatchUpOfficial({\n  disableNotice, // when disabled subscribers will not be notified\n  participantId,\n  officialType,\n  matchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupresumetime"},"addMatchUpResumeTime"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const resumeTime = '2020-01-01T09:00:00Z';\nengine.addMatchUpResumeTime({\n  removePriorValues, // optional boolean\n  disableNotice, // when disabled subscribers will not be notified\n  resumeTime,\n  matchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupscheduleddate"},"addMatchUpScheduledDate"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const scheduledDate = '2020-01-01';\nengine.addMatchUpScheduledDate({\n  removePriorValues, // optional boolean\n  disableNotice, // when disabled subscribers will not be notified\n  scheduledDate,\n  matchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupscheduledtime"},"addMatchUpScheduledTime"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const scheduledTime = '08:00';\nengine.addMatchUpScheduledTime({\n  removePriorValues, // optional boolean\n  disableNotice, // when disabled subscribers will not be notified\n  scheduledTime,\n  matchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupscheduleitems"},"addMatchUpScheduleItems"),(0,i.kt)("p",null,"Convenience function to add several schedule items at once."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.addMatchUpScheduleItems({\n  checkChronology, // optional boolean - returns warnings for scheduling errors; throws errors when combined with errorOnAnachronism\n  removePriorValues, // optional boolean\n  matchUpId,\n  drawId,\n  schedule: {\n    scheduledTime,\n    scheduledDate,\n    startTime,\n    courtIds, // applies only to TEAM matchUps\n    courtId, // requires scheduledDate\n    venueId,\n    endTime,\n  },\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupstarttime"},"addMatchUpStartTime"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const startTime = '2020-01-01T08:05:00Z';\nengine.addMatchUpStartTime({\n  drawId,\n  matchUpId,\n  startTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupstoptime"},"addMatchUpStopTime"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const stopTime = '2020-01-01T08:15:00Z';\nengine.addMatchUpStopTime({\n  drawId,\n  matchUpId,\n  stopTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addmatchupcourtorder"},"addMatchUpCourtOrder"),(0,i.kt)("p",null,"When using Pro-scheduling, assign order on court"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.addMatchUpCourtOrder({\n  removePriorValues, // optional boolean\n  drawId, // drawId where matchUp is found\n  courtOrder,\n  matchUpId,\n  courtId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"applylinueups"},"applyLinueUps"),(0,i.kt)("p",null,"Applies ",(0,i.kt)("inlineCode",{parentName:"p"},"lineUps")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"sides")," of a ",(0,i.kt)("em",{parentName:"p"},"TEAM")," matchUp. Order is not important as team side is determined automatically. Does not check to ensure that participants in ",(0,i.kt)("inlineCode",{parentName:"p"},"lineUps")," are part of teams; this is assumed. It is possible to have ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"some"))," participants assigned to a team side who are not part of a team."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"result = engine.applyLineUps({\n  matchUpId, // must be { matchUpType: TEAM }\n  lineUps, // array of at most two lineUps (see TODS)\n  drawId, // reference to draw in which matchUp occurs\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"assignmatchupsideparticipant"},"assignMatchUpSideParticipant"),(0,i.kt)("p",null,"Assign participant to AD_HOC matchUp."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.assignMatchUpSideParticipant({\n  participantId,\n  sideNumber,\n  matchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"assignmatchupcourt"},"assignMatchUpCourt"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.assignMatchUpCourt({\n  removePriorValues, // optional boolean\n  drawId, // drawId where matchUp is found\n  courtDayDate, // ISO date string\n  matchUpId,\n  courtId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"assignmatchupvenue"},"assignMatchUpVenue"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.assignMatchUVenue({\n  removePriorValues, // optional boolean\n  drawId, // drawId where matchUp is found\n  matchUpId,\n  venueId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"assigntiematchupparticipantid"},"assignTieMatchUpParticipantId"),(0,i.kt)("p",null,"Used when interactively assigning participants to ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps"),". When individual ",(0,i.kt)("inlineCode",{parentName:"p"},"participantIds")," are assigned to ",(0,i.kt)("inlineCode",{parentName:"p"},"{ matchUpType: 'DOUBLES' }")," it handles creating ",(0,i.kt)("inlineCode",{parentName:"p"},"{ participantType: PAIR }")," participants dynamically."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'engine.assignTieMatchUpParticipantId({\n  teamParticipantId, // optional - participant team can be derived from participantId. This supports assigning "borrowed" players from other teams.\n  participantId, // id of INDIVIDUAL or PAIR participant to be assigned to a matchUp\n  tieMatchUpId, // matchUpId of a SINGLES or DOUBLES that is part of a matchUp between teams\n  sideNumber, // optional - only necessary if a participant is part of both teams (edge case!)\n  drawId, // identifies draw in which matchUp is present\n});\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"bulkmatchupstatusupdate"},"bulkMatchUpStatusUpdate"),(0,i.kt)("p",null,"Provides the ability to update the outcomes of multiple matchUps at once."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const outcomes = [\n  {\n    eventId,\n    drawId,\n    matchUpId,\n    matchUpFormat,\n    matchUpStatus,\n    winningSide,\n    score,\n  },\n];\nengine.bulkMatchUpStatusUpdate({ outcomes });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"checkinparticipant"},"checkInParticipant"),(0,i.kt)("p",null,"Set the check-in state for a participant. Used to determine when both participants in a matchUp are available to be assigned to a court."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.checkInParticipant({\n  participantId,\n  matchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"checkoutparticipant"},"checkOutParticipant"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.checkOutParticipant({\n  participantId,\n  matchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"disabletieautocalc"},"disableTieAutoCalc"),(0,i.kt)("p",null,"Disable default behavior of auto calculating TEAM matchUp scores."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.disableTieAutoCalc({ drawId, matchUpId });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"enabletiaautocalc"},"enableTiaAutoCalc"),(0,i.kt)("p",null,"Re-enable default behavior of auto calculating TEAM matchUp scores, and trigger auto calculation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.enableTieAutoCalc({ drawId, matchUpId });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"findmatchup"},"findMatchUp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  matchUp,\n  structure, // returned for convenience\n} = engine.findMatchUp({\n  inContext, // optional - boolean - returns matchUp with additional attributes\n  matchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"gethomeparticipantid"},"getHomeParticipantId"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { homeParticipantId } = engine.getHomeParticipantId({ matchUp });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"modifymatchupformattiming"},"modifyMatchUpFormatTiming"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.modifyMatchUpFormatTiming({\n  matchUpFormat: 'SET3-S:6/TB7',\n  averageTimes: [\n    {\n      categoryNames: [U12, U14],\n      minutes: { [DOUBLES]: 110, default: 130 },\n    },\n    {\n      categoryNames: [U16, U18],\n      minutes: { [DOUBLES]: 100, default: 120 },\n    },\n  ],\n  recoveryTimes: [{ categoryNames: [], minutes: { default: 15, [DOUBLES]: 15 } }],\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removematchupsideparticipant"},"removeMatchUpSideParticipant"),(0,i.kt)("p",null,"Removes participant assigned to AD_HOC matchUp."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.removeMatchUpSideParticipant({\n  sideNumber, // number - required\n  matchUpId, // required\n  drawId, // required\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"replacetiematchupparticipantid"},"replaceTieMatchUpParticipantId"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.replaceTieMatchUpParticipantId({\n  existingParticipantId,\n  newParticipantId,\n  tieMatchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removetiematchupparticipantid"},"removeTieMatchUpParticipantId"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.removeTieMatchUpParticipantId({\n  participantId, // id of INDIVIDUAL or PAIR be removed\n  tieMatchUpId, // tieMatchUp, matchUpType either DOUBLES or SINGLES\n  drawId, // draw within which tieMatchUp is found\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"resetadhocmatchups"},"resetAdHocMatchUps"),(0,i.kt)("p",null,"Will remove all results (scores) and optionally all participant assignments from specified matchUps (via matchUpIds or roundNumbers)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const result = engine.resetAdHocMatchUps({\n  removeAssignments, // optional; remove all assigned participants\n  roundNumbers, // optional if matchUpids provided\n  matchUpIds, // optional only if roundNumber(s) provided\n  structureId, // optional unless matchUpIds not provided\n  drawId,\n};\n\nexport function resetAdHocMatchUps(params: ResetAdHocMatchUps) {\n  const paramsCheck = checkRequiredParameters(params, [\n    { [DRAW_DEFINITION]: true, [EVENT]: true },\n    {\n      [ONE_OF]: { [MATCHUP_IDS]: false, roundNumbers: false },\n      [INVALID]: INVALID_VALUES,\n      [OF_TYPE]: ARRAY,\n    },\n  ]);\n  if (paramsCheck.error) return paramsCheck;\n\n  const structureResult = getAdHocStructureDetails(params);\n  if (structureResult.error) return structureResult;\n  const { matchUpIds } = structureResult;\n})\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"resetscorecard"},"resetScorecard"),(0,i.kt)("p",null,"Removes all scores from ",(0,i.kt)("inlineCode",{parentName:"p"},"tieMatchUps")," within a TEAM ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUp"),"; preserves ",(0,i.kt)("inlineCode",{parentName:"p"},"lineUps"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.resetScorecard({\n  tiebreakReset, // optional boolean - check for tiebreak scenarios and reset tieFormat\n  tournamentId, // required\n  matchUpId, // required - must be a TEAM matchUp\n  drawId, // required\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"resettieformat"},"resetTieFormat"),(0,i.kt)("p",null,"Remove the ",(0,i.kt)("inlineCode",{parentName:"p"},"tieFormat")," from a TEAM ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUp")," if there is a ",(0,i.kt)("inlineCode",{parentName:"p"},"tieFormat")," further up the hierarchy; modifies ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUp.tieMatchUps")," to correspond."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.resetTieFormat({\n  tournamentId, // required\n  matchUpId, // must be a TEAM matchUp\n  drawId, // required\n  uuids, // optional - in client/server scenarios generated matchUps must have equivalent matchUpIds\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"setmatchupdailylimits"},"setMatchUpDailyLimits"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.setMatchUpDailyLimits({\n  dailyLimits: { SINGLES: 2, DOUBLES: 1, total: 3 },\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"setmatchupformat"},"setMatchUpFormat"),(0,i.kt)("p",null,"Sets the ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpFormat")," for a specific ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUp")," or for any scope within the hierarchy of a ",(0,i.kt)("inlineCode",{parentName:"p"},"tournamentRecord"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"scheduledDates")," is provided then ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps")," which have ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpStatus: TO_BE_PLAYED")," and are scheduled to be played on the specified dates will have their ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpFormat")," fixed rather than inherited. This means that subsequent changes to the parent ",(0,i.kt)("inlineCode",{parentName:"p"},"structure.matchUpFormat")," will have no effect on such ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps"),"."),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"force")," attribute will remove the ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpFormat")," from all targeted ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps")," which have ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpStatus: TO_BE_PLAYED"),"; this allows the effect of using ",(0,i.kt)("inlineCode",{parentName:"p"},"scheduledDates")," to be reversed. Use of this attribute will have no effect if ",(0,i.kt)("inlineCode",{parentName:"p"},"scheduledDates")," is also provided.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.setMatchUpFormat({\n  matchUpFormat, // TODS matchUpFormatCode\n  eventType, // optional - restrict to SINGLES or DOUBLES\n\n  matchUpId, // optional - set matchUpFormat for a specific matchUp\n  drawId, // required only if matchUpId, structureId or structureIds is present\n  force, // optional boolean - when setting for structure, draws or events, strip any defined matchUpFormat from all TO_BE_PLAYED matchUps\n\n  // scoping options\n  scheduledDates, // optional - ['2022-01-01']\n  stageSequences, // optional - [1, 2]\n  structureIds, // optional - ['structureId1', 'structureId2']\n  structureId, // optional\n  eventIds, // optional - ['eventId1', 'eventId2']\n  eventId, // optional\n  drawIds, // optional - ['drawId1', 'drawId2']\n  stages, // optional - ['MAIN', 'CONSOLATION']\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"setmatchuphomeparticipantid"},"setMatchUpHomeParticipantId"),(0,i.kt)("p",null,"Value ",(0,i.kt)("inlineCode",{parentName:"p"},"homeParticipantId")," will appear in hydrated ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps.schedule"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.setMatchUpHomeParticipantId({\n  disableNotice, // when disabled subscribers will not be notified\n  homeParticipantId, // empty string ('') will remove\n  removePriorValues, // optional boolean\n  matchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"setmatchupstatus"},"setMatchUpStatus"),(0,i.kt)("p",null,"Sets either matchUpStatus or score and winningSide; values to be set are passed in outcome object. Handles any winner/loser participant movements within or across structures."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const outcome = {\n  matchUpStatus, // optional\n  winningSide, // optional\n  score, // optional\n};\n\nengine.setMatchUpStatus({\n  disableScoreValidation, // optional boolean\n  allowChangePropagation, // optional boolean - allow winner/loser to be swapped and propgate change throughout draw structures\n  disableAutoCalc, // optional - applies only to { matchUpType: TEAM }\n  enableAutoCalc, // optional - applies only to { matchUpType: TEAM }\n  tournamentId,\n  matchUpTieId, // optional - if part of a TIE matchUp\n  matchUpId,\n  outcome, // optional\n  drawId,\n  schedule: {\n    // optional - set schedule items\n    courtIds, // optional - applies only to TEAM matchUps => creates .allocatedCourts\n    courtId, // requires scheduledDate\n    venueId,\n    scheduledDate,\n    scheduledTime,\n    startTime,\n    endTime,\n  },\n  notes, // optional - add note (string) to matchUp object\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"setorderoffinish"},"setOrderOfFinish"),(0,i.kt)("p",null,"Sets the ",(0,i.kt)("inlineCode",{parentName:"p"},"orderOfFinish")," attribute for ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps")," specified by ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpId")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"finishingOrder")," array."),(0,i.kt)("h3",{id:"validation"},"Validation"),(0,i.kt)("p",null,"Validation is done within a ",(0,i.kt)("em",{parentName:"p"},"cohort")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps")," which have equivalent ",(0,i.kt)("inlineCode",{parentName:"p"},"structureId"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpType"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"roundNumber"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUpTieId")," (if applicable)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"matchUpIds")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"finishingOrder")," must be part of the same ",(0,i.kt)("em",{parentName:"li"},"cohort")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"orderOfFinish")," values must be unique positive integers within the ",(0,i.kt)("em",{parentName:"li"},"cohort"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.setOrderOfFinish({\n  finishingOrder: [{ matchUpId, orderOfFinish: 1 }],\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"toggleparticipantcheckinstate"},"toggleParticipantCheckInState"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.toggleParticipantCheckInState({\n  participantId,\n  tournamentId,\n  matchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"updatetiematchupscore"},"updateTieMatchUpScore"),(0,i.kt)("p",null,"Trigger automatic calculation of the score of a TEAM matchUp."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.updateTieMatchUpScore({\n  tournamentId, // optional if default tournament set\n  matchUpId,\n  drawId,\n});\n")),(0,i.kt)("hr",null))}u.isMDXComponent=!0}}]);