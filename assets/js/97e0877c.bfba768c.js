"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2953],{3805:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var r=n(758);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9469:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(2232),o=(n(758),n(3805));const a={title:"Global State"},i=void 0,s={unversionedId:"engines/global-state",id:"engines/global-state",title:"Global State",description:"devContext",source:"@site/docs/engines/global-state.md",sourceDirName:"engines",slug:"/engines/global-state",permalink:"/tods-competition-factory/docs/engines/global-state",draft:!1,tags:[],version:"current",frontMatter:{title:"Global State"},sidebar:"docs",previous:{title:"Custom Engines",permalink:"/tods-competition-factory/docs/engines/custom-engines"},next:{title:"Governors",permalink:"/tods-competition-factory/docs/governors/governors-overview"}},l={},c=[{value:"devContext",id:"devcontext",level:2},{value:"getState",id:"getstate",level:2},{value:"removeTournamentRecord",id:"removetournamentrecord",level:2},{value:"setState",id:"setstate",level:2},{value:"setTournamentRecord",id:"settournamentrecord",level:2},{value:"setTournamentId",id:"settournamentid",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.yg)(p,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"devcontext"},"devContext"),(0,o.yg)("p",null,"Setting devContext(true) bypasses ",(0,o.yg)("strong",{parentName:"p"},"try {} catch (err) {}")," code block and in some cases enables enhanced logging"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"getDevContext(true);\n")),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"getstate"},"getState"),(0,o.yg)("p",null,"Returns a deep copy of ",(0,o.yg)("inlineCode",{parentName:"p"},"tournamentRecords")," which have been loaded, along with currently selected ",(0,o.yg)("inlineCode",{parentName:"p"},"tournamentId"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"const { tournamentId, tournamentRecords } = getState({\n  convertExtensions, // optional - convert extensions to '_' prefixed attributes\n  removeExtensions, // optional - strip all extensions out of tournamentRecord\n});\n")),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"removetournamentrecord"},"removeTournamentRecord"),(0,o.yg)("p",null,"Removes a tournamentRecord from shared state."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"removeTournamentRecord(tournamentId);\n")),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"setstate"},"setState"),(0,o.yg)("p",null,"Loads tournament records into ",(0,o.yg)("a",{parentName:"p",href:"/docs/engines/global-state"},"Global State"),"; supports both an array of tournamentRecords and an object with tournamentId keys."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"const tournamentRecords = [tournamentRecord];\n// or const tournamentRecords = { [tournamentId]: tournamentRecord }\n\nsetsState(tournamentRecords, deepCopy, deepCopyConfig);\n")),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"By default a deep copy of the ",(0,o.yg)("inlineCode",{parentName:"p"},"tournamentRecords")," is made so that mutations do not affect the source objects. An optional boolean parameter, ",(0,o.yg)("em",{parentName:"p"},"deepCopy")," can be set to false to override this default behavior.")),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},(0,o.yg)("inlineCode",{parentName:"p"},"deepCopyConfig")," is an optional configuration for ",(0,o.yg)("inlineCode",{parentName:"p"},"makeDeepCopy"),". In server configurations when ",(0,o.yg)("inlineCode",{parentName:"p"},"deepCopy")," is FALSE and ",(0,o.yg)("inlineCode",{parentName:"p"},"tournamentRecords")," are retrieved from Mongo, for instance, there are scenarios where nodes of the JSON structure contain prototypes which cannot be converted.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"const deepCopyConfig = {\n  ignore, // optional - either an array of attributes to ignore or a function which processes attributes to determine whether to ignore them\n  toJSON, // optional - an array of attributes to convert to JSON if the attribute in question is an object with .toJSON property\n  stringify, // optional - an array of attributes to stringify\n  modulate, // optional - function to process every attribute and return custom values, or undefined, which continues normal processing\n};\n")),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"settournamentrecord"},"setTournamentRecord"),(0,o.yg)("p",null,"Adds a tournamentRecord to shared engine state, or overwrite/replace an existing ",(0,o.yg)("inlineCode",{parentName:"p"},"tournamentRecord")," with the same ",(0,o.yg)("inlineCode",{parentName:"p"},"tournamentId"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"setTournamentRecord(tournamentRecord);\n")),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"settournamentid"},"setTournamentId"),(0,o.yg)("p",null,"Sets a tournamentRecord in shared state as the 'default' tournament for invoked functions."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"setTournamentId(tournamentId);\n")),(0,o.yg)("hr",null))}d.isMDXComponent=!0}}]);