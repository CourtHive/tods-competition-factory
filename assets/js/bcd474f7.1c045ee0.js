(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[127],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var p=r.createContext({}),s=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},l={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,p=t.parentName,u=c(t,["components","mdxType","originalType","parentName"]),m=s(n),d=o,f=m["".concat(p,".").concat(d)]||m[d]||l[d]||a;return n?r.createElement(f,i(i({ref:e},u),{},{components:n})):r.createElement(f,i({ref:e},u))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var p in e)hasOwnProperty.call(e,p)&&(c[p]=e[p]);c.originalType=t,c.mdxType="string"==typeof t?t:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3892:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return l}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],c={title:"Context"},p={unversionedId:"concepts/context",id:"concepts/context",isDocsHomePage:!1,title:"Context",description:"When matchUps and tournamentParticipants are returned inContext it means that they include contextual information that is not part of the TODS document structure from which they originated.",source:"@site/docs/concepts/context.md",sourceDirName:"concepts",slug:"/concepts/context",permalink:"/tods-competition-factory/docs/concepts/context",version:"current",frontMatter:{title:"Context"},sidebar:"docs",previous:{title:"Installation",permalink:"/tods-competition-factory/docs/installation"},next:{title:"Introduction to Policies",permalink:"/tods-competition-factory/docs/concepts/policies"}},s=[{value:"matchUps",id:"matchups",children:[]},{value:"tournamentParticipants",id:"tournamentparticipants",children:[]},{value:"Converted Extensions",id:"converted-extensions",children:[]}],u={toc:s};function l(t){var e=t.components,n=(0,o.Z)(t,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When ",(0,a.kt)("strong",{parentName:"p"},"matchUps")," and ",(0,a.kt)("strong",{parentName:"p"},"tournamentParticipants")," are returned ",(0,a.kt)("strong",{parentName:"p"},"inContext")," it means that they include contextual information that is not part of the TODS document structure from which they originated."),(0,a.kt)("h2",{id:"matchups"},"matchUps"),(0,a.kt)("p",null,"All API calls which return ",(0,a.kt)("strong",{parentName:"p"},"matchUps")," return deep copies with context. Attributes that are added for ",(0,a.kt)("strong",{parentName:"p"},"matchUps")," include: structureId, structureName, drawId, eventId, eventName, tournamentId and tournamentName."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { matchUps } = tournamentEngine.allTournamentMatchUps();\n")),(0,a.kt)("h2",{id:"tournamentparticipants"},"tournamentParticipants"),(0,a.kt)("p",null,"For ",(0,a.kt)("strong",{parentName:"p"},"tournamentParticipants"),", individualParticipants are added from individualParticipantIds."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { tournamentParticipants } = tournamentEngine.getTournamentParticipants({\n  participantFilters: {\n    inContext: true,\n    participantTypes: [PAIR],\n  },\n});\n")),(0,a.kt)("h2",{id:"converted-extensions"},"Converted Extensions"),(0,a.kt)("p",null,"All elements that are returned ",(0,a.kt)("strong",{parentName:"p"},"inContext")," include converted extensions. See ",(0,a.kt)("strong",{parentName:"p"},"makeDeepCopy")," in ",(0,a.kt)("a",{parentName:"p",href:"../engines/makedeepcopy"},"Utilities"),"."))}l.isMDXComponent=!0}}]);