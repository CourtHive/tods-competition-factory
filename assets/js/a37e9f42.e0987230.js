"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3180],{5212:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=i(1527),a=i(7942);const r={title:"Round Robin Tally Policy"},o=void 0,s={id:"policies/tallyPolicy",title:"Round Robin Tally Policy",description:"A Tally Policy controls how order is determined for Round Robin groups.",source:"@site/docs/policies/tallyPolicy.md",sourceDirName:"policies",slug:"/policies/tallyPolicy",permalink:"/tods-competition-factory/docs/policies/tallyPolicy",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Round Robin Tally Policy"},sidebar:"docs",previous:{title:"Round Naming",permalink:"/tods-competition-factory/docs/policies/roundNaming"},next:{title:"Feed Policy",permalink:"/tods-competition-factory/docs/policies/feedPolicy"}},l={},c=[{value:"Default Behavior",id:"default-behavior",level:2},{value:"Implementation Details",id:"implementation-details",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.ah)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["A ",(0,n.jsx)(t.strong,{children:"Tally Policy"})," controls how order is determined for Round Robin groups."]}),"\n",(0,n.jsxs)(t.p,{children:["Policy Definitions can be attached to a ",(0,n.jsx)(t.a,{href:"../apis/tournament-engine-api#attachpolicies",children:"tournament record"}),", or an ",(0,n.jsx)(t.a,{href:"../apis/tournament-engine-api#attacheventpolicies",children:"event"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"const roundRobinTally = {\n  groupOrderKey: 'matchUpsWon', // possible to group by tieMatchUpsWon, tieSinglesWon, tieDoublesWon, matchUpsWon, pointsWon, gamesWon, setsWon, gamesPct, setsPct, pointsPct, matchUpsPct\n  groupTotalSetsPlayed: false, // optional - when true will calculate % of sets won based on total group sets played rather than participant sets played\n  headToHead: { disabled: false },\n  tallyDirectives: [\n    // these are the default values if no tallyDirectives provided; edit to suit\n    // idsFilter scopes the tally calculations to only tied participants\n    // with { idsFilter: false } the ratio is calculated from all group matchUps\n    // with { idsFilter: true } the ratio is calculated from matchUps including tied participants\n    // when { maxParticipants: 2 } is defined, the rule only applies when # of participants is <= maxParticipants\n    // any attribute/idsFilter combination can be selectively disabled for Head to Head calculations\n    { attribute: 'matchUpsPct', idsFilter: false, disbleHeadToHead: false },\n    {\n      attribute: 'tieMatchUpsPct',\n      idsFilter: false,\n      disbleHeadToHead: false,\n    },\n    { attribute: 'setsPct', idsFilter: false, disbleHeadToHead: false },\n    { attribute: 'gamesPct', idsFilter: false, disbleHeadToHead: false },\n    { attribute: 'pointsPct', idsFilter: false, disbleHeadToHead: false },\n    { attribute: 'matchUpsPct', idsFilter: true, disbleHeadToHead: false },\n    { attribute: 'tieMatchUpsPct', idsFilter: true, disbleHeadToHead: false },\n    { attribute: 'setsPct', idsFilter: true, disbleHeadToHead: false },\n    { attribute: 'gamesPct', idsFilter: true, disbleHeadToHead: false },\n    { attribute: 'pointsPct', idsFilter: true, disbleHeadToHead: false },\n  ],\n  disqualifyDefaults: true, // disqualified participants are pushed to the bottom of the group order\n  disqualifyWalkovers: true, // disqualified participants are pushed to the bottom of the group order\n  excludeMatchUpStatuses: [], // matchUpStatuses to exclude from calculations, e.g. ABANDONED, INCOMPLETE\n  setsCreditForDefaults: false, // whether or not to award e.g. 2 sets won for participant who wins by opponent DEFAULT\n  setsCreditForWalkovers: false, // whether or not to award e.g. 2 sets won for participant who wins by opponent WALKOVER\n  setsCreditForRetirements: false, // whether or not to award e.g. 2 sets won for participant who wins by opponent RETIREMENT\n  gamesCreditForDefaults: false, // whether or not to award e.g. 12 games won for participant who wins by opponent DEFAULT\n  gamesCreditForWalkovers: false, // whether or not to award e.g. 12 games won for participant who wins by opponent WALKOVER\n  gamesCreditForRetirements: false, // whether or not to award e.g. 2 sets won for participant who wins by opponent RETIREMENT\n  gamesCreditForTiebreakSets: true, // defaults to true; whether to count a tiebreak set as a game won, e.g. 6-2 2-6 [10-3]\n  GEMscore: [\n    'matchUpsPct',\n    'tieMatchUpsPct',\n    'setsPct',\n    'gamesPct',\n    'pointsPct',\n  ],\n};\n\ntournamentEngine.attachPolicies({ policyDefinitions: { roundRobinTally } });\n"})}),"\n",(0,n.jsx)(t.h2,{id:"default-behavior",children:"Default Behavior"}),"\n",(0,n.jsx)(t.p,{children:"Round Robin group tally logic by default implements the following guidelines:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"The participant who wins the most matches is the winner."}),"\n",(0,n.jsx)(t.li,{children:"If two players are tied, then the winner of their head-to-head match is the winner."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"If three or more participants are tied, tie are broken as follows:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"The head-to-head win-loss record in matches involving just the tied players;"}),"\n",(0,n.jsx)(t.li,{children:"The participant with the highest percentage of sets won of all sets completed;"}),"\n",(0,n.jsx)(t.li,{children:"The head-to-head win-loss record in matches involving the players who remain tied;"}),"\n",(0,n.jsx)(t.li,{children:"The participant with the highest percentage of games won of all games completed;"}),"\n",(0,n.jsx)(t.li,{children:"The head-to-head win-loss record in matches involving the players who remain tied;"}),"\n",(0,n.jsx)(t.li,{children:"The participant with the highest percentage of sets won of sets completed among players in the group under consideration;"}),"\n",(0,n.jsx)(t.li,{children:"The head-to-head win-loss record in matches involving the players who remain tied;"}),"\n",(0,n.jsx)(t.li,{children:"The participant with the highest percentage of games won of games completed among the players under consideration; and"}),"\n",(0,n.jsx)(t.li,{children:"The head-to-head win-loss record in matches involving the players who remain tied."}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,n.jsxs)(t.p,{children:["After initial separation of participants by ",(0,n.jsx)(t.code,{children:"matchUpsWon"}),",\nthe implementation is configurable by supplying an array of ",(0,n.jsx)(t.code,{children:"tallyDirectives"})," in the ",(0,n.jsx)(t.strong,{children:"Tally Policy"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["The algorithm relies on the values availble in the calculated ",(0,n.jsx)(t.code,{children:"participantResults"})," and works as follows:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"separate participants into groups by a given attribute"}),"\n",(0,n.jsx)(t.li,{children:"a group with a single participant is 'resolved'"}),"\n",(0,n.jsx)(t.li,{children:"groups of two participants are resolved by head-to-head (if not disabled/if participants faced each other)"}),"\n",(0,n.jsx)(t.li,{children:"groups of three or more search for an attribute that will separate them into smaller groups"}),"\n",(0,n.jsxs)(t.li,{children:["participantResults scoped to the members of a group and recalculated when ",(0,n.jsx)(t.code,{children:"{ idsFilter: true }"})]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,a.ah)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},7942:(e,t,i)=>{i.d(t,{ah:()=>c});var n=i(959);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(i),u=a,f=h["".concat(l,".").concat(u)]||h[u]||d[u]||r;return i?n.createElement(f,o(o({ref:t},p),{},{components:i})):n.createElement(f,o({ref:t},p))}));p.displayName="MDXCreateElement"}}]);