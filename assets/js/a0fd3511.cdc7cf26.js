(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{101:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=a.a.createContext({}),u=function(e){var n=a.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=u(e.components);return a.a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(t),m=r,b=l["".concat(i,".").concat(m)]||l[m]||d[m]||o;return t?a.a.createElement(b,c(c({ref:n},p),{},{components:t})):a.a.createElement(b,c({ref:n},p))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<o;p++)i[p]=t[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},88:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return u}));var r=t(3),a=t(7),o=(t(0),t(101)),i={title:"Mocks Engine API",menu:"Mocks Engine",route:"/mocksEngine/api"},c={unversionedId:"apis/mocks-engine-api",id:"apis/mocks-engine-api",isDocsHomePage:!1,title:"Mocks Engine API",description:"generateOutcomeFromScoreString",source:"@site/docs/apis/mocks-engine-api.md",slug:"/apis/mocks-engine-api",permalink:"/tods-competition-factory/docs/apis/mocks-engine-api",version:"current",sidebar:"docs",previous:{title:"Generating Tournaments",permalink:"/tods-competition-factory/docs/engines/mocks-engine-examples"},next:{title:"Competition Engine API",permalink:"/tods-competition-factory/docs/apis/competition-engine-api"}},s=[{value:"generateOutcomeFromScoreString",id:"generateoutcomefromscorestring",children:[]},{value:"generateParticipants",id:"generateparticipants",children:[]},{value:"generateTournamentRecord",id:"generatetournamentrecord",children:[]},{value:"parseScoreString",id:"parsescorestring",children:[]}],p={toc:s};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"generateoutcomefromscorestring"},"generateOutcomeFromScoreString"),Object(o.b)("p",null,"Generates ",Object(o.b)("inlineCode",{parentName:"p"},"outcome")," object from parseable score string."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const { outcome } = mocksEngine.generateOutcomeFromScoreString({\n  scoreString: '6-1 6-1', // parseable score string\n  winningSide: 1, // optional - valid values are [1, 2, undefined]\n  matchUpStatus: COMPLETED,\n});\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"outcome")," object can be passed into the ",Object(o.b)("inlineCode",{parentName:"p"},"tournamentEngine")," method for updating a ",Object(o.b)("inlineCode",{parentName:"p"},"matchUp"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.devContext(true).setMatchUpStatus({\n  drawId,\n  matchUpId,\n  outcome,\n});\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"generateparticipants"},"generateParticipants"),Object(o.b)("p",null,"Generate mock participants. This method is used within ",Object(o.b)("inlineCode",{parentName:"p"},"generateTournamentRecord")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const { participants } = mocksEngine.generateParticipants({\n  participantsCount: 32, //  number of participants to generate\n  participantType: PAIR, // [INDIVIDUAL, PAIR, TEAM]\n  matchUpType: SINGLES, // optional - [SINGLES, DOUBLES] - forces PAIR participant generation if DOUBLES\n  sex: FEMALE, // optional - [MALE, FEMALE]\n\n  nationalityCodesCount: 10, // optional - number of nationality codes to use when generating participants\n  nationalityCodes: [], // optional - an array of ISO codes to randomly assign to participants\n  addressProps: {\n    citiesCount: 10,\n    statesCount: 10,\n    postalCodesCount: 10,\n  },\n  valuesInstanceLimit, // optional - maximum number of values which can be the same\n\n  inContext: true, // optional - whether to expand PAIR and TEAM individualParticipantIds => individualParticipant objects\n});\n\ntournamentEngine.addParticipants({ participants });\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"generatetournamentrecord"},"generateTournamentRecord"),Object(o.b)("p",null,"Generate a complete tournamentRecord from the following attributes"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"// Optional values\nconst outcomes = [\n  {\n    drawPositions: [1, 2],\n    scoreString: '6-1 6-2',\n    winningSide: 1,\n  },\n];\nconst drawProfiles = [\n  {\n    drawSize: 4,\n    participantsCount: 4,\n    drawType: ROUND_ROBIN,\n    outcomes,\n  },\n];\nconst venueProfiles = [\n  {\n    venueName: 'Venue 1', // optional - will auto-generate names\n    courtsCount: 3,\n    dateAvailability, // optional - will use tournament start and end dates and default times\n  },\n];\n\nconst {\n  tournamentRecord,\n  drawIds: [drawId],\n  eventIds: [eventId],\n} = mocksEngine.generateTournamentRecord({\n  endDate, // optional - ISO string date\n  startDate, // optional - ISO string date\n  participantsProfile, // optional - { participantCount, participantType }\n  drawProfiles, // optional - array of profiles for draws to be generated; each draw creates an event\n  venueProfiles, // optional - array of profiles for venues to be generated; each venue creates courts\n});\n\ntournamentEngine.setState(tournamentRecord);\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"parsescorestring"},"parseScoreString"),Object(o.b)("p",null,"Produces TODS sets objects."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const sets = mocksEngine.parseScoreString({ scoreString: '1-6 1-6' });\n\n/*\nconsole.log(sets)\n[\n  ({\n    side1Score: 1,\n    side2Score: 6,\n    side1TiebreakScore: undefined,\n    side2TiebreakScore: undefined,\n    winningSide: 2,\n    setNumber: 1,\n  },\n  {\n    side1Score: 1,\n    side2Score: 6,\n    side1TiebreakScore: undefined,\n    side2TiebreakScore: undefined,\n    winningSide: 2,\n    setNumber: 2,\n  })\n];\n*/\n")),Object(o.b)("hr",null))}u.isMDXComponent=!0}}]);