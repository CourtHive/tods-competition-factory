(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,r=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),b=a,m=u["".concat(r,".").concat(b)]||u[b]||d[b]||c;return n?o.a.createElement(m,i(i({ref:t},l),{},{components:n})):o.a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,r=new Array(c);r[0]=b;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var l=2;l<c;l++)r[l]=n[l];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),o=n(7),c=(n(0),n(101)),r={name:"API",title:"Competition Engine API"},i={unversionedId:"apis/competition-engine-api",id:"apis/competition-engine-api",isDocsHomePage:!1,title:"Competition Engine API",description:"allCompetitionMatchUps",source:"@site/docs/apis/competition-engine-api.md",slug:"/apis/competition-engine-api",permalink:"/tods-competition-factory/docs/apis/competition-engine-api",version:"current",sidebar:"docs",previous:{title:"Mocks Engine API",permalink:"/tods-competition-factory/docs/apis/mocks-engine-api"},next:{title:"Tournament Engine API",permalink:"/tods-competition-factory/docs/apis/tournament-engine-api"}},s=[{value:"allCompetitionMatchUps",id:"allcompetitionmatchups",children:[]},{value:"calculateScheduleTimes",id:"calculatescheduletimes",children:[]},{value:"competitionMatchUps",id:"competitionmatchups",children:[]},{value:"competitionScheduleMatchUps",id:"competitionschedulematchups",children:[]},{value:"devContext",id:"devcontext",children:[]},{value:"getState",id:"getstate",children:[]},{value:"getVenuesAndCourts",id:"getvenuesandcourts",children:[]},{value:"matchUpScheduleChange",id:"matchupschedulechange",children:[]},{value:"removeMatchUpCourtAssignment",id:"removematchupcourtassignment",children:[]},{value:"reorderUpcomingMatchUps",id:"reorderupcomingmatchups",children:[]},{value:"scheduleMatchUps",id:"schedulematchups",children:[]},{value:"setState",id:"setstate",children:[]},{value:"setTournamentRecord",id:"settournamentrecord",children:[]},{value:"setSubscriptions",id:"setsubscriptions",children:[]},{value:"toggleParticipantCheckInState",id:"toggleparticipantcheckinstate",children:[]},{value:"version",id:"version",children:[]}],l={toc:s};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"allcompetitionmatchups"},"allCompetitionMatchUps"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"const { matchUps } = competitionEngine.allCompetitionMatchUps({\n  scheduleVisibilityFilters,\n});\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"calculatescheduletimes"},"calculateScheduleTimes"),Object(c.b)("p",null,"Returns an array of available schedule times for a given date (and optional time range)."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"const { scheduleTimes } = competitionEngine.calculateScheduleTimes({\n  date,\n\n  startTime, // optional - if not provided will be derived from court availability for the tiven date\n  endTime, // optional - if not provided will be derived from court availability for the tiven date\n\n  averageMatchUpTime = 90, // optional - defualts to 90\n  periodLength = 30, // optional - defualts to 30\n\n  venueIds, // optional - restrict calculation to specified venueIds\n});\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"competitionmatchups"},"competitionMatchUps"),Object(c.b)("p",null,'Returns aggregated arrays of "inContext" matchUps for all tournamentRecords loaded into ',Object(c.b)("inlineCode",{parentName:"p"},"competitionEngine"),"."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"const {\n  byeMatchUps,\n  abandonedMatchUps,\n  completedMatchUps,\n  pendingMatchUps,\n  upcomingMatchUps,\n} = competitionEngine.competitionMatchUps({\n  scheduleVisibilityFilters,\n});\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"competitionschedulematchups"},"competitionScheduleMatchUps"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"const matchUpFilters = {\n  isMatchUpTie: false,\n  scheduledDate, // scheduled date of matchUps to return\n\n  localTimeZone, // optional - used to convert scheduleDate\n  localPerspective: true,\n};\n\nconst {\n  completedMatchUps,\n  dateMatchUps,\n  courtsData,\n  venues,\n} = competitionEngine.competitionScheduleMatchUps({ matchUpFilters });\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"devcontext"},"devContext"),Object(c.b)("p",null,"Setting devContext(true) bypasses ",Object(c.b)("strong",{parentName:"p"},"try {} catch (err) {}")," code block and in some cases enables enhanced logging"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"competitionEngine.devContext(true);\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getstate"},"getState"),Object(c.b)("p",null,"Returns a deep copy of the current competitionEngine state."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"const { tournaentRecords } = competition.getState({\n  convertExtensions, // optional - convert extensions to '_' prefixed attributes\n});\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getvenuesandcourts"},"getVenuesAndCourts"),Object(c.b)("p",null,"Returns an aggregate view of venues and courts across all tournamentRecords loaded into ",Object(c.b)("inlineCode",{parentName:"p"},"competitionEngine"),"."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"const { courts, venues } = competitionEngine.getVenuesAndCourts();\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"matchupschedulechange"},"matchUpScheduleChange"),Object(c.b)("p",null,"Swaps the schedule details of two scheduled matchUps."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"competitionEngine.matchUpScheduleChange({\n  sourceMatchUpContextIds,\n  targetMatchUpContextIds,\n  sourceCourtId,\n  targetCourtId,\n  courtDayDate: dateSelected,\n});\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"removematchupcourtassignment"},"removeMatchUpCourtAssignment"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"competitionEngine.removeMatchUpCourtAssignment({\n  drawId,\n  matchUpId,\n  tournamentId,\n  courtDayDate,\n});\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"reorderupcomingmatchups"},"reorderUpcomingMatchUps"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"const matchUpContextIds = [{ tournamentId, drawId, matchUpId }];\ncompetitionEngine.reorderUpcomingMatchUps({\n  matchUpContextIds,\n  firstToLast, // boolean - direction of reorder\n});\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"schedulematchups"},"scheduleMatchUps"),Object(c.b)("p",null,"Auto schedule matchUps on a given date using the Garmin formula."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"const schedulingProfile = [\n  {\n    tournamentId,\n    eventId,\n    drawId,\n    structureId, // optional - will default to first structure of first stage\n    venueId, // optional - target venue for given event/draw/structure\n    roundNumbers, // optional - if not provided will check scheduling policy for # of permitted matchUps / participant / day\n    roundProfile: { // optional - necessary when matchUps within a single structure are split across venues or dates\n      roundNumber,\n      roundPositionStart,\n      roundPositionEnd,\n   }\n  }\n];\n\ncompetitionEngine.scheduleMatchUps({\n  date,\n  startTime, // optional - if not provided will be derived from court availability for the tiven date\n  endTime, // optional - if not provided will be derived from court availability for the tiven date\n\n  venueIds, // optional - defaults to all known; if a single venueId is provided then all matchUps will be scheduled for that venue\n\n  matchUpIds, // array of matchUpIds; if no schedulingProfile provided will be auto-sorted by draw size and roundNumbers\n  schedulingProfile, // optional profile for sorting matchUps to be scheduled\n\n  periodLength = 30, // optional - defaults to 30\n  averageMatchUpTime = 90, // optional - defaults to 90\n});\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"setstate"},"setState"),Object(c.b)("p",null,"Loads tournament records into competitionEngine; supports both an array of tournamentRecords and an object with tournamentId keys."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"const tournamentRecords = [tournamentRecord];\n// or const tournamentRecords = { [tournamentId]: tournamentRecord }\n\ncompetitionEngine.setsState(tournamentRecords, deepCopy);\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"settournamentrecord"},"setTournamentRecord"),Object(c.b)("p",null,"Adds a tournamentRecord to ",Object(c.b)("inlineCode",{parentName:"p"},"competitionEngine")," state."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"competitionEngine.setTournamentRecord(tournamentRecord);\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"setsubscriptions"},"setSubscriptions"),Object(c.b)("p",null,"Please refer to the ",Object(c.b)("a",{parentName:"p",href:"../concepts/subscriptions"},"Subscriptions")," in General Concepts."),Object(c.b)("hr",null),Object(c.b)("h2",{id:"toggleparticipantcheckinstate"},"toggleParticipantCheckInState"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"version"},"version"),Object(c.b)("p",null,"Returns NPM package version. Can be used in configurations that utilize Competition Factory engines on both client and server to ensure equivalency."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"const version = competitionEngine.version();\n")),Object(c.b)("hr",null))}p.isMDXComponent=!0}}]);