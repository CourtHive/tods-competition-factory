"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[450],{3805:(e,n,o)=>{o.d(n,{xA:()=>p,yg:()=>s});var t=o(758);function i(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function a(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){i(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,t,i=function(e,n){if(null==e)return{};var o,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||(i[o]=e[o]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var d=t.createContext({}),c=function(e){var n=t.useContext(d),o=n;return e&&(o="function"==typeof e?e(n):a(a({},n),e)),o},p=function(e){var n=c(e.components);return t.createElement(d.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var o=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(o),f=i,s=m["".concat(d,".").concat(f)]||m[f]||u[f]||r;return o?t.createElement(s,a(a({ref:n},p),{},{components:o})):t.createElement(s,a({ref:n},p))}));function s(e,n){var o=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=o.length,a=new Array(r);a[0]=f;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[m]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<r;c++)a[c]=o[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,o)}f.displayName="MDXCreateElement"},5479:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=o(2232),i=(o(758),o(3805));const r={title:"tieFormat Governor"},a=void 0,l={unversionedId:"governors/tie-format-governor",id:"governors/tie-format-governor",title:"tieFormat Governor",description:"addCollectionDefinition",source:"@site/docs/governors/tie-format-governor.md",sourceDirName:"governors",slug:"/governors/tie-format-governor",permalink:"/tods-competition-factory/docs/governors/tie-format-governor",draft:!1,tags:[],version:"current",frontMatter:{title:"tieFormat Governor"}},d={},c=[{value:"addCollectionDefinition",id:"addcollectiondefinition",level:2},{value:"addCollectionGroup",id:"addcollectiongroup",level:2},{value:"compareTieFormats",id:"comparetieformats",level:2},{value:"modifyCollectionDefinition",id:"modifycollectiondefinition",level:2},{value:"modifyTieFormat",id:"modifytieformat",level:2},{value:"orderCollectionDefinitions",id:"ordercollectiondefinitions",level:2},{value:"removeCollectionDefinition",id:"removecollectiondefinition",level:2},{value:"removeCollectionGroup",id:"removecollectiongroup",level:2},{value:"validateCollectionDefinition",id:"validatecollectiondefinition",level:2}],p={toc:c},m="wrapper";function u(e){let{components:n,...o}=e;return(0,i.yg)(m,(0,t.A)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"import { tieFormatGovernor } from 'tods-competition-factory';\n")),(0,i.yg)("h2",{id:"addcollectiondefinition"},"addCollectionDefinition"),(0,i.yg)("p",null,"Adds a ",(0,i.yg)("inlineCode",{parentName:"p"},"collectionDefinition")," to the specified target, either ",(0,i.yg)("inlineCode",{parentName:"p"},"matchUp"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"structure"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"drawDefinition")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"event"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"engine.addCollectionDefinition({\n  updateInProgressMatchUps, // defaults to true; in progress matchUps have matchUpStatus: IN_PROGRESS\n  collectionDefinition, // will be validated\n  tieFormatName, // if not provided, existing tieFormatName will be deleted\n  structureId, // optional - if provided only tieFormat on structure will be modified\n  matchUpId, // optional - if provided only tieFormat on matchUp will be modified\n  eventId, // optional - if provided only tieFormat on event will be modified\n  drawId, // required if structureId is specified; if provided without structureId only tieFormat on drawDefinition will be modified\n  uuids, // optional - array of UUIDs to use for newly created matchUps\n});\n")),(0,i.yg)("hr",null),(0,i.yg)("h2",{id:"addcollectiongroup"},"addCollectionGroup"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"engine.addCollectionGroup({\n  collectionIds: result.modifiedCollectionIds,\n  tieFormatName: 'Swelled',\n  groupDefinition,\n  structureId, // optional - if provided only tieFormat on structure will be modified\n  matchUpId, // optional - if provided only tieFormat on matchUp will be modified\n  eventId, // optional - if provided only tieFormat on event will be modified\n  drawId, // required if structureId is specified; if provided without structureId only tieFormat on drawDefinition will be modified\n});\n")),(0,i.yg)("hr",null),(0,i.yg)("h2",{id:"comparetieformats"},"compareTieFormats"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"engine.compareTieFormats({\n  considerations, // optional { collectionName?: boolean; collectionOrder?: boolean };\n  ancestor: tieFormat1,\n  descendant: tieFormat2,\n});\n")),(0,i.yg)("hr",null),(0,i.yg)("h2",{id:"modifycollectiondefinition"},"modifyCollectionDefinition"),(0,i.yg)("p",null,"Modifies the ",(0,i.yg)("inlineCode",{parentName:"p"},"collectionName")," and/or ",(0,i.yg)("inlineCode",{parentName:"p"},"matchUpFormat")," for targeted ",(0,i.yg)("inlineCode",{parentName:"p"},"collectionId")," within the ",(0,i.yg)("inlineCode",{parentName:"p"},"tieFormat")," specified by ",(0,i.yg)("inlineCode",{parentName:"p"},"eventId"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"drawId"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"structureId")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"matchUpId"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"engine.modifyCollectionDefinition({\n  collectionName, // optional\n  matchUpFormat, // optional\n  collectionId, // required\n  structureId, // required if modifying tieFormat for a structure\n  matchUpId, // required if modifying tieFormat for a matchUp\n  eventId, // required if modifying tieFormat for a event\n  drawId, // required if modifying tieFormat for a drawDefinition or a structure\n  gender, // optional\n\n  // value assignment, only one is allowed to have a value\n  collectionValueProfiles, // optional - [{ collectionPosition: 1, value: 2 }] - there must be a value provided for all matchUp positions\n  collectionValue, // optional - value awarded for winning more than half of the matchUps in the collection\n  matchUpValue, // optional - value awarded for each matchUp won\n  scoreValue, // optional - value awarded for each game or point won (points for tiebreak sets)\n  setValue, // optional - value awarded for each set won\n});\n")),(0,i.yg)("hr",null),(0,i.yg)("h2",{id:"modifytieformat"},"modifyTieFormat"),(0,i.yg)("p",null,"Both modifies the ",(0,i.yg)("inlineCode",{parentName:"p"},"tieFormat")," on the target ",(0,i.yg)("inlineCode",{parentName:"p"},"event"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"drawDefinition"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"structure")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"matchUp")," and adds/deletes ",(0,i.yg)("inlineCode",{parentName:"p"},"tieMatchUps")," as necessary."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"engine.modifyTieFormat({\n  considerations, // optional { collectionName?: boolean; collectionOrder?: boolean };\n  modifiedTieFormat, // will be compared to existing tieFormat that is targeted and differences calculated\n  tournamentId, // required\n  structureId, // required if modifying tieFormat for a structure\n  matchUpId, // required if modifying tieFormat for a matchUp\n  eventId, // required if modifying tieFormat for a event\n  drawId, // required if modifying tieFormat for a drawDefinition or a structure\n});\n")),(0,i.yg)("hr",null),(0,i.yg)("h2",{id:"ordercollectiondefinitions"},"orderCollectionDefinitions"),(0,i.yg)("p",null,"Modify the array order of ",(0,i.yg)("inlineCode",{parentName:"p"},"tieFormat.collectionDefinitions")," for an ",(0,i.yg)("inlineCode",{parentName:"p"},"event"),", a ",(0,i.yg)("inlineCode",{parentName:"p"},"drawDefinition"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"structure"),", or ",(0,i.yg)("inlineCode",{parentName:"p"},"matchUp"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"engine.orderCollectionDefinitions({\n  orderMap: { collectionId1: 1, collectionId2: 2 },\n  tournamentId, // required\n  structureId, // required if modifying tieFormat for a structure\n  matchUpId, // required if modifying tieFormat for a matchUp\n  eventId, // required if modifying tieFormat for a event\n  drawId, // required if modifying tieFormat for a drawDefinition or a structure\n});\n")),(0,i.yg)("hr",null),(0,i.yg)("h2",{id:"removecollectiondefinition"},"removeCollectionDefinition"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"engine.removeCollectionDefinition({\n  updateInProgressMatchUps, // optional; defaults to true\n  tieFormatComparison, // optional; defaults to false; when true will not delete unique collections on unscored matchUps\n  tieFormatName, // any time a collectionDefinition is modified a new name must be provided\n  tournamentId, // required\n  collectionId, // required - id of collectionDefinition to be removed\n  structureId, // optional - if removing from tieFormat associated with a specific structure\n  matchUpId, // optional - if removing from tieFormat asscoiated with a specific matchUp\n  eventId, // optional - if removing from tieFormat asscoiated with an event\n  drawId, // required if structureId is specified or if tieFormat associated with drawDefinition is to be modified\n});\n")),(0,i.yg)("hr",null),(0,i.yg)("h2",{id:"removecollectiongroup"},"removeCollectionGroup"),(0,i.yg)("p",null,"Removes a ",(0,i.yg)("inlineCode",{parentName:"p"},"collectionGroup")," from the ",(0,i.yg)("inlineCode",{parentName:"p"},"tieFormat")," found for the ",(0,i.yg)("inlineCode",{parentName:"p"},"event"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"drawDefinition"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"structure")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"matchUp"),"; recalculates"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"engine.removeCollectionGroup({\n  updateInProgressMatchUps, // optional - defaults to true\n  tieFormatName: 'New tieFormat', // if no name is provided then there will be no name\n  collectionGroupNumber: 1,\n  tournamentId, // required\n  structureId, // optional\n  matchUpId, // optional\n  eventId, // optional\n  drawId, // optional; required if structureId is targeted\n});\n")),(0,i.yg)("hr",null),(0,i.yg)("h2",{id:"validatecollectiondefinition"},"validateCollectionDefinition"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"const { valid } = engine.validateCollectionDefinition({\n  collectionDefinition, // required\n  checkCollectionIds, // optional boolean - check that collectionIds are present\n  referenceCategory, // optional - category for comparision if eventId is not provided\n  referenceGender, // optional - expected gender if eventId is not provided\n  checkCategory, // optional boolean - defaults to true\n  checkGender, // optional boolean - defaults to true\n  eventId, // required only for checking gender\n});\n")),(0,i.yg)("hr",null))}u.isMDXComponent=!0}}]);