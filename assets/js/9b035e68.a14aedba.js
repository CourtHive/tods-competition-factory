"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9641],{7942:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(959);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=i,g=p["".concat(l,".").concat(m)]||p[m]||c[m]||r;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4448:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=n(8957),i=(n(959),n(7942));const r={title:"Draws Governor"},o=void 0,s={unversionedId:"governors/draws-governor",id:"governors/draws-governor",title:"Draws Governor",description:"addAdHocMatchUps",source:"@site/docs/governors/draws-governor.md",sourceDirName:"governors",slug:"/governors/draws-governor",permalink:"/tods-competition-factory/docs/governors/draws-governor",draft:!1,tags:[],version:"current",frontMatter:{title:"Draws Governor"},sidebar:"docs",previous:{title:"Competition Governor",permalink:"/tods-competition-factory/docs/governors/competition-governor"},next:{title:"Entries Governor",permalink:"/tods-competition-factory/docs/governors/entries-governor"}},l={},d=[{value:"addAdHocMatchUps",id:"addadhocmatchups",level:2},{value:"addPlayoffStructures",id:"addplayoffstructures",level:2},{value:"addQualifyingStructure",id:"addqualifyingstructure",level:2},{value:"addVoluntaryConsolationStage",id:"addvoluntaryconsolationstage",level:2},{value:"addVoluntaryConsolationStructure",id:"addvoluntaryconsolationstructure",level:2},{value:"alternateDrawPositionAssignment",id:"alternatedrawpositionassignment",level:2},{value:"assignDrawPosition",id:"assigndrawposition",level:2},{value:"assignDrawPositionBye",id:"assigndrawpositionbye",level:2},{value:"attachPlayoffStructures",id:"attachplayoffstructures",level:2},{value:"attachQualifyingStructure",id:"attachqualifyingstructure",level:2},{value:"attachStructures",id:"attachstructures",level:2},{value:"automatedPlayoffPositioning",id:"automatedplayoffpositioning",level:2},{value:"automatedPositioning",id:"automatedpositioning",level:2},{value:"autoSeeding",id:"autoseeding",level:2},{value:"deleteAdHocMatchUps",id:"deleteadhocmatchups",level:2},{value:"luckyLoserDrawPositionAssignment",id:"luckyloserdrawpositionassignment",level:2},{value:"modifyDrawDefinition",id:"modifydrawdefinition",level:2},{value:"modifySeedAssignment",id:"modifyseedassignment",level:2},{value:"qualifierDrawPositionAssignment",id:"qualifierdrawpositionassignment",level:2},{value:"removeDrawDefinitionExtension",id:"removedrawdefinitionextension",level:2},{value:"removeDrawPositionAssignment",id:"removedrawpositionassignment",level:2},{value:"removeDrawEntries",id:"removedrawentries",level:2},{value:"removeRoundMatchUps",id:"removeroundmatchups",level:2},{value:"removeStructure",id:"removestructure",level:2},{value:"renameStructures",id:"renamestructures",level:2},{value:"resetDrawDefinition",id:"resetdrawdefinition",level:2},{value:"resetVoluntaryConsolationStructure",id:"resetvoluntaryconsolationstructure",level:2},{value:"setDrawParticipantRepresentativeIds",id:"setdrawparticipantrepresentativeids",level:2},{value:"setPositionAssignments",id:"setpositionassignments",level:2},{value:"setSubOrder",id:"setsuborder",level:2},{value:"shiftAdHocRounds",id:"shiftadhocrounds",level:2},{value:"swapAdHocRounds",id:"swapadhocrounds",level:2},{value:"swapDrawPositionAssignments",id:"swapdrawpositionassignments",level:2},{value:"updateTeamLineUp",id:"updateteamlineup",level:2},{value:"withdrawParticipantAtDrawPosition",id:"withdrawparticipantatdrawposition",level:2}],u={toc:d},p="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { drawsGovernor } from 'tods-competition-factory';\n")),(0,i.kt)("h2",{id:"addadhocmatchups"},"addAdHocMatchUps"),(0,i.kt)("p",null,"Adds ",(0,i.kt)("inlineCode",{parentName:"p"},"matchUps")," generated by ",(0,i.kt)("a",{parentName:"p",href:"/docs/governors/generation-governor/#generateadhocmatchups"},"generateAdHocMatchUps")," to specified structure within an AD_HOC ",(0,i.kt)("inlineCode",{parentName:"p"},"drawDefinition"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.addAdHocMatchUps({\n  structureId, // optional if there is only one structure in drawDefinition\n  matchUps,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addplayoffstructures"},"addPlayoffStructures"),(0,i.kt)("p",null,"Adds playoff structures to an existing drawDefinition."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.addPlayoffStructures({\n  drawId,\n  structureId,\n  roundNumbers: [3], // required if no playoffPositions - source roundNumbers which will feed target structures, e.g. [1, 2]\n  roundProfiles, // optional - source roundNumbers as Object.keys with depth as Object.values, e.g. [{ 1: 2}, {2: 1}]\n  playoffPositions: [3, 4], // required if not provided roundNumbers\n  playoffAttributes, // optional - mapping of either exitProfile or finishingPositionRange to structure names, e.g. 0-1-1 for South\n  exitProfileLimit, // limit playoff rounds generated by the attributes present in playoffAttributes\n  playoffStructureNameBase, // optional - base word for default playoff naming, e.g. 'Playoff'\n});\n\n// example use of playoffAttributes - will generated playoff structure from 2nd round with structureName: 'BRONZE'\nconst playoffAttributes = {\n  '0-2': { name: 'BRONZE', abbreviation: 'B' },\n};\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addqualifyingstructure"},"addQualifyingStructure"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.addQualifyingStructure({\n  targetStructureId, // required: structure for which participants will qualify\n  qualifyingPositions, // optional: specify the # of qualifyingPositions\n  qualifyingRoundNumber, // optional: determine qualifyingPositions by # of matchUps in specified round; does not apply to ROUND_ROBIN\n  structureOptions, // optional: specific to ROUND_ROBIN generation\n  structureName, // optional\n  drawSize,\n  drawType, // optional: defaults to SINGLE_ELIMINATION\n  drawId, // required: draw within which target structure appears\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addvoluntaryconsolationstage"},"addVoluntaryConsolationStage"),(0,i.kt)("p",null,"Modifies the entryProfile for a draw to allow ",(0,i.kt)("inlineCode",{parentName:"p"},"{ entryStage: VOLUNTARY_CONSOLATION }")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.addVoluntaryConsolationStage({\n  drawSize,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"addvoluntaryconsolationstructure"},"addVoluntaryConsolationStructure"),(0,i.kt)("p",null,"Generates a new structure within a ",(0,i.kt)("inlineCode",{parentName:"p"},"drawDefinition")," if any draw entries are present for ",(0,i.kt)("inlineCode",{parentName:"p"},"{ entryStage: VOLUNTARY_CONSOLATION }"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.addVoluntaryConsolationStructure({\n  structureAbbreviation, // optional\n  structureName, // optional - defaults to 'VOLUNTARY_CONSOLATION'\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"alternatedrawpositionassignment"},"alternateDrawPositionAssignment"),(0,i.kt)("p",null,"Replaces an existing drawPosition assignment with an alternateParticipantId. This method is included in ",(0,i.kt)("inlineCode",{parentName:"p"},"validActions")," for ",(0,i.kt)("a",{parentName:"p",href:"../policies/positionActions"},"positionActions")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.alternateDrawPositionAssignment({\n  alternateParticipantId,\n  drawPosition,\n  structureId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"assigndrawposition"},"assignDrawPosition"),(0,i.kt)("p",null,"Low level function normally called by higher order convenience functions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.assignDrawPosition({\n  participantId, // optional - if assigning position to a participant\n  drawPosition,\n  structureId,\n  qualifier, // optional boolean, if assigning a space for a qualifier\n  drawId,\n  bye, // optional boolean, if assigning a bye\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"assigndrawpositionbye"},"assignDrawPositionBye"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.assignDrawPositionBye({\n  structureId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"attachplayoffstructures"},"attachPlayoffStructures"),(0,i.kt)("p",null,"Attaches the results of ",(0,i.kt)("inlineCode",{parentName:"p"},"generateAndPopulatePlayoffStructures")," to a ",(0,i.kt)("inlineCode",{parentName:"p"},"drawDefinition"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"engine.addPlayoffStructures()")," calls both ",(0,i.kt)("inlineCode",{parentName:"p"},"generateAndPopulatePlayoffStructures")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"attachPlayoffStructures"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.attachPlayoffStructures({\n  matchUpModifications, // optional - pass any modifications external to the structure that are relevant to structure generation\n  structures,\n  drawId,\n  links,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"attachqualifyingstructure"},"attachQualifyingStructure"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.attachQualifyingStructure({\n  structure, // required: structure object; see `generateQualifyingStructure`\n  drawId, // required: id of drawDedfinition to which structure will be attached\n  link, // required\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"attachstructures"},"attachStructures"),(0,i.kt)("p",null,"Use to attach structures and links which are generated by ",(0,i.kt)("inlineCode",{parentName:"p"},"generateVoluntaryConsolation"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.attachStructures({\n  matchUpModifications, // optional - pass any modifications external to the structure that are relevant to structure generation\n  structures,\n  drawId,\n  links,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"automatedplayoffpositioning"},"automatedPlayoffPositioning"),(0,i.kt)("p",null,"For Round Robin structures, uses Round Robin Tallies to position participants in playoff structure(s)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.automatedPlayoffPositioning({\n  structureId: mainStructure.structureId,\n  provisionalPositioning, // optional boolean, defaults to false; when true will honor provisionalOrder if no groupOrder is found in tallyResults\n  applyPositioning, // optional boolean, defaults to true; when false will return positioning but not apply it to playoff structures\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"automatedpositioning"},"automatedPositioning"),(0,i.kt)("p",null,"Positions participants in a draw structure."),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"../concepts/policies"},"Policies"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.automatedPositioning({ drawId, structureId });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"autoseeding"},"autoSeeding"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Only generates seeding. To apply ",(0,i.kt)("inlineCode",{parentName:"p"},"engine.setParticipantScaleItems({ scaleItemsWithParticipantIds }"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { scaleItemsWithParticipantIds } = engine.autoSeeding({\n  policyDefinitions, // seeding policyDefinition determines the # of seeds for given participantsCount/drawSize\n  scaleAttributes, // { scaleType, scaleName, eventType, accessor }\n  scaleName, // Optional - defaults to scaleAttributes.scaleName\n  drawSize, // Optional - defaults to calculation based on # of entries\n  eventId, // required - necessary for resolving entries\n  drawId, // Optional - will use flight.drawEntries or drawDefinition.entries rather than event.entries\n  stage, // Optional - filters entries by specified stage\n\n  scaleSortMethod, // Optional - user defined sorting method\n  sortDescending, // Optional - defaults to false\n});\n\nengine.setParticipantScaleItems({\n  scaleItemsWithParticipantIds,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"deleteadhocmatchups"},"deleteAdHocMatchUps"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const result = engine.deleteAdHocMatchUps({\n  structureId, // optional optimization - structureId of structure from which matchUps are being deleted\n  matchUpIds, // array of matchUpIds identifying matchUps to be deleted\n  drawId, // required - drawId of drawDefinition in which target structure is found\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"luckyloserdrawpositionassignment"},"luckyLoserDrawPositionAssignment"),(0,i.kt)("p",null,"Replaces an existing drawPosition assignment with a luckyLoserParticipantId. This method is included in ",(0,i.kt)("inlineCode",{parentName:"p"},"validActions")," for ",(0,i.kt)("a",{parentName:"p",href:"../policies/positionActions"},"positionActions")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.luckyLoserDrawPositionAssignment({\n  luckyLoserParticipantId,\n  drawPosition,\n  structureId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"modifydrawdefinition"},"modifyDrawDefinition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.modifyDrawDefinition({\n  drawUpdates: { policyDefinitions: { ...policies } },\n  drawName: 'League Play',\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"modifyseedassignment"},"modifySeedAssignment"),(0,i.kt)("p",null,"Change the display representation of a seedNumber for a specified ",(0,i.kt)("inlineCode",{parentName:"p"},"participantId"),". This method is included in ",(0,i.kt)("inlineCode",{parentName:"p"},"validActions")," for ",(0,i.kt)("a",{parentName:"p",href:"../policies/positionActions"},"positionActions"),"."),(0,i.kt)("p",null,"The rationale for ",(0,i.kt)("inlineCode",{parentName:"p"},"seedValue")," is to be able to, for instance, represent the fifth through the eighth seed as ",(0,i.kt)("inlineCode",{parentName:"p"},"5-8"),", or simply as ",(0,i.kt)("inlineCode",{parentName:"p"},"5"),". When there are no restrictions on seed positioning ",(0,i.kt)("inlineCode",{parentName:"p"},"seedValue")," allows assigning seeding to arbitrary ",(0,i.kt)("inlineCode",{parentName:"p"},"participants"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.modifySeedAssignment({\n  participantId,\n  structureId,\n  seedValue, // display representation such as '5-8'\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"qualifierdrawpositionassignment"},"qualifierDrawPositionAssignment"),(0,i.kt)("p",null,"Replaces an existing drawPosition assignment with a qualifierParticipantId. This method is included in ",(0,i.kt)("inlineCode",{parentName:"p"},"validActions")," for ",(0,i.kt)("a",{parentName:"p",href:"../policies/positionActions"},"positionActions")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.qualifierDrawPositionAssignment({\n  qualifierParticipantId,\n  drawPosition,\n  structureId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removedrawdefinitionextension"},"removeDrawDefinitionExtension"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.removeDrawDefintionExtension({ eventId, drawId, name });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removedrawpositionassignment"},"removeDrawPositionAssignment"),(0,i.kt)("p",null,"Clear draw position and optionally replace with a BYE, change entryStatus, or decompose a PAIR participant into UNGROUPED participants (DOUBLES only)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.removeDrawPositionAssignment({\n  drawDefinition,\n  structureId,\n  drawPosition,\n  replaceWithBye, // optional\n  entryStatus, // optional - change the entryStatus of the removed participant\n  destroyPair, // optional - decompose PAIR participant into UNGROUPED participants\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removedrawentries"},"removeDrawEntries"),(0,i.kt)("p",null,"Removes participantIds from ",(0,i.kt)("inlineCode",{parentName:"p"},"drawDefinition.entries")," (if generated) as well as any relevent ",(0,i.kt)("inlineCode",{parentName:"p"},"flightProfile.flights"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.removeDrawEntries({\n  autoEntryPositions, // optional - keeps entries ordered by entryStage/entryStatus and auto-increments\n  participantIds\n  eventId,\n  stages, // optional array of stages to consider, e.g. [VOLUNTARY_CONSOLATION]\n  drawId,\n  });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removeroundmatchups"},"removeRoundMatchUps"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  deltedMatchUpsCount, // number\n  roundRemoved, // boolean\n  success, // boolean\n  error, // if any\n} = engine.removeRoundMatchUps({\n  removeCompletedMatchUps, // optional boolean - whether to remove completed matchUps\n  roundNumber, // required - roundNumber to remove\n  structureId, // required\n  drawId, // required\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"removestructure"},"removeStructure"),(0,i.kt)("p",null,"Removes targeted ",(0,i.kt)("inlineCode",{parentName:"p"},"drawDefinition.structure")," and all other child ",(0,i.kt)("inlineCode",{parentName:"p"},"structures")," along with all associated ",(0,i.kt)("inlineCode",{parentName:"p"},"drawDefinition.links"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { removedMatchUpIds } = engine.removeStructure({\n  structureId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"renamestructures"},"renameStructures"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.renameStructures({\n  structureDetails: [{ structureId, structureName }],\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"resetdrawdefinition"},"resetDrawDefinition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.resetDrawDefinition({ drawId });\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"resetvoluntaryconsolationstructure"},"resetVoluntaryConsolationStructure"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.resetVoluntaryConsolationStructure({\n  resetEntries, // optional - remove all { entryStage: VOLUNTARY_CONSOLATION }\n  drawId,\n});\n")),(0,i.kt)("p",null,"--"),(0,i.kt)("h2",{id:"setdrawparticipantrepresentativeids"},"setDrawParticipantRepresentativeIds"),(0,i.kt)("p",null,"Set the participantIds of participants in the draw who are representing players by observing the creation of the draw."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.setDrawParticipantRepresentativeIds({\n  representativeParticipantIds,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"setpositionassignments"},"setPositionAssignments"),(0,i.kt)("p",null,"Intended to be used in conjunction with ",(0,i.kt)("inlineCode",{parentName:"p"},"automatedPlayoffPositioning")," in deployments where a client instance gets the positioning which is then set on both the client and the server, to ensure that both client and server are identical. If ",(0,i.kt)("inlineCode",{parentName:"p"},"automatedPlayoffPositioning")," is invoked on both client and server independently then it is likely that the positioning on client and server will be different."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// executed only on the client\nconst { structurePositionAssignments } = engine.automatedPlayoffPositioning({\n  applyPositioning: false, // instructs factory engine to only return values, not apply them\n  structureId,\n  drawId,\n});\n\n// executed on both client and server\nresult = engine.setPositionAssignments({\n  structurePositionAssignments,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"setsuborder"},"setSubOrder"),(0,i.kt)("p",null,"Used to order ROUND_ROBIN participants when finishingPosition ties cannot be broken algorithmically. Assigns a ",(0,i.kt)("inlineCode",{parentName:"p"},"subOrder")," value to a participant within a ",(0,i.kt)("inlineCode",{parentName:"p"},"structure")," by ",(0,i.kt)("inlineCode",{parentName:"p"},"drawPosition"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.setSubOrder({\n  drawPosition: 1,\n  subOrder: 2,\n  structureId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"shiftadhocrounds"},"shiftAdHocRounds"),(0,i.kt)("p",null,"Move ",(0,i.kt)("inlineCode",{parentName:"p"},"roundNumber")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"targetRoundNumber"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.shiftAdHocRounds({\n  targetRoundNumber,\n  roundNumber,\n  structureId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"swapadhocrounds"},"swapAdHocRounds"),(0,i.kt)("p",null,"Swap ",(0,i.kt)("inlineCode",{parentName:"p"},"roundNumbers"),". Must provide an array of two valid ",(0,i.kt)("inlineCode",{parentName:"p"},"roundNumbers"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"tournamentEngine.swapAdHocRounds({\n  roundNumbers: [2, 4],\n  structureId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"swapdrawpositionassignments"},"swapDrawPositionAssignments"),(0,i.kt)("p",null,"Swaps the ",(0,i.kt)("inlineCode",{parentName:"p"},"participantIds")," of two ",(0,i.kt)("inlineCode",{parentName:"p"},"drawPositions"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.swapDrawPositionAssignments({\n  drawPositions,\n  structureId,\n  drawId,\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"updateteamlineup"},"updateTeamLineUp"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/governors/participant-governor#validateteamlineup"},"validateLineUp")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.updateTeamLineUp({\n  participantId, // id of the team for which lineUp is being updated\n  tieFormat, // valid tieFormat - used to validate collectionIds\n  lineUp, // valid lineUp array\n  drawId, // required as latest lineUp modification is stored in an extension on drawDefinition\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"withdrawparticipantatdrawposition"},"withdrawParticipantAtDrawPosition"),(0,i.kt)("p",null,"Thin wrapper around ",(0,i.kt)("a",{parentName:"p",href:"#removedrawpositionassignment"},"removeDrawPositionAssignment"),". This method is included in ",(0,i.kt)("inlineCode",{parentName:"p"},"validActions")," for ",(0,i.kt)("a",{parentName:"p",href:"../policies/positionActions"},"positionActions"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"engine.withdrawParticipantAtDrawPosition({\n  entryStatus = WITHDRAWN,\n  replaceWithBye, // optional\n  drawDefinition,\n  drawPosition,\n  structureId,\n  destroyPair, // optional - decompose PAIR participant into UNPAIRED participants\n});\n")),(0,i.kt)("hr",null))}c.isMDXComponent=!0}}]);