"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5947],{7942:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>v});var r=t(959);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=r.createContext({}),s=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(d.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(t),c=o,v=m["".concat(d,".").concat(c)]||m[c]||p[c]||a;return t?r.createElement(v,i(i({ref:n},u),{},{components:t})):r.createElement(v,i({ref:n},u))}));function v(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=c;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5700:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(8957),o=(t(959),t(7942));const a={title:"Tournament Governor"},i=void 0,l={unversionedId:"governors/tournament-governor",id:"governors/tournament-governor",title:"Tournament Governor",description:"addDrawDefinitionExtension",source:"@site/docs/governors/tournament-governor.md",sourceDirName:"governors",slug:"/governors/tournament-governor",permalink:"/tods-competition-factory/docs/governors/tournament-governor",draft:!1,tags:[],version:"current",frontMatter:{title:"Tournament Governor"},sidebar:"docs",previous:{title:"Score Governor",permalink:"/tods-competition-factory/docs/governors/score-governor"},next:{title:"Venue Governor",permalink:"/tods-competition-factory/docs/governors/venue-governor"}},d={},s=[{value:"addDrawDefinitionExtension",id:"adddrawdefinitionextension",level:2},{value:"addEventExtension",id:"addeventextension",level:2},{value:"addTimeItem",id:"addtimeitem",level:2},{value:"addOnlineResource",id:"addonlineresource",level:2},{value:"addTournamentExtension",id:"addtournamentextension",level:2},{value:"newTournamentRecord",id:"newtournamentrecord",level:2},{value:"orderCollectionDefinitions",id:"ordercollectiondefinitions",level:2},{value:"removeOnlineResource",id:"removeonlineresource",level:2},{value:"removeTournamentExtension",id:"removetournamentextension",level:2},{value:"setTournamentCategories",id:"settournamentcategories",level:2},{value:"setTournamentDates",id:"settournamentdates",level:2},{value:"setTournamentName",id:"settournamentname",level:2},{value:"setTournamentNotes",id:"settournamentnotes",level:2},{value:"setTournamentStatus",id:"settournamentstatus",level:2}],u={toc:s},m="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { tournamentGovernor } from 'tods-competition-factory';\n")),(0,o.kt)("h2",{id:"adddrawdefinitionextension"},"addDrawDefinitionExtension"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"engine.addDrawDefinitionExtension({\n  extension: {\n    name: 'extension name',\n    value: {},\n  },\n  drawId,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addeventextension"},"addEventExtension"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"engine.addEventExtension({\n  extension: {\n    name: 'extension name',\n    value: {},\n  },\n  eventId,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addtimeitem"},"addTimeItem"),(0,o.kt)("p",null,"When calling via an engine, ",(0,o.kt)("inlineCode",{parentName:"p"},"participant")," will be resolved from ",(0,o.kt)("inlineCode",{parentName:"p"},"participantId"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"drawDefinition"),"will be resovled from",(0,o.kt)("inlineCode",{parentName:"p"},"drawId"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"event"),"will be resolved from",(0,o.kt)("inlineCode",{parentName:"p"},"eventId"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"tournamentRecord")," will be present. Method will only attach ",(0,o.kt)("inlineCode",{parentName:"p"},"timeItem")," to one element."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"engine.addTimeItem({\n  removePriorValues, // boolean; prior values with equivalent `itemType` will be removed\n  duplicateValues, // boolean; allow duplicate values\n  participantId, // optional; resolves to participant\n  creationTime, // optional timestamp adds `createdAt` value\n  timeItem, // required; { itemType, itemValue, itemSubTypes, itemDate }\n  eventId, // optional; resolves to event\n  drawId, // optional; resolves to drawDefinition\n});\n")),(0,o.kt)("p",null,"When calling directly without an engine. Attaches to first element encountered in params: ",(0,o.kt)("inlineCode",{parentName:"p"},"element, drawDefinition, event, tournamentRecord"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"addTimeItem({\n  removePriorValues, // boolean; prior values with equivalent `itemType` will be removed\n  tournamentRecord, // optional\n  duplicateValues, // boolean; allow duplicate values\n  drawDefinition, // optional\n  creationTime, // optional\n  timeItem, // required; { itemType, itemValue, itemSubTypes, itemDate }\n  element, // optional if event, drawDefinition or tournamentRecord provided\n  event, // optional\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addonlineresource"},"addOnlineResource"),(0,o.kt)("p",null,"Attach an online resource to specified element. When no other ids are provided, will attach to ",(0,o.kt)("inlineCode",{parentName:"p"},"tournamentRecord"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"engine.addOnlineResource({\n  onlineResource, // required { identifier, resourceType, resourceSubType, ... }\n  organisationId, // optional\n  participantId, // optional\n  personId, // optional\n  courtId, // optional\n  venueId, // optional\n  eventId, // optional\n  drawId, // optional\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"addtournamentextension"},"addTournamentExtension"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"engine.addTournamentExtension({\n  extension: {\n    name: 'extension name',\n    value: {},\n  },\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"newtournamentrecord"},"newTournamentRecord"),(0,o.kt)("p",null,"Creates a new tournamentRecord in shared state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"engine.newTournamentRecord({\n  tournamentId, // optional - will be generated if not provided\n});\n\nconst { tournamentRecord } = engine.getTournament();\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"ordercollectiondefinitions"},"orderCollectionDefinitions"),(0,o.kt)("p",null,"Modify the array order of ",(0,o.kt)("inlineCode",{parentName:"p"},"tieFormat.collectionDefinitions")," for an ",(0,o.kt)("inlineCode",{parentName:"p"},"event"),", a ",(0,o.kt)("inlineCode",{parentName:"p"},"drawDefinition"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"structure"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"matchUp"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"engine.orderCollectionDefinitions({\n  orderMap: { collectionId1: 1, collectionId2: 2 },\n  structureId, // required if modifying tieFormat for a structure\n  matchUpId, // required if modifying tieFormat for a matchUp\n  eventId, // required if modifying tieFormat for a event\n  drawId, // required if modifying tieFormat for a drawDefinition or a structure\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"removeonlineresource"},"removeOnlineResource"),(0,o.kt)("p",null,"Remove an online resource from specified element. When no other ids are provided, will remove from ",(0,o.kt)("inlineCode",{parentName:"p"},"tournamentRecord"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"engine.removeOnlineResource({\n  onlineResource, // only requires { identifier, resourceType, resourceSubType }\n  organisationId, // optional\n  participantId, // optional\n  personId, // optional\n  courtId, // optional\n  venueId, // optional\n  eventId, // optional\n  drawId, // optional\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"removetournamentextension"},"removeTournamentExtension"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"engine.removeTournamentExtension({ name });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"settournamentcategories"},"setTournamentCategories"),(0,o.kt)("p",null,"Define categories to be used in ",(0,o.kt)("inlineCode",{parentName:"p"},"event")," creation for tournament record."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const categories = [\n  {\n    type: eventConstants.AGE,\n    categoryName: 'U18',\n  },\n  {\n    type: eventConstants.AGE,\n    categoryName: 'U16',\n  },\n  {\n    type: eventConstants.RATING,\n    categoryName: 'WTN',\n  },\n];\nengine.setTournamentCategories({ categories });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"settournamentdates"},"setTournamentDates"),(0,o.kt)("p",null,"Accepts an ISO String Date;"),(0,o.kt)("p",null,"Set tournament ",(0,o.kt)("inlineCode",{parentName:"p"},"startDate")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"endDate")," in one method call. Also cleans up ",(0,o.kt)("inlineCode",{parentName:"p"},"matchUp")," schedules that are invalid due to date changes, and updates court ",(0,o.kt)("inlineCode",{parentName:"p"},"dateAvailability"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"engine.setTournamentDates({ startDate, endDate });\n")),(0,o.kt)("h2",{id:"settournamentname"},"setTournamentName"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const tournamentName = 'CourtHive Challenge';\nengine.setTournamentName({\n  tournamentName,\n});\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"settournamentnotes"},"setTournamentNotes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"engine.setTournamentNotes({ notes });\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"settournamentstatus"},"setTournamentStatus"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"engine.setTournamentStatus({ status: CANCELLED });\n")),(0,o.kt)("hr",null))}p.isMDXComponent=!0}}]);