"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[672],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1770:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={title:"Features"},o=void 0,l={unversionedId:"features",id:"features",title:"Features",description:"Draw Generation",source:"@site/docs/features.mdx",sourceDirName:".",slug:"/features",permalink:"/tods-competition-factory/docs/features",draft:!1,tags:[],version:"current",frontMatter:{title:"Features"},sidebar:"docs",previous:{title:"State Engines",permalink:"/tods-competition-factory/docs/state-engines"},next:{title:"TMX Example",permalink:"/tods-competition-factory/docs/tmx"}},s={},c=[{value:"Draw Generation",id:"draw-generation",level:2},{value:"Mock Tournament Generation",id:"mock-tournament-generation",level:2},{value:"Scheduling",id:"scheduling",level:2},{value:"scheduleTimes",id:"scheduletimes",level:3},{value:"scheduleMatchUps",id:"schedulematchups",level:3},{value:"scheduleProfileRounds()",id:"scheduleprofilerounds",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"draw-generation"},"Draw Generation"),(0,r.kt)("p",null,"Draws are the centerpiece of any tournament. While TODS strives to be agnostic about the specific type of draw represented by a ",(0,r.kt)("inlineCode",{parentName:"p"},"drawDefinition"),",\n",(0,r.kt)("strong",{parentName:"p"},"Competition Factory")," includes a convenience method which exercises other methods to generate a wide range of recognized ",(0,r.kt)("a",{parentName:"p",href:"concepts/draw-generation"},"draw types"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function DrawDefinitionDemo(props) {\n  const { drawDefinition } = tournamentEngine.generateDrawDefinition({\n    drawName: 'Demo Draw',\n    drawType: 'COMPASS',\n    drawSize: 32,\n  });\n\n  return <Draw data={drawDefinition} />;\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("h3",{parentName:"admonition",id:"generating-multiple-flights"},"Generating Multiple Flights"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"generateFlightProfile()")," generates flighted draw details which can be fed into ",(0,r.kt)("inlineCode",{parentName:"p"},"generateDrawDefinition()"),".")),(0,r.kt)("h2",{id:"mock-tournament-generation"},"Mock Tournament Generation"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"mocksEngine")," can generate entire TODS tournament documents, including participants, events, and draws."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function MocksEngineDemo(props) {\n  const { tournamentRecord } = mocksEngine.generateTournamentRecord();\n\n  return <Tournament data={tournamentRecord} />;\n}\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"engines/mocks-engine-examples"},"Generating Tournaments")," for more examples of mock tournament generation,"),(0,r.kt)("admonition",{title:"Live Visualizations",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For a live example of the ",(0,r.kt)("inlineCode",{parentName:"p"},"mocksEngine")," in action, see the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://courthive.github.io/tods-react-draws/example"},"Example: tods-react-draws")))),(0,r.kt)("admonition",{title:"RESTful API Available",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"For free access to a public RESTful API, contact ",(0,r.kt)("a",{parentName:"p",href:"mailto:support@courthive.com"},"support@courthive.com"),".")),(0,r.kt)("h2",{id:"scheduling"},"Scheduling"),(0,r.kt)("p",null,"In addition to individual and bulk manual scheduling methods, the ",(0,r.kt)("strong",{parentName:"p"},"Competition Factory")," supports automated\n",(0,r.kt)("strong",{parentName:"p"},"Garman Scheduling")," and surfaces the Garman calculations at various levels of abstraction, all of which are\ndependent on a tournament record including ",(0,r.kt)("inlineCode",{parentName:"p"},"venues")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"courts")," with defined ",(0,r.kt)("inlineCode",{parentName:"p"},"dateAvailability"),", as well as an\nexpected ",(0,r.kt)("inlineCode",{parentName:"p"},"averageMatchUpMinutes"),". Scheduling methods are surfaced via the ",(0,r.kt)("inlineCode",{parentName:"p"},"competitionEngine")," to enable scheduling\nmultiple tournaments with shared ",(0,r.kt)("inlineCode",{parentName:"p"},"venues"),"."),(0,r.kt)("h3",{id:"scheduletimes"},"scheduleTimes"),(0,r.kt)("p",null,"At the lowest level there is ",(0,r.kt)("inlineCode",{parentName:"p"},"calculateScheduleTimes()"),", which returns an array of available schedule times for a\ngiven date (and optional time range). In the example below there are 3 courts with a startTime of ",(0,r.kt)("strong",{parentName:"p"},"08:00"),".\nIn the generated ",(0,r.kt)("strong",{parentName:"p"},"scheduleTimes")," you can see that the first three available times are ",(0,r.kt)("strong",{parentName:"p"},"08:00"),", and after that\nthe times are produced by the Garman formula."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function ScheduleTimesDemo(props) {\n  const venueProfiles = [\n    {\n      startTime: '08:00',\n      endTime: '20:00',\n      courtsCount: 3,\n    },\n  ];\n  const { tournamentRecord } = mocksEngine.generateTournamentRecord({\n    venueProfiles,\n  });\n  competitionEngine.setState(tournamentRecord);\n  const { startDate, endDate } = competitionEngine.getCompetitionDateRange();\n  const { scheduleTimes } = competitionEngine.calculateScheduleTimes({\n    scheduleDate: startDate,\n  });\n\n  return (\n    <RenderJSON\n      data={scheduleTimes}\n      root={'scheduleTimes'}\n      expandRoot={false}\n    />\n  );\n}\n")),(0,r.kt)("h3",{id:"schedulematchups"},"scheduleMatchUps"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"scheduleMatchUps()")," takes an ordered array of ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUpIds")," and target ",(0,r.kt)("inlineCode",{parentName:"p"},"venueIds")," and assigns a ",(0,r.kt)("inlineCode",{parentName:"p"},"scheduledTime")," to each ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUp"),"."),(0,r.kt)("h3",{id:"scheduleprofilerounds"},"scheduleProfileRounds()"),(0,r.kt)("p",null,"The ordering of ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUps")," is handled automatically by ",(0,r.kt)("inlineCode",{parentName:"p"},"scheduleProfileRounds()")," which uses a ",(0,r.kt)("inlineCode",{parentName:"p"},"schedulingProfile"),"\nto not only automatically determine the order of ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUps")," from specified ",(0,r.kt)("inlineCode",{parentName:"p"},"rounds"),", but also considers per-player\n(and per-format) daily matchUp limmits and scheduling policies which are attached to the tournament record(s).\nScheduling policies can define both ",(0,r.kt)("strong",{parentName:"p"},"average minutes")," and ",(0,r.kt)("strong",{parentName:"p"},"recovery mintes")," for each ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUpFormat"),", and policy\ndefaults can be overridden by event-level settings. For a full explanation see ",(0,r.kt)("a",{parentName:"p",href:"concepts/scheduling"},"Advanced Scheduling"),"."))}d.isMDXComponent=!0}}]);