(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{117:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var i=n(0),o=n.n(i);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},c=Object.keys(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),s=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},y=o.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,c=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),y=i,b=d["".concat(r,".").concat(y)]||d[y]||u[y]||c;return n?o.a.createElement(b,a(a({ref:t},p),{},{components:n})):o.a.createElement(b,a({ref:t},p))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var c=n.length,r=new Array(c);r[0]=y;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,r[1]=a;for(var p=2;p<c;p++)r[p]=n[p];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},98:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return a})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var i=n(3),o=n(7),c=(n(0),n(117)),r={title:"Introduction to Policies"},a={unversionedId:"concepts/policies",id:"concepts/policies",isDocsHomePage:!1,title:"Introduction to Policies",description:"Policies determine how the various Competition Factory engines function and can shape the way that results are returned. Policies can be attached to the tournamentRecord, events, or to drawDefinitions within an event. They can also be passed into some tournamentEngine and drawEngine methods.",source:"@site/docs/concepts/policies.md",slug:"/concepts/policies",permalink:"/tods-competition-factory/docs/concepts/policies",version:"current",sidebar:"docs",previous:{title:"Subscriptions",permalink:"/tods-competition-factory/docs/concepts/subscriptions"},next:{title:"Feed Policy",permalink:"/tods-competition-factory/docs/policies/feedPolicy"}},l=[{value:"Policy Types",id:"policy-types",children:[{value:"Avoidance Policy",id:"avoidance-policy",children:[]},{value:"Feed Policy",id:"feed-policy",children:[]},{value:"Position Actions Policy",id:"position-actions-policy",children:[]},{value:"Round Naming Policy",id:"round-naming-policy",children:[]},{value:"Participant Policy",id:"participant-policy",children:[]},{value:"Scheduling Policy",id:"scheduling-policy",children:[]},{value:"Scoring Policy",id:"scoring-policy",children:[]},{value:"Draws Policy",id:"draws-policy",children:[]}]}],p={toc:l};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(c.b)("wrapper",Object(i.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Policies determine how the various Competition Factory engines function and can shape the way that results are returned. Policies can be attached to the ",Object(c.b)("inlineCode",{parentName:"p"},"tournamentRecord"),", ",Object(c.b)("inlineCode",{parentName:"p"},"events"),", or to ",Object(c.b)("inlineCode",{parentName:"p"},"drawDefinitions")," within an ",Object(c.b)("inlineCode",{parentName:"p"},"event"),". They can also be passed into some ",Object(c.b)("inlineCode",{parentName:"p"},"tournamentEngine")," and ",Object(c.b)("inlineCode",{parentName:"p"},"drawEngine")," methods."),Object(c.b)("p",null,"The structure of an ",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},"policyDefinition"))," is as follows:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-json"},"{\n  [policyType]: {      // e.g. 'seeding' or 'avoidance'\n    policyName: 'name'  // for 'seeding' can be the provider of the policy, e.g. 'ITF' or 'USTA'\n    ...attributes       // attributes relevant to the policyType\n  },\n}\n")),Object(c.b)("h2",{id:"policy-types"},"Policy Types"),Object(c.b)("h3",{id:"avoidance-policy"},Object(c.b)("a",{parentName:"h3",href:"../policies/avoidance"},"Avoidance Policy")),Object(c.b)("p",null,"Can be attached to drawDefinitions to specify the attriubutes by which particpants should be separated"),Object(c.b)("h3",{id:"feed-policy"},Object(c.b)("a",{parentName:"h3",href:"../policies/feedPolicy"},"Feed Policy")),Object(c.b)("p",null,"Useful for determining the way in which consolation feed rounds direct players"),Object(c.b)("h3",{id:"position-actions-policy"},"Position Actions Policy"),Object(c.b)("h3",{id:"round-naming-policy"},"Round Naming Policy"),Object(c.b)("h3",{id:"participant-policy"},"Participant Policy"),Object(c.b)("h3",{id:"scheduling-policy"},"Scheduling Policy"),Object(c.b)("h3",{id:"scoring-policy"},"Scoring Policy"),Object(c.b)("h3",{id:"draws-policy"},"Draws Policy"))}s.isMDXComponent=!0}}]);