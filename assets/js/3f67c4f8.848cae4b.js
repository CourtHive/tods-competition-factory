"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8632],{3304:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=t(1527),o=t(7942);const i={title:"Score Governor"},s=void 0,a={id:"scoreGovernor",title:"Score Governor",description:"The scoreGovernor is a collection of scoring related utilities exported from the Competition Factory;",source:"@site/docs/scoreGovernor.mdx",sourceDirName:".",slug:"/scoreGovernor",permalink:"/tods-competition-factory/docs/scoreGovernor",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Score Governor"},sidebar:"docs",previous:{title:"scaleEngine API",permalink:"/tods-competition-factory/docs/apis/scale-engine-api"},next:{title:"Constants",permalink:"/tods-competition-factory/docs/constants"}},c={},l=[{value:"API",id:"api",level:2},{value:"analyzeSet",id:"analyzeset",level:3},{value:"checkSetIsComplete",id:"checksetiscomplete",level:3},{value:"generateScoreString",id:"generatescorestring",level:3},{value:"getSetComplement",id:"getsetcomplement",level:3},{value:"getTiebreakComplement",id:"gettiebreakcomplement",level:3},{value:"generateTieMatchUpScore",id:"generatetiematchupscore",level:3},{value:"isValidMatchUpFormat",id:"isvalidmatchupformat",level:3},{value:"keyValueScore",id:"keyvaluescore",level:3},{value:"participantResults",id:"participantresults",level:4},{value:"GEMscore",id:"gemscore",level:4},{value:"validateTieFormat",id:"validatetieformat",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,o.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"scoreGovernor"})," is a collection of scoring related utilities exported from the Competition Factory;\nthese utilities provide analysis/validation or generate values, but do not make any mutations."]}),"\n",(0,r.jsxs)(n.p,{children:["Lightweight independent/reusable components such as scoring dialogs can make use of the ",(0,r.jsx)(n.strong,{children:"scoreGovernor"})," without having to import any Competition Factory engines."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { scoreGovernor } from 'tods-competition-factory';\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(n.h3,{id:"analyzeset",children:"analyzeSet"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const {\n  expectTiebreakSet,\n  expectTimedSet,\n  hasTiebreakCondition,\n  isCompletedSet,\n  isDecidingSet,\n  isTiebreakSet,\n  isValidSet,\n  isValidSetNumber,\n  isValidSetOutcome,\n  setFormat,\n  sideGameScores,\n  sideGameScoresCount,\n  sidePointScores,\n  sidePointScoresCount,\n  sideTiebreakScores,\n  sideTiebreakScoresCount,\n  winningSide,\n} = scoreGovernor.analyzeSet({\n  matchUpScoringFormat,\n  setObject,\n});\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"checksetiscomplete",children:"checkSetIsComplete"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const hasWinningSide = scoreGovernor.checkSetIsComplete({\n  set: {\n    side1Score,\n    side2Score,\n    ignoreTiebreak,\n    matchUpFormat,\n    isDecidingSet,\n    isTiebreakSet,\n  },\n});\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"generatescorestring",children:"generateScoreString"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const sets = [\n  {\n    side1Score: 6,\n    side2Score: 7,\n    side1TiebreakScore: 3,\n    side2TiebreakScore: 7,\n    winningSide: 2,\n  },\n  {\n    side1Score: 7,\n    side2Score: 6,\n    side1TiebreakScore: 14,\n    side2TiebreakScore: 12,\n    winningSide: 1,\n  },\n  { side1Score: 3 },\n];\nlet result = scoreGovernor.generateScoreString({\n    sets, // TODS sets object\n    winningSide, // optional - 1 or 2\n    reversed, // optional - reverse the score\n    winnerFirst = true, // optional - boolean - tranform sets so that winningSide is first (on left)\n    matchUpStatus, // optional - used to annotate scoreString\n    addOutcomeString, // optional - tranform matchUpStatus into outcomeString appended to scoreString\n    autoComplete: true, // optional - complete missing set score\n  });\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"getsetcomplement",children:"getSetComplement"}),"\n",(0,r.jsxs)(n.p,{children:["Returns complementary sideScore given a ",(0,r.jsx)(n.code,{children:"lowValue"}),", ",(0,r.jsx)(n.code,{children:"tieBreakAt"})," and ",(0,r.jsx)(n.code,{children:"setTo"})," details."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const [side1Score, side2Score] = scoreGovernor.getSetComplement({\n  tiebreakAt,\n  lowValue,\n  isSide1,\n  setTo,\n});\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"gettiebreakcomplement",children:"getTiebreakComplement"}),"\n",(0,r.jsxs)(n.p,{children:["Returns complementary sideScore given a ",(0,r.jsx)(n.code,{children:"lowValue"}),", ",(0,r.jsx)(n.code,{children:"tieBreakNoAd"})," and ",(0,r.jsx)(n.code,{children:"tiebreakTo"})," details."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const [side1Score, side2Score] = scoreGovernor.getSetComplement({\n  tiebreakNoAd, // boolean whether tiebreak is "no advantage"\n  tiebreakTo,\n  lowValue,\n  isSide1,\n});\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"generatetiematchupscore",children:"generateTieMatchUpScore"}),"\n",(0,r.jsx)(n.p,{children:"Returns string representation of current tieMatchUp score."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const { scoreStringSide1, scoreStringSide2, set, winningSide } =\n  scoreGovernor.generateTieMatchUpScore({\n    matchUp, // must have { matchUpType: 'TEAM' }\n    separator, // optional - defaults to '-'\n  });\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"isvalidmatchupformat",children:"isValidMatchUpFormat"}),"\n",(0,r.jsx)(n.p,{children:"Returns boolean indicating whether matchUpFormat code is valid."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const valid = scoreGovernor.isValidMatchUpFormat(matchUpFormat);\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"keyvaluescore",children:"keyValueScore"}),"\n",(0,r.jsxs)(n.p,{children:["Utility for generating score strings based on key entry. Please see ",(0,r.jsx)(n.code,{children:"keyValueScore.test.js"})," in the source for more detail."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"participantresults",children:"participantResults"}),"\n",(0,r.jsxs)(n.p,{children:["An array of ",(0,r.jsx)(n.code,{children:"{ drawPosition, participantId, participantResult }"})," objects is returned for each group of processed matchUps."]}),"\n",(0,r.jsxs)(n.p,{children:["In the example given below 3 of 4 participants were tied with equivalent metrics and final ",(0,r.jsx)(n.code,{children:"rankOrder"})," was determined by ",(0,r.jsx)(n.strong,{children:"Head to Head"})," analysis.\nSee ",(0,r.jsx)(n.a,{href:"policies/tallyPolicy",children:"Round Robin Tally Policy"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"{\n  drawPosition: 4,\n  participantId: 'uniqueParticipantId1',\n  participantResult: {\n    allDefaults: 0,\n    defaults: 0,\n    retirements: 0,\n    walkovers: 0,\n    matchUpsWon: 3,\n    matchUpsLost: 1,\n    victories: [\n      'uniqueMatchUpId1',\n      'uniqueMatchUpId2',\n      'uniqueMatchUpId3',\n    ],\n    defeats: ['uniqueMatchUpId4'],\n    matchUpsCancelled: 0,\n    setsWon: 6,\n    setsLost: 2,\n    gamesWon: 36,\n    gamesLost: 12,\n    pointsWon: 0,\n    pointsLost: 0,\n    setsPct: 3,\n    matchUpsPct: 3,\n    gamesPct: 0.75,\n    pointsPct: 0,\n    result: '3/1',\n    games: '36/12',\n    rankOrder: 1,\n    GEMscore: 30003000075000000,\n    groupOrder: 1,\n  },\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"gemscore",children:"GEMscore"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"GEMscore"})," is a hash of key participant metrics and is used for sorting participants from multiple groups where ",(0,r.jsx)(n.strong,{children:"Head to Head"}),' does not apply.\nThis is used to determine "seedProxies" when ordered participants from each group progress to playoff strutures.']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const GEM =\n  matchUpsPct * Math.pow(10, 20) +\n  tieMatchUpsPct * Math.pow(10, 16) +\n  setsPct * Math.pow(10, 12) +\n  gamesPct * Math.pow(10, 8) +\n  pointsPct * Math.pow(10, 3);\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"validatetieformat",children:"validateTieFormat"}),"\n",(0,r.jsxs)(n.p,{children:["Provides validation for ",(0,r.jsx)(n.code,{children:"tieFormat"})," objects. See ",(0,r.jsx)(n.a,{href:"concepts/tieFormat",children:"tieFormats and lineUps"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const {\n  valid, // boolean whether valid or not\n  error,\n} = scoreGovernor.validateTieFormat({\n  checkCollectionIds, // ensure collectionId is present on all collections\n  enforceGender,\n  tieFormat,\n  gender,\n});\n"})}),"\n",(0,r.jsx)(n.hr,{})]})}function p(e={}){const{wrapper:n}={...(0,o.ah)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},7942:(e,n,t)=>{t.d(n,{ah:()=>l});var r=t(959);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),h=l(t),m=o,u=h["".concat(c,".").concat(m)]||h[m]||d[m]||i;return t?r.createElement(u,s(s({ref:n},p),{},{components:t})):r.createElement(u,s({ref:n},p))}));p.displayName="MDXCreateElement"}}]);