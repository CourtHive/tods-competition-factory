"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8888],{3805:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>d});var r=t(758);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function g(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=g(e,["components","mdxType","originalType","parentName"]),c=s(t),m=o,d=c["".concat(l,".").concat(m)]||c[m]||p[m]||a;return t?r.createElement(d,i(i({ref:n},u),{},{components:t})):r.createElement(d,i({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var g={};for(var l in n)hasOwnProperty.call(n,l)&&(g[l]=n[l]);g.originalType=e,g[c]="string"==typeof e?e:o,i[1]=g;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7600:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>g,toc:()=>s});var r=t(2232),o=(t(758),t(3805));const a={title:"Engine Logging"},i=void 0,g={unversionedId:"engines/engine-logging",id:"engines/engine-logging",title:"Engine Logging",description:"Competition Factory engines provide facilities for logging function performance, parameters, and results.",source:"@site/docs/engines/engine-logging.md",sourceDirName:"engines",slug:"/engines/engine-logging",permalink:"/tods-competition-factory/docs/engines/engine-logging",draft:!1,tags:[],version:"current",frontMatter:{title:"Engine Logging"},sidebar:"docs",previous:{title:"Engine Methods",permalink:"/tods-competition-factory/docs/engines/engine-methods"},next:{title:"Engine Middleware",permalink:"/tods-competition-factory/docs/engines/engine-middleware"}},l={},s=[{value:"Custom Logging",id:"custom-logging",level:2},{value:"Logging Configuration",id:"logging-configuration",level:2},{value:"Logged Details",id:"logged-details",level:2}],u={toc:s},c="wrapper";function p(e){let{components:n,...t}=e;return(0,o.yg)(c,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Competition Factory ",(0,o.yg)("strong",{parentName:"p"},"engines")," provide facilities for logging function performance, parameters, and results.\nLogging can be configured and enabled in ",(0,o.yg)("strong",{parentName:"p"},"globalState")," directly or by calling ",(0,o.yg)("inlineCode",{parentName:"p"},"engine.devContext(params)"),"."),(0,o.yg)("h2",{id:"custom-logging"},"Custom Logging"),(0,o.yg)("p",null,"By default factory engines will log to the console. It is possible to define a custom logging function:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"import { globalState: { setGlobalLog } } from 'tods-competition-factory'\n\nfunction customLoggingFunction({ log }) {\n  console.log('log:', log)\n}\n\nsetGlobalLog(customLoggingFunction)\n")),(0,o.yg)("h2",{id:"logging-configuration"},"Logging Configuration"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"import { globalState: { setDevContext } } from 'tods-competition-factory'\nsetDevContext({ perf: true, params: true, results: true, errors: true });\n\n// - or -\naskEngine.devContext({ perf: true, params: true, results: true, errors: true });\n\n")),(0,o.yg)("h2",{id:"logged-details"},"Logged Details"),(0,o.yg)("p",null,"The values passed into ",(0,o.yg)("inlineCode",{parentName:"p"},"devContext")," for the following attributes can be either boolean or an array of function names."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"errors"),": log method errors (e.g. invalid parameters)"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"results"),": log results returned by function(s)"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"params"),": log values passed into function(s)")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"askEngine.devContext({ errors: true }); // log all errors reported by all methods\naskEngine.devContext({ params: true }); // log param values for all functions\naskEngine.devContext({ results: true }); // log results for all functions\n\naskEngine.devContext({ params: ['getParticipants'], results: true }); // log paramaters and results only four the `getParticipants` function\n")),(0,o.yg)("p",null,"For ",(0,o.yg)("strong",{parentName:"p"},"perf")," the value can be either boolean or a milliseconds threshold."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"perf"),": log function execution time")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"askEngine.devContext({ perf: 200 }); // log function execution times greater than 200ms\n")))}p.isMDXComponent=!0}}]);