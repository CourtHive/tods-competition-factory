(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=a.a.createContext({}),l=function(e){var t=a.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},d=function(e){var t=l(e.components);return a.a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},s=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),d=l(n),s=r,u=d["".concat(i,".").concat(s)]||d[s]||m[s]||c;return n?a.a.createElement(u,b(b({ref:t},o),{},{components:n})):a.a.createElement(u,b({ref:t},o))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,i=new Array(c);i[0]=s;var b={};for(var p in t)hasOwnProperty.call(t,p)&&(b[p]=t[p]);b.originalType=e,b.mdxType="string"==typeof e?e:r,i[1]=b;for(var o=2;o<c;o++)i[o]=n[o];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return o}));var r=n(3),a=(n(0),n(101));const c={title:"Introduction"},i={unversionedId:"engines/draw-engine-introduction",id:"engines/draw-engine-introduction",isDocsHomePage:!1,title:"Introduction",description:"The drawEngine_** generates drawDefinitions and matchUp results, managing participant movement within and between structures. Participants, however, are not necessary for the operations performed by the drawEngine_**, and reference to participantIds only occurs in two places:",source:"@site/docs/engines/draw-engine-introduction.md",slug:"/engines/draw-engine-introduction",permalink:"/tods-competition-factory/docs/engines/draw-engine-introduction",version:"current",sidebar:"docs",previous:{title:"Tournament Engine API",permalink:"/tods-competition-factory/docs/apis/tournament-engine-api"},next:{title:"Draw Engine API",permalink:"/tods-competition-factory/docs/apis/draw-engine-api"}},b=[{value:"Participant &quot;agnostic&quot;",id:"participant-agnostic",children:[]},{value:"Changing matchUpStatus",id:"changing-matchupstatus",children:[]},{value:"matchUpStatus effects",id:"matchupstatus-effects",children:[]},{value:"Single structure effects",id:"single-structure-effects",children:[]},{value:"Multi-structure effects",id:"multi-structure-effects",children:[]}],p={toc:b};function o({components:e,...t}){return Object(a.b)("wrapper",Object(r.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"drawEngine"))," generates drawDefinitions and matchUp results, managing participant movement within and between structures. Participants, however, are not necessary for the operations performed by the ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"drawEngine")),", and reference to ",Object(a.b)("inlineCode",{parentName:"p"},"participantIds")," only occurs in two places:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("inlineCode",{parentName:"li"},"drawDefinition.entries")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("inlineCode",{parentName:"li"},"drawDefinition.structures[#].positionAssignments"))),Object(a.b)("h2",{id:"participant-agnostic"},'Participant "agnostic"'),Object(a.b)("p",null,"The ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"drawEngine")),' is "participant agnostic", and doesn\'t know or care whether the participants moving through the ',Object(a.b)("inlineCode",{parentName:"p"},"structures")," of a draw are ",Object(a.b)("inlineCode",{parentName:"p"},"participantType")," INDIVIDUAL, PAIR or TEAM."),Object(a.b)("p",null,"The logic governing participant movements between ",Object(a.b)("inlineCode",{parentName:"p"},"matchUps")," within ",Object(a.b)("inlineCode",{parentName:"p"},"structures")," requires only ",Object(a.b)("inlineCode",{parentName:"p"},"drawPositions"),"; ",Object(a.b)("inlineCode",{parentName:"p"},"positionAssignments")," are used when requesting ",Object(a.b)("inlineCode",{parentName:"p"},"matchUps"),' with "context" to add ',Object(a.b)("inlineCode",{parentName:"p"},"sides")," which include ",Object(a.b)("inlineCode",{parentName:"p"},"participants"),"."),Object(a.b)("h2",{id:"changing-matchupstatus"},"Changing matchUpStatus"),Object(a.b)("p",null,"Changing the ",Object(a.b)("inlineCode",{parentName:"p"},"matchUpStatus")," of a ",Object(a.b)("inlineCode",{parentName:"p"},"matchUp")," may affect other ",Object(a.b)("inlineCode",{parentName:"p"},"matchUps")," across the structures that make up a draw."),Object(a.b)("p",null,"Any attempt to change from a ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"directing"))," to a ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"non-directing"))," ",Object(a.b)("inlineCode",{parentName:"p"},"matchUpStatus"),", or vice-versa, causes the ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"drawEngine"))," to check the validity of the change and, if valid, to modify all affected ",Object(a.b)("inlineCode",{parentName:"p"},"matchUps"),"."),Object(a.b)("h2",{id:"matchupstatus-effects"},"matchUpStatus effects"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},Object(a.b)("inlineCode",{parentName:"th"},"matchUpStatus")),Object(a.b)("th",{parentName:"tr",align:"center"},"Completed"),Object(a.b)("th",{parentName:"tr",align:"center"},"Directing"),Object(a.b)("th",{parentName:"tr",align:"center"},"Active"),Object(a.b)("th",{parentName:"tr",align:"center"},"Upcoming"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"BYE"),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"})),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"RETIRED"),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"})),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"DEFAULTED"),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"})),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"COMPLETED"),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"})),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"WALKOVER"),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"})),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"DOUBLE_WALKOVER"),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"},"-"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"})),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"INCOMPLETE"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"})),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"IN_PROGRESS"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"})),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"SUSPENDED"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"},"x"),Object(a.b)("td",{parentName:"tr",align:"center"})),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"TO_BE_PLAYED"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"},"x")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"NOT_PLAYED"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"},"x")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"CANCELLED"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"})),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"ABANDONED"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"})),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"DEAD_RUBBER"),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"}),Object(a.b)("td",{parentName:"tr",align:"center"})))),Object(a.b)("h2",{id:"single-structure-effects"},"Single structure effects"),Object(a.b)("p",null,"If the effects of a change to a ",Object(a.b)("inlineCode",{parentName:"p"},"matchUpStatus")," are limited to a single structure, the only changes necessary are that ",Object(a.b)("inlineCode",{parentName:"p"},"drawPositions")," of relevant ",Object(a.b)("inlineCode",{parentName:"p"},"matchUps")," be modified to reflect participant movements across rounds."),Object(a.b)("h2",{id:"multi-structure-effects"},"Multi-structure effects"),Object(a.b)("p",null,"When there are multiple structures in a draw, such as COMPASS or DOUBLE ELIMINATION draws, then losers (and sometimes winners) can move across structures. For instance a first round loser in an EAST structure will move into the first round of the WEST structure. When this happens the ",Object(a.b)("inlineCode",{parentName:"p"},"positionAssignments")," for the target structure must be updated to map the ",Object(a.b)("inlineCode",{parentName:"p"},"participantId")," to the ",Object(a.b)("inlineCode",{parentName:"p"},"drawPosition")," where they have been assigned."))}o.isMDXComponent=!0}}]);