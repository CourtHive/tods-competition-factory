(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[797],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return d}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return t?a.createElement(f,i(i({ref:n},l),{},{components:t})):a.createElement(f,i({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1877:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var a=t(2122),o=t(9756),r=(t(7294),t(3905)),i=["components"],c={title:"JSON2CSV"},s={unversionedId:"utilities/json-to-csv",id:"utilities/json-to-csv",isDocsHomePage:!1,title:"JSON2CSV",description:"Converts an array of JSON objects into CSV.",source:"@site/docs/utilities/json-to-csv.mdx",sourceDirName:"utilities",slug:"/utilities/json-to-csv",permalink:"/tods-competition-factory/docs/utilities/json-to-csv",version:"current",frontMatter:{title:"JSON2CSV"},sidebar:"docs",previous:{title:"makeDeepCopy",permalink:"/tods-competition-factory/docs/utilities/make-deep-copy"}},p=[{value:"Example converting matchUps",id:"example-converting-matchups",children:[]}],l={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Converts an array of ",(0,r.kt)("strong",{parentName:"p"},"JSON")," objects into ",(0,r.kt)("strong",{parentName:"p"},"CSV"),".\nProvides custom mapping of column names and merging of column values (resolves to first found in priority order), as well as custom delimiter and column/row/key joiners.\nContext attributes can be added to all rows and column-specific value replacements may be defined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { utilities } from 'tods-competition-factory';\n\nconst config = {\n  includeTransformAccessors, // optional boolean - transform accessors are included with columnAccessors\n  columnAccessors, // optional - array of column accessors to include [ 'includeThis', 'andThis' ]\n  columnTransform, // optional - multiple generated column names can resolve to a single custom column, e.g. { 'newColumnName': ['oldColumn1', 'oldColumn2' ]}\n  columnMap, // optional - simple mapping from generated columnName to custom columnName, e.g. { 'columnName': 'newColumnName' }\n  valuesMap, // optional - map values for specified columns, e.g. { 'columnName': { 'value': 'mappedValue '}}\n  context, // optional - object defining values which should be added to all rows, e.g. { 'columnName': 'columnValue '}\n  delimiter, // optional - defaults to '\"'\n  columnJoiner, // optional - defines how CSV columns are joined; defaults to ','\n  rowJoiner, // optional - defines how CSV lines are joined; defaults to '\\r\\n'\n  keyJoiner, // optional - defines how flattened column names are constructed; defaults to '.'\n};\nconst arrayOfJSON = [{ a: 1 }, { b: 2 }];\nconst csv = utilities.JSON2CSV(arrayOfJSON, config);\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("inlineCode",{parentName:"p"},"columnTransform")," mapped array elements are sensitive to order and will resolve to the first matching value"),(0,r.kt)("p",{parentName:"div"},(0,r.kt)("inlineCode",{parentName:"p"},"columnMap")," should not contain new columnName(s) that are ",(0,r.kt)("inlineCode",{parentName:"p"},"columnTransform")," keys"))),(0,r.kt)("h2",{id:"example-converting-matchups"},"Example converting matchUps"),(0,r.kt)("p",null,"In the following example ",(0,r.kt)("strong",{parentName:"p"},"SINGLES")," and ",(0,r.kt)("strong",{parentName:"p"},"DOUBLES")," draws are generated and all ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUps")," are completed.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," object defines how ",(0,r.kt)("inlineCode",{parentName:"p"},"participants")," for each ",(0,r.kt)("inlineCode",{parentName:"p"},"side")," of each ",(0,r.kt)("inlineCode",{parentName:"p"},"matchUp")," is to be extracted,\nprioritizing the ",(0,r.kt)("inlineCode",{parentName:"p"},"accessor")," for extracting ",(0,r.kt)("inlineCode",{parentName:"p"},"{ participantType: PAIR }"),", and falling back on the ",(0,r.kt)("inlineCode",{parentName:"p"},"accessor")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"participantName"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function MocksEngineDemo(props) {\n  const drawProfiles = [\n    { drawSize: 8, eventType: 'DOUBLES', matchUpFormat: 'SET3-S:4/TB7-F:TB10' },\n    { drawSize: 8, drawType: 'ROUND_ROBIN' },\n  ];\n  const { tournamentRecord } = mocksEngine.generateTournamentRecord({\n    completeAllMatchUps: true,\n    drawProfiles,\n  });\n\n  const { matchUps } = tournamentEngine\n    .setState(tournamentRecord)\n    .allTournamentMatchUps();\n\n  const rowJoiner = '|';\n  const config = {\n    rowJoiner,\n    delimiter: '',\n    includeTransformAccessors: true,\n    columnAccessors: ['matchUpType', 'matchUpFormat', 'endDate', 'roundName'],\n    columnTransform: {\n      scoreString: ['score.scoreStringSide1'],\n      side1Participant1: [\n        'sides.0.participant.individualParticipants.0.participantName',\n        'sides.0.participant.participantName',\n      ],\n      side1Participant2: [\n        'sides.0.participant.individualParticipants.1.participantName',\n      ],\n      side2Participant1: [\n        'sides.1.participant.individualParticipants.0.participantName',\n        'sides.1.participant.participantName',\n      ],\n      side2Participant2: [\n        'sides.1.participant.individualParticipants.1.participantName',\n      ],\n    },\n  };\n\n  const csvMatchUps = utilities.JSON2CSV(matchUps, config);\n  return <RenderCSV data={csvMatchUps} rowJoiner={rowJoiner} />;\n}\n")))}m.isMDXComponent=!0}}]);