"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8199],{3084:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var i=t(1527),a=t(7942);const o={title:"competitionEngine API"},s=void 0,r={id:"apis/competition-engine-api",title:"competitionEngine API",description:"All _competitionEngine_ methods which make a mutation return either { success: true } or { error }",source:"@site/docs/apis/competition-engine-api.md",sourceDirName:"apis",slug:"/apis/competition-engine-api",permalink:"/tods-competition-factory/docs/apis/competition-engine-api",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"competitionEngine API"},sidebar:"docs",previous:{title:"Competition Engine",permalink:"/tods-competition-factory/docs/engines/competition-engine-overview"},next:{title:"Tournament Engine",permalink:"/tods-competition-factory/docs/engines/tournament-engine-overview"}},d={},c=[{value:"addCourts",id:"addcourts",level:2},{value:"addCollectionDefinition",id:"addcollectiondefinition",level:2},{value:"addCollectionGroup",id:"addcollectiongroup",level:2},{value:"addDrawDefinition",id:"adddrawdefinition",level:2},{value:"addExtension",id:"addextension",level:2},{value:"addMatchUpEndTime",id:"addmatchupendtime",level:2},{value:"addMatchUpOfficial",id:"addmatchupofficial",level:2},{value:"addMatchUpResumeTime",id:"addmatchupresumetime",level:2},{value:"addMatchUpScheduledDate",id:"addmatchupscheduleddate",level:2},{value:"addMatchUpScheduledTime",id:"addmatchupscheduledtime",level:2},{value:"addMatchUpScheduleItems",id:"addmatchupscheduleitems",level:2},{value:"addMatchUpStartTime",id:"addmatchupstarttime",level:2},{value:"addMatchUpStopTime",id:"addmatchupstoptime",level:2},{value:"addPenalty",id:"addpenalty",level:2},{value:"addPersonRequests",id:"addpersonrequests",level:2},{value:"addSchedulingProfileRound",id:"addschedulingprofileround",level:2},{value:"addVenue",id:"addvenue",level:2},{value:"allocateTeamMatchUpCourts",id:"allocateteammatchupcourts",level:2},{value:"allCompetitionMatchUps",id:"allcompetitionmatchups",level:2},{value:"addMatchUpCourtOrder",id:"addmatchupcourtorder",level:2},{value:"assignMatchUpCourt",id:"assignmatchupcourt",level:2},{value:"assignMatchUpVenue",id:"assignmatchupvenue",level:2},{value:"attachPolicies",id:"attachpolicies",level:2},{value:"bulkMatchUpStatusUpdate",id:"bulkmatchupstatusupdate",level:2},{value:"bulkRescheduleMatchUps",id:"bulkreschedulematchups",level:2},{value:"bulkScheduleMatchUps",id:"bulkschedulematchups",level:2},{value:"calculateScheduleTimes",id:"calculatescheduletimes",level:2},{value:"clearScheduledMatchUps",id:"clearscheduledmatchups",level:2},{value:"competitionMatchUps",id:"competitionmatchups",level:2},{value:"competitionScheduleMatchUps",id:"competitionschedulematchups",level:2},{value:"courtGridRows",id:"courtgridrows",level:2},{value:"deleteCourt",id:"deletecourt",level:2},{value:"deleteVenue",id:"deletevenue",level:2},{value:"devContext",id:"devcontext",level:2},{value:"disableCourts",id:"disablecourts",level:2},{value:"disableTiaAutoCalc",id:"disabletiaautocalc",level:2},{value:"disableVenues",id:"disablevenues",level:2},{value:"enableCourts",id:"enablecourts",level:2},{value:"enableTiaAutoCalc",id:"enabletiaautocalc",level:2},{value:"enableVenues",id:"enablevenues",level:2},{value:"executionQueue",id:"executionqueue",level:2},{value:"findExtension",id:"findextension",level:2},{value:"findParticipant",id:"findparticipant",level:2},{value:"getCompetitionDateRange",id:"getcompetitiondaterange",level:2},{value:"getCompetitionParticipants",id:"getcompetitionparticipants",level:2},{value:"Implemented participantFilters",id:"implemented-participantfilters",level:3},{value:"getCompetitionPenalties",id:"getcompetitionpenalties",level:2},{value:"getCompetitionVenues",id:"getcompetitionvenues",level:2},{value:"getEventMatchUpFormatTiming",id:"geteventmatchupformattiming",level:2},{value:"getLinkedTournamentIds",id:"getlinkedtournamentids",level:2},{value:"getMatchUpDailyLimits",id:"getmatchupdailylimits",level:2},{value:"getMatchUpDependencies",id:"getmatchupdependencies",level:2},{value:"getRounds",id:"getrounds",level:2},{value:"getParticipants",id:"getparticipants",level:2},{value:"participantFilters",id:"participantfilters",level:3},{value:"getParticipantScaleItem",id:"getparticipantscaleitem",level:2},{value:"getPersonRequests",id:"getpersonrequests",level:2},{value:"getState",id:"getstate",level:2},{value:"getSchedulingProfile",id:"getschedulingprofile",level:2},{value:"getSchedulingProfileIssues",id:"getschedulingprofileissues",level:2},{value:"generateBookings",id:"generatebookings",level:2},{value:"getVenuesAndCourts",id:"getvenuesandcourts",level:2},{value:"getVenuesReport",id:"getvenuesreport",level:2},{value:"linkTournaments",id:"linktournaments",level:2},{value:"matchUpActions",id:"matchupactions",level:2},{value:"matchUpScheduleChange",id:"matchupschedulechange",level:2},{value:"modifyCourt",id:"modifycourt",level:2},{value:"modifyCollectionDefinition",id:"modifycollectiondefinition",level:2},{value:"modifyEventMatchUpFormatTiming",id:"modifyeventmatchupformattiming",level:2},{value:"modifyMatchUpFormatTiming",id:"modifymatchupformattiming",level:2},{value:"modifyPersonRequests",id:"modifypersonrequests",level:2},{value:"modifyPenalty",id:"modifypenalty",level:2},{value:"modifyTieFormat",id:"modifytieformat",level:2},{value:"modifyVenue",id:"modifyvenue",level:2},{value:"orderCollectionDefinitions",id:"ordercollectiondefinitions",level:2},{value:"publishOrderOfPlay",id:"publishorderofplay",level:2},{value:"removeCollectionDefinition",id:"removecollectiondefinition",level:2},{value:"removeCollectionGroup",id:"removecollectiongroup",level:2},{value:"removeEventMatchUpFormatTiming",id:"removeeventmatchupformattiming",level:2},{value:"removeExtension",id:"removeextension",level:2},{value:"removeMatchUpCourtAssignment",id:"removematchupcourtassignment",level:2},{value:"removePersonRequests",id:"removepersonrequests",level:2},{value:"removePenalty",id:"removepenalty",level:2},{value:"removeTournamentRecord",id:"removetournamentrecord",level:2},{value:"removeUnlinkedTournamentRecords",id:"removeunlinkedtournamentrecords",level:2},{value:"reorderUpcomingMatchUps",id:"reorderupcomingmatchups",level:2},{value:"resetScorecard",id:"resetscorecard",level:2},{value:"resetTieFormat",id:"resettieformat",level:2},{value:"scheduleMatchUps",id:"schedulematchups",level:2},{value:"scheduleProfileRounds",id:"scheduleprofilerounds",level:2},{value:"setMatchUpDailyLimits",id:"setmatchupdailylimits",level:2},{value:"setMatchUpStatus",id:"setmatchupstatus",level:2},{value:"setState",id:"setstate",level:2},{value:"setSchedulingProfile",id:"setschedulingprofile",level:2},{value:"setTournamentRecord",id:"settournamentrecord",level:2},{value:"toggleParticipantCheckInState",id:"toggleparticipantcheckinstate",level:2},{value:"unlinkTournament",id:"unlinktournament",level:2},{value:"unlinkTournaments",id:"unlinktournaments",level:2},{value:"unPublishOrderOfPlay",id:"unpublishorderofplay",level:2},{value:"updateTieMatchUpScore",id:"updatetiematchupscore",level:2},{value:"validateSchedulingProfile",id:"validateschedulingprofile",level:2},{value:"version",id:"version",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.ah)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["All ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"competitionEngine"})})," methods which make a mutation return either ",(0,i.jsx)(n.code,{children:"{ success: true }"})," or ",(0,i.jsx)(n.code,{children:"{ error }"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addcourts",children:"addCourts"}),"\n",(0,i.jsxs)(n.p,{children:["Convenience function to bulk add courts to a Venue. Only adds ",(0,i.jsx)(n.strong,{children:"dateAvailability"})," and ",(0,i.jsx)(n.strong,{children:"courtName"}),". See ",(0,i.jsx)(n.a,{href:"/docs/concepts/scheduling",children:"Scheduling"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.addCourts({\n  venueAbbreviationRoot, // optional boolean; whether to use venue.venueAbbreviation in court naming\n  dateAvailability, // optional -- see definition in Tournament Engine API\n  courtsCount: 3, // optional, can be added/modified later\n  courtNameRoot, // optional; defaults to 'Court'\n  courtNames: ['Court 1', 'Court 2', 'Court 3'], // optional\n  venueId,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addcollectiondefinition",children:"addCollectionDefinition"}),"\n",(0,i.jsxs)(n.p,{children:["Adds a ",(0,i.jsx)(n.code,{children:"collectionDefinition"})," to the specified target, either ",(0,i.jsx)(n.code,{children:"matchUp"}),", ",(0,i.jsx)(n.code,{children:"structure"}),", ",(0,i.jsx)(n.code,{children:"drawDefinition"})," or ",(0,i.jsx)(n.code,{children:"event"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.addCollectionDefinition({\n  updateInProgressMatchUps, // defaults to true; in progress matchUps have matchUpStatus: IN_PROGRESS\n  collectionDefinition, // will be validated\n  tieFormatName, // if not provided, existing tieFormatName will be deleted\n  tournamentId, // required\n  structureId, // optional - if provided only tieFormat on structure will be modified\n  matchUpId, // optional - if provided only tieFormat on matchUp will be modified\n  eventId, // optional - if provided only tieFormat on event will be modified\n  drawId, // required if structureId is specified; if provided without structureId only tieFormat on drawDefinition will be modified\n  uuids, // optional - array of UUIDs to use for newly created matchUps\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addcollectiongroup",children:"addCollectionGroup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.addCollectionGroup({\n  collectionIds: result.modifiedCollectionIds,\n  tieFormatName: 'Swelled',\n  groupDefinition,\n  tournamentId, // required\n  structureId, // optional - if provided only tieFormat on structure will be modified\n  matchUpId, // optional - if provided only tieFormat on matchUp will be modified\n  eventId, // optional - if provided only tieFormat on event will be modified\n  drawId, // required if structureId is specified; if provided without structureId only tieFormat on drawDefinition will be modified\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"adddrawdefinition",children:"addDrawDefinition"}),"\n",(0,i.jsx)(n.p,{children:"Adds a drawDefinition to an event in a tournamentRecord."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"if (!error) {\n  const result = competitionEngine.addDrawDefinition({\n    allowReplacement, // optional - defaults to false\n    drawDefinition,\n    tournamentId,\n    eventId,\n    flight, // optional - pass flight definition object for integrity check\n  });\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addextension",children:"addExtension"}),"\n",(0,i.jsxs)(n.p,{children:["Adds an extension to all ",(0,i.jsx)(n.code,{children:"tournamentRecords"})," loaded into ",(0,i.jsx)(n.code,{children:"competitionEngine"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.addExtension({ extension });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addmatchupendtime",children:"addMatchUpEndTime"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const endTime = '2020-01-01T09:05:00Z';\ncompetitionEngine.addMatchUpEndTime({\n  validateTimeSeries, // optional - true by default - when false does not verify endTime is later than startTime\n  disableNotice, // when disabled subscribers will not be notified\n  tournamentId,\n  matchUpId,\n  endTime,\n  drawId,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addmatchupofficial",children:"addMatchUpOfficial"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.addMatchUpOfficial({\n  drawId,\n  matchUpId,\n  tournamentId,\n  participantId,\n  officialType,\n  disableNotice, // when disabled subscribers will not be notified\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addmatchupresumetime",children:"addMatchUpResumeTime"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const resumeTime = '2020-01-01T09:00:00Z';\ncompetitionEngine.addMatchUpResumeTime({\n  drawId,\n  matchUpId,\n  resumeTime,\n  tournamentId,\n  disableNotice, // when disabled subscribers will not be notified\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addmatchupscheduleddate",children:"addMatchUpScheduledDate"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const scheduledDate = '2020-01-01';\ncompetitionEngine.addMatchUpScheduledDate({\n  drawId,\n  matchUpId,\n  tournamentId,\n  scheduledDate,\n  disableNotice, // when disabled subscribers will not be notified\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addmatchupscheduledtime",children:"addMatchUpScheduledTime"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const scheduledTime = '08:00';\ncompetitionEngine.addMatchUpScheduledTime({\n  drawId,\n  matchUpId,\n  tournamentId,\n  scheduledTime,\n  disableNotice, // when disabled subscribers will not be notified\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addmatchupscheduleitems",children:"addMatchUpScheduleItems"}),"\n",(0,i.jsx)(n.p,{children:"Convenience function to add several schedule items at once."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.addMatchUpScheduleItems({\n  drawId,\n  matchUpId,\n  tournamentId,\n  schedule: {\n    courtIds, // applies only to TEAM matchUps\n    courtId, // requires scheduledDate\n    venueId,\n    scheduledTime,\n    scheduledDate,\n    startTime,\n    endTime,\n  },\n  disableNotice, // when disabled subscribers will not be notified\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addmatchupstarttime",children:"addMatchUpStartTime"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const startTime = '2020-01-01T08:05:00Z';\ncompetitionEngine.addMatchUpStartTime({\n  drawId,\n  matchUpId,\n  startTime,\n  tournamentId,\n  disableNotice, // when disabled subscribers will not be notified\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addmatchupstoptime",children:"addMatchUpStopTime"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const stopTime = '2020-01-01T08:15:00Z';\ncompetitionEngine.addMatchUpStopTime({\n  drawId,\n  matchUpId,\n  stopTime,\n  tournamentId,\n  disableNotice, // when disabled subscribers will not be notified\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addpenalty",children:"addPenalty"}),"\n",(0,i.jsx)(n.p,{children:"Add a penaltyItem to one or more participants."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const createdAt = new Date().toISOString();\nconst penaltyData = {\n  refereeParticipantId, // optional\n  participantIds: [participantId],\n  penaltyType: BALL_ABUSE,\n  penaltyCode: 'Organization specific code', // optional\n  matchUpId,\n  issuedAt, // optional ISO timeStamp for time issued to participant\n  createdAt,\n  notes: 'Hit ball into sea',\n};\nlet result = competitionEngine.addPenalty(penaltyData);\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addpersonrequests",children:"addPersonRequests"}),"\n",(0,i.jsx)(n.p,{children:"Validates and adds person requests."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const requests = [\n  {\n    date, // 'YYYY-MM-DD' date string\n    startTime, // '00:00' time string\n    endTime, // '00:00' time string\n    requestType: 'DO_NOT_SCHEDULE',\n  },\n];\ncompetitionEngine.addPersonRequests({ personId, requests });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addschedulingprofileround",children:"addSchedulingProfileRound"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.addSchedulingProfileRound({\n  scheduleDate, // string date, e.g. '2022-01-01' or '2022-01-01T00:00'\n  venueId, // id of the venue to which the round has been assigned\n  round, // details of a round to be played on specified date\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addvenue",children:"addVenue"}),"\n",(0,i.jsxs)(n.p,{children:["Adds ",(0,i.jsx)(n.strong,{children:"venueId"})," if not provided."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.addVenue({\n  venue: { venueName },\n  context, // optional - adds detail in CONTEXT extension\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"allocateteammatchupcourts",children:"allocateTeamMatchUpCourts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"let result = competitionEngine.allocateTeamMatchUpCourts({\n  removePriorValues, // optional boolean\n  matchUpId,\n  courtIds,\n  drawId,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"allcompetitionmatchups",children:"allCompetitionMatchUps"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { matchUps } = competitionEngine.allCompetitionMatchUps({\n  scheduleVisibilityFilters, // { visibilityThreshold: Date, eventIds, drawIds }\n  afterRecoveryTimes, // optional boolean; include participant recovery times for each matchUp\n  matchUpFilters, // optional; [ scheduledDate, scheduledDates: [], courtIds: [], stages: [], roundNumbers: [], matchUpStatuses: [], matchUpFormats: []]\n  nextMatchUps, // include winnerTo and loserTo matchUps\n  contextProfile, // optional: { inferGender: true, withCompetitiveness: true, withScaleValues: true, exclude: ['attribute', 'to', 'exclude']}\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"addmatchupcourtorder",children:"addMatchUpCourtOrder"}),"\n",(0,i.jsx)(n.p,{children:"When using Pro-scheduling, assign order on court"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.addMatchUpCourtOrder({\n  removePriorValues, // optional boolean\n  drawId, // drawId where matchUp is found\n  tournamentId,\n  courtOrder,\n  matchUpId,\n  courtId,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"assignmatchupcourt",children:"assignMatchUpCourt"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.assignMatchUpCourt({\n  removePriorValues, // optional boolean\n  drawId, // drawId where matchUp is found\n  courtDayDate, // ISO Date String or 'YYYY-MM-DD'\n  tournamentId,\n  matchUpId,\n  courtId,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"assignmatchupvenue",children:"assignMatchUpVenue"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.assignMatchUpVenue({\n  removePriorValues, // optional boolean\n  tournamentId,\n  matchUpId,\n  drawId, // drawId where matchUp is found\n  venueId,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"attachpolicies",children:"attachPolicies"}),"\n",(0,i.jsxs)(n.p,{children:["Attaches ",(0,i.jsx)(n.code,{children:"policyDefinitions"})," to all tournamentRecords currently loaded into ",(0,i.jsx)(n.code,{children:"competitionEngine"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.attachPolicies({ policyDefinitions });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"bulkmatchupstatusupdate",children:"bulkMatchUpStatusUpdate"}),"\n",(0,i.jsx)(n.p,{children:"Provides the ability to update the outcomes of multiple matchUps at once."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const outcomes = [\n  {\n    tournamentId,\n    eventId,\n    drawId,\n    matchUpId,\n    matchUpFormat,\n    matchUpStatus,\n    winningSide,\n    score,\n  },\n];\ncompetitionEngine.bulkMatchUpStatusUpdate({ outcomes });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"bulkreschedulematchups",children:"bulkRescheduleMatchUps"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const {\n  rescheduled, // array of inContext matchUps which have been rescheduled\n  notRescheduled, // array of inContext matchUps which have NOT been rescheduled\n  allRescheduled, // boolean indicating whether all matchUps have been rescheduled\n  dryRun, // boolean - only report what would happen without making modifications\n} = competitionEngine.bulkRescheduleMatchUps({\n  matchUpIds, // array of matchUupIds for matchUps which are to be rescheduled\n  scheduleChange: {\n    daysChange: 1, // number of days +/-\n    minutesChange: 30, // number of minutes +/-\n  },\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"bulkschedulematchups",children:"bulkScheduleMatchUps"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const schedule = {\n  scheduledTime: '08:00',\n  scheduledDate: '2021-01-01T00:00', // best practice to provide ISO date string\n  venueId,\n};\nconst matchUpDetails = [{ tournamentId, matchUpId, schedule }];\nconst matchUpContextIds = [{ tournamentId, matchUpId }];\ncompetitionEngine.bulkScheduleMatchUps({\n  matchUpDetails, // optional - for use when matchUps have different scheduling details\n  matchUpContextIds, // optiona - used together with matchUpIds when all matchUps will ahve the same schedule details applied\n  schedule, // optiona - used together with matchUpIds when all matchUps will ahve the same schedule details applied\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"calculatescheduletimes",children:"calculateScheduleTimes"}),"\n",(0,i.jsx)(n.p,{children:"Returns an array of available schedule times for a given date (and optional time range)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { scheduleTimes } = competitionEngine.calculateScheduleTimes({\n  scheduleDate,\n\n  startTime, // optional - if not provided will be derived from court availability for the tiven date\n  endTime, // optional - if not provided will be derived from court availability for the tiven date\n\n  averageMatchUpMinutes = 90, // optional - defualts to 90\n  periodLength = 30, // optional - defualts to 30\n\n  venueIds, // optional - restrict calculation to specified venueIds\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"clearscheduledmatchups",children:"clearScheduledMatchUps"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.clearScheduledMatchUps({\n  ignoreMatchUpStatuses, // optional - specify matchUpStatus values to be ignored; defaults to all completed matchUpStatuses\n  scheduleAttributes, // optional - specify which attributes should be considered; defaults to ['scheduledDate', 'scheduledTime']\n  scheduledDates, // optional - array of dates to be cleared; only matchUps with specified scheduledDate will be cleared\n  venueIds, // optional - array of venueIds; only matchUps at specified venues will be cleared\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"competitionmatchups",children:"competitionMatchUps"}),"\n",(0,i.jsxs)(n.p,{children:['Returns aggregated arrays of "inContext" matchUps for all tournamentRecords loaded into ',(0,i.jsx)(n.code,{children:"competitionEngine"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const {\n  byeMatchUps,\n  abandonedMatchUps,\n  completedMatchUps,\n  pendingMatchUps,\n  upcomingMatchUps,\n} = competitionEngine.competitionMatchUps({\n  scheduleVisibilityFilters, // { visibilityThreshold: Date, eventIds, drawIds }\n  matchUpFilters, // optional; [ scheduledDate, scheduledDates: [], courtIds: [], stages: [], roundNumbers: [], matchUpStatuses: [], matchUpFormats: []]\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"competitionschedulematchups",children:"competitionScheduleMatchUps"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const matchUpFilters = {\n  isMatchUpTie: false,\n  scheduledDate, // scheduled date of matchUps to return\n};\n\nconst { completedMatchUps, dateMatchUps, courtsData, venues } =\n  competitionEngine.competitionScheduleMatchUps({\n    alwaysReturnCompleted, // boolean - when true return completed matchUps regardless of publish state\n    courtCompletedMatchUps, // boolean - include completed matchUps in court.matchUps - useful for pro-scheduling\n    participantsProfile, // optional - ability to specify additions to context (see parameters of tournamentEngine.getParticipants())\n    withCourtGridRows, // optional boolean - return { rows } of matchUps for courts layed out as a grid, with empty cells\n    minCourtGridRows, // optional integer - minimum number of rows to return (compared to auto-calculated rows)\n    sortDateMatchUps, // boolean boolean - optional - defaults to `true`\n    usePublishState, // boolean - when true filter out events and dates that have not been published\n    matchUpFilters, // optional; [ scheduledDate, scheduledDates: [], courtIds: [], stages: [], roundNumbers: [], matchUpStatuses: [], matchUpFormats: []]\n    sortCourtsData, // boolean - optional\n  });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"courtgridrows",children:"courtGridRows"}),"\n",(0,i.jsxs)(n.p,{children:["Method can be invoked by passing ",(0,i.jsx)(n.code,{children:"({ withCourtGridRows: true })"})," to method ",(0,i.jsx)(n.code,{children:"competitionEngine.competitionScheduledMatchUps"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const { rows } = competitionEngine.courtGridRows({\n  minRowCount, // optional integer - minimum number of rows to return (compared to auto-calculated rows)\n  courtsData, // produced by "competitionEngine.competitionScheduleMatchUps" method\n});\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"deletecourt",children:"deleteCourt"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.deleteCourt({\n  courtId,\n  force, // override warnings about matchUps scheduled on specified court\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"deletevenue",children:"deleteVenue"}),"\n",(0,i.jsxs)(n.p,{children:["If a venue has scheduled matchUps then it will not be deleted unless ",(0,i.jsx)(n.code,{children:"{ force: true }"})," in which case all relevant matchUps will be unscheduled."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.deleteVenue({ venueId, force });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"devcontext",children:"devContext"}),"\n",(0,i.jsxs)(n.p,{children:["Setting devContext(true) bypasses ",(0,i.jsxs)(n.strong,{children:["try "," catch (err) "]})," code block and in some cases enables enhanced logging"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.devContext(true);\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"disablecourts",children:"disableCourts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.disableCourts({\n  courtIds,\n  dates, // optional - if not provided, courts will be disalbed for all dates\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"disabletiaautocalc",children:"disableTiaAutoCalc"}),"\n",(0,i.jsx)(n.p,{children:"Disable default behavior of auto calculating TEAM matchUp scores."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.disableTieAutoCalc({ tournamentId, drawId, matchUpId });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"disablevenues",children:"disableVenues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.disableVenues({ venueIds });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"enablecourts",children:"enableCourts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.enableCourts({\n  enableAll, // optional boolean\n  courtIds,\n  dates, // optional - array of dates to enable (if they have been disabled)\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"enabletiaautocalc",children:"enableTiaAutoCalc"}),"\n",(0,i.jsx)(n.p,{children:"Re-enable default behavior of auto calculating TEAM matchUp scores, and trigger auto calculation."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.enableTieAutoCalc({ tournamentId, drawId, matchUpId });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"enablevenues",children:"enableVenues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.enableVenues({ venueIds, enableAll });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"executionqueue",children:"executionQueue"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"executionQueue"})," method accepts an array of ",(0,i.jsx)(n.code,{children:"competitionEngine"})," methods and associated parameters,\nallowing for multiple queries or mutations in a single API call, which is significant if a client is making a\nrequest of a server and the server needs to prepare context by loading a tournament record."]}),"\n",(0,i.jsxs)(n.p,{children:["An additional benefit of the ",(0,i.jsx)(n.code,{children:"executionQueue"})," is that subscribers to ",(0,i.jsx)(n.code,{children:"competitionEngine"})," events are not notified\nuntil all methods in the queue have completed successfully, and a failure of any one method can be used to roll back state\nwith the assurance that there are no side-effects caused by subscribers responding to notifications. This also means\nthat the server context can not be blocked by any long-running external processes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const result = competitionEngine.executionQueue([\n  {\n    method: 'getCompetitionParticipants',\n    params: { participantFilters: { participantTypes: [PAIR] } },\n  },\n  {\n    method: 'getCompetitionParticipants',\n    params: { participantFilters: { participantTypes: [INDIVIDUAL] } },\n  },\n]);\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"findextension",children:"findExtension"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { extension } = competitionEngine.findExtension({ name });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"findparticipant",children:"findParticipant"}),"\n",(0,i.jsxs)(n.p,{children:["Find tournament participant by either ",(0,i.jsx)(n.code,{children:"participantId"})," or ",(0,i.jsx)(n.code,{children:"personId"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { participant, tournamentId } = competitionEngine.findParticipant({\n  participantId, // required only if no personId provided\n  personId, // required only if no participantId provided\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getcompetitiondaterange",children:"getCompetitionDateRange"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { startDate, endDate } = competitionEngine.getCompetitionDateRange();\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getcompetitionparticipants",children:"getCompetitionParticipants"}),"\n",(0,i.jsxs)(n.p,{children:["Returns ",(0,i.jsx)(n.strong,{children:"deepCopies"})," of competition participants filtered by participantFilters which are arrays of desired participant attribute values."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const participantFilters = {\n  accessorValues: [{ accessor, value }], // optional - see Accessors in Concepts\n  eventEntryStatuses, // boolean\n  participantTypes: [INDIVIDUAL],\n  participantRoles, [COMPETITOR],\n  signInStatus, // specific signIn status\n  eventIds, // events in which participants appear\n};\nconst {\n  competitionParticipants,\n  participantIdsWithConflicts // returns array of participantIds which have scheduling conflicts\n} =\n  competitionEngine.getCompetitionParticipants({\n    inContext, // optional - adds individualParticipants for all individualParticipantIds\n\n    withMatchUps, // optional - include all matchUps in which the participant appears, as well as potentialMatchUps\n    withScaleValues, // optional - include { ratings, rankings } attributes extracted from timeItems\n    withStatistics, // optional - adds events, matchUps and statistics, e.g. 'winRatio'\n    withGroupings, // optional - include membership in group, pair, and team participants\n    withOpponents, // optional - include opponent participantIds\n    withSeeding, // optionsl - add event seeding\n    withEvents, // optional - defaults to true if any other context options are specified\n    withDraws, // optional - defaults to true if any other context options are specified\n    withISO2, // optional - will add ISO2 country code and countryName to participant persons\n    withIOC, // optional - will add IOC country code and countryName to participant persons\n\n    scheduleAnalysis: {\n      scheduledMinutesDifference // optional - scheduling conflicts determined by scheduledTime difference between matchUps\n    },\n\n    convertExtensions, // optional - BOOLEAN - convert extensions so _extensionName attributes\n    policyDefinitions, // optional - can accept a privacy policy to filter participant attributes\n    participantFilters, // optional - filters\n    usePublishState, // optional - BOOLEAN - don't add seeding information when not published\n  });\n"})}),"\n",(0,i.jsx)(n.h3,{id:"implemented-participantfilters",children:"Implemented participantFilters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"enableOrFiltering: boolean - use OR logic instead of default AND"}),"\n",(0,i.jsxs)(n.li,{children:["accessorValues: array of accessors and targeted value ",(0,i.jsx)(n.code,{children:"[{ accessor, value }]"})]}),"\n",(0,i.jsxs)(n.li,{children:["drawEntryStatuses: array of ",(0,i.jsx)(n.code,{children:"entryStatus"})," values for participantIds found in draw.entries"]}),"\n",(0,i.jsxs)(n.li,{children:["eventEntryStatuses: array of ",(0,i.jsx)(n.code,{children:"entryStatus"})," values for participantIds found in event.entries"]}),"\n",(0,i.jsx)(n.li,{children:"eventIds: array of targeted eventIds"}),"\n",(0,i.jsx)(n.li,{children:"participantIds: array of targeted participantIds"}),"\n",(0,i.jsx)(n.li,{children:"participantRoles: array of targeted participantRoles"}),"\n",(0,i.jsx)(n.li,{children:"participantTypes: array of targeted participantTypes"}),"\n",(0,i.jsxs)(n.li,{children:["positionedParticipants: participantIds positioned in structures ",(0,i.jsx)(n.code,{children:"[true, false, undefined]"})]}),"\n",(0,i.jsx)(n.li,{children:"signInStatus: SIGNED_IN or SIGNED_OUT"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getcompetitionpenalties",children:"getCompetitionPenalties"}),"\n",(0,i.jsx)(n.p,{children:"Returns an array of all penalties issued for all tournaments loaded into competitionEngine."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { penalties } = competitionEngine.getCompetitionPenalties();\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getcompetitionvenues",children:"getCompetitionVenues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { venues, venueIds } = competitionEngine.getCompetitionVenues();\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"geteventmatchupformattiming",children:"getEventMatchUpFormatTiming"}),"\n",(0,i.jsx)(n.p,{children:"Method is used internally in advanced scheduling to determine averageMatchUp times for matchUps within an event."}),"\n",(0,i.jsxs)(n.p,{children:["Requires an array of ",(0,i.jsx)(n.code,{children:"matchUpFormats"})," either be defined in scoring policy that is attached to the tournamentRecord or an event, or passed in as parameter. ",(0,i.jsx)(n.code,{children:"matchUpFormats"})," can be passed either as an array of strings, or an array of ",(0,i.jsx)(n.code,{children:"[{ matchUpFormat }]"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { eventMatchUpFormatTiming } =\n  competitionEngine.getEventMatchUpFormatTiming({\n    matchUpFormats, // optional - can be retrieved from policy\n    categoryType, // optional - categoryType is not part of TODS or event attributes, but can be defined in a policy\n    eventId,\n  });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getlinkedtournamentids",children:"getLinkedTournamentIds"}),"\n",(0,i.jsxs)(n.p,{children:["Returns ",(0,i.jsx)(n.code,{children:"linkedTournamentIds"})," for each tournamentRecord loaded in ",(0,i.jsx)(n.code,{children:"compeitionEngine"}),"."]}),"\n",(0,i.jsx)(n.p,{children:'Caters for the possibility that, for instance, two "linked" tournaments and one "unlinked" tournament could be loaded.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { linkedTournamentIds } = competitionEngine.getLinkedTournamentIds();\n/*\n{\n  'tournamentId-1': ['tournamentId-2', 'tournamentId-3'],\n  'tournamentId-2': ['tournamentId-1', 'touranmentId-3'],\n  'tournamentId-3': ['tournamentId-1', 'tournamentId-2']\n}\n*/\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getmatchupdailylimits",children:"getMatchUpDailyLimits"}),"\n",(0,i.jsx)(n.p,{children:"Returns player daily match limits for singles/doubles/total matches."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { matchUpDailyLimits } = competitionEngine.getMatchUpDailyLimits({\n  tournamentId, // optional - scope search to specific tournamentRecord\n});\nconst { DOUBLES, SINGLES, total } = matchUpDailyLimits;\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getmatchupdependencies",children:"getMatchUpDependencies"}),"\n",(0,i.jsxs)(n.p,{children:["For each ",(0,i.jsx)(n.code,{children:"matchUpId"})," returns an array of other ",(0,i.jsx)(n.code,{children:"matchUpIds"})," which occur earlier in the draw."]}),"\n",(0,i.jsxs)(n.p,{children:["Optionally returns an array of ",(0,i.jsx)(n.code,{children:"participantIds"})," which could potentially appear in each ",(0,i.jsx)(n.code,{children:"matchUp"}),";\nused internally to ensure that auto scheduling respects the ",(0,i.jsx)(n.code,{children:"timeAfterRecovery"})," of all potential participants."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const {\n  matchUpDependencies: {\n    [matchUpId]: {\n      matchUpIds: [matchUpIdDependency], // array of all matchUpIds which occur prior to this matchUpId in the draw; crosses all structures\n      participantIds: [potentialParticipantIds], // array of all participantIds which could potentially appear in this matchUp\n      dependentMatchUpIds: [dependentMatchUpId], // array of matchUpIds which occur after this matchUpId in the draw; crosses all structures\n    },\n  },\n} = competitionEngine.getMatchUpDependencies({\n  includeParticipantDependencies, // boolean - defaults to false\n  drawIds, // optional array of drawIds to scope the analysis\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getrounds",children:"getRounds"}),"\n",(0,i.jsxs)(n.p,{children:["Returns all rounds of all ",(0,i.jsx)(n.code,{children:"structures"})," in all ",(0,i.jsx)(n.code,{children:"tournamentRecords"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { rounds, excludedRounds } = competitionEngine.getRounds({\n  excludeScheduleDateProfileRounds, // optional date string - exclude rounds which appear in schedulingProfile on given date\n  excludeCompletedRounds, // optional boolean - exclude rounds where all matchUps are completed\n  excludeScheduledRounds, // optional boolean - exclude rounds where all matchUps are scheduled\n  inContextMatchUps, // optional - if not provided will be read from tournamentRecords\n  schedulingProfile, // optional - if not provided will be read from tournamentRecords (where applicable)\n  withSplitRounds, // optional boolean - read schedulingProfile and split rounds where defined\n  matchUpFilters, // optional - filter competition matchUps before deriving rounds\n  withRoundId, // optional boolean - return a unique id for each derived round\n  scheduleDate, // optional - filters out events which are not valid on specified date\n  venueId, // optional - filters out events which are not valid for specified venue\n  context, // optional - object to be spread into derived rounds\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the following detail for each round:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"  {\n    roundSegment: { segmentsCount, segmentNumber }, // if the round has been split in schedulingProfile\n    winnerFinishingPositionRange,\n    unscheduledCount,\n    incompleteCount,\n    minFinishingSum,\n    matchUpsCount,\n    stageSequence,\n    segmentsCount, // when { withSplitRounds: true } and a round split is defined in schedulingProfile\n    structureName,\n    tournamentId,\n    isScheduled, // whether every matchUp in the round has been scheduled (does not consider matchUpStatus: BYE)\n    isComplete, // whether every matchUp in the round has been COMPLETED or ABANDONED/CANCELLED\n    matchUpType,\n    roundNumber,\n    structureId,\n    eventName,\n    roundName,\n    drawName,\n    matchUps,\n    byeCount\n    eventId,\n    drawId,\n    id, // unique id provided when { withRoundId: true }\n  } = round;\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getparticipants",children:"getParticipants"}),"\n",(0,i.jsxs)(n.p,{children:["Returns ",(0,i.jsx)(n.strong,{children:"deepCopies"})," of competition participants filtered by participantFilters which are arrays of desired participant attribute values. This method is an optimization of ",(0,i.jsx)(n.code,{children:"getCompetitionParticipants"})," and will replace it going forward."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const participantFilters = {\n  accessorValues: [{ accessor, value }], // optional - see Accessors in Concepts\n  eventEntryStatuses, // boolean\n  participantTypes: [INDIVIDUAL],\n  participantRoles, [COMPETITOR],\n  signInStatus, // specific signIn status\n  eventIds, // events in which participants appear\n};\nconst {\n  participantIdsWithConflicts, // returns array of participantIds which have scheduling conflicts\n  competitionParticipants,\n  eventsPublishStatuses,\n  derivedEventInfo,\n  derivedDrawInfo,\n  participantsMap, // object { [participantId]: participant }\n  mappedMatchUps, // object { [matchUpId]: matchUp }; when { withMatchUps: true }\n  participants, // array of participants\n  matchUps, // array of all matchUps; when { withMatchUps: true }\n} =\n  competitionEngine.getParticipants({\n    convertExtensions, // optional - BOOLEAN - convert extensions so _extensionName attributes\n    participantFilters, // optional - filters\n    policyDefinitions, // optional - can accept a privacy policy to filter participant attributes\n    usePublishState, // optional - BOOLEAN - don't add seeding information when not published\n    scheduleAnalysis: {\n      scheduledMinutesDifference // optional - scheduling conflicts determined by scheduledTime difference between matchUps\n    },\n    usePublishState,  // optional boolean\n    withDraws, // optional - defaults to true if any other context options are specified\n    withEvents, // optional - defaults to true if any other context options are specified\n    withGroupings, // optional - include membership in group, pair, and team participants\n    withIndividualParticipants, // optional - include hydrated individualParticiapnts for TEAM/PAIR participants\n    withIOC, // optional - will add IOC country code and countryName to participant persons\n    withISO2, // optional - will add ISO2 country code and countryName to participant persons\n    withMatchUps, // optional - include all matchUps in which the participant appears, as well as potentialMatchUps\n    withOpponents, // optional - include opponent participantIds\n    withPotentialMatchUps, // optional boolean\n    withRankingProfile, // optional boolean - include details necessary for point awards\n    withScaleValues, // optional - include { ratings, rankings } attributes extracted from timeItems\n    withSeeding, // optionsl - add event seeding\n    withScheduleItems, // optional boolean - include array of scheduled matchUp details\n    withSignInStatus, // optional boolean\n    withStatistics, // optional - adds events, matchUps and statistics, e.g. 'winRatio'\n    withTeamMatchUps // optional boolean\n  });\n"})}),"\n",(0,i.jsx)(n.h3,{id:"participantfilters",children:"participantFilters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"enableOrFiltering: boolean - use OR logic instead of default AND"}),"\n",(0,i.jsxs)(n.li,{children:["accessorValues: array of accessors and targeted value ",(0,i.jsx)(n.code,{children:"[{ accessor, value }]"})]}),"\n",(0,i.jsxs)(n.li,{children:["drawEntryStatuses: array of ",(0,i.jsx)(n.code,{children:"entryStatus"})," values for participantIds found in draw.entries"]}),"\n",(0,i.jsxs)(n.li,{children:["eventEntryStatuses: array of ",(0,i.jsx)(n.code,{children:"entryStatus"})," values for participantIds found in event.entries"]}),"\n",(0,i.jsx)(n.li,{children:"eventIds: array of targeted eventIds"}),"\n",(0,i.jsx)(n.li,{children:"participantIds: array of targeted participantIds"}),"\n",(0,i.jsx)(n.li,{children:"participantRoles: array of targeted participantRoles"}),"\n",(0,i.jsx)(n.li,{children:"participantTypes: array of targeted participantTypes"}),"\n",(0,i.jsxs)(n.li,{children:["positionedParticipants: participantIds positioned in structures ",(0,i.jsx)(n.code,{children:"[true, false, undefined]"})]}),"\n",(0,i.jsx)(n.li,{children:"signInStatus: SIGNED_IN or SIGNED_OUT"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getparticipantscaleitem",children:"getParticipantScaleItem"}),"\n",(0,i.jsx)(n.p,{children:"Return a ranking or rating or seeding value for a participant, referenced by participantId."}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"../concepts/scaleItems",children:"Scale Items"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const scaleAttributes = {\n  scaleType: RATING,\n  eventType: SINGLES,\n  scaleName: 'WTN',\n  accessor, // optional - string determining how to access attribute if scaleValue is an object\n};\nconst {\n  scaleItem: { scaleValue },\n  tournamentId,\n} = competitionEngine.getParticipantScaleItem({\n  scaleAttributes,\n  participantId,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getpersonrequests",children:"getPersonRequests"}),"\n",(0,i.jsxs)(n.p,{children:["Returns an object with array of requests for each relevant ",(0,i.jsx)(n.code,{children:"personId"}),". Request objects are returned with a ",(0,i.jsx)(n.code,{children:"requestId"})," which can be used to call ",(0,i.jsx)(n.a,{href:"competition-engine-api#modifypersonrequests",children:"modifyPersonRequests"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"competition-engine-api#addpersonrequests",children:"addPersonRequests"})," for request object structure."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { personRequests } = competitionEngine.getPersonRequests({\n  requestType, // optional filter\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getstate",children:"getState"}),"\n",(0,i.jsxs)(n.p,{children:["Returns a deep copy of ",(0,i.jsx)(n.code,{children:"tournamentRecords"})," which have been loaded, along with currently selected ",(0,i.jsx)(n.code,{children:"tournamentId"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"competitionEngine"})," and ",(0,i.jsx)(n.code,{children:"tournamentEngine"})," share state; ",(0,i.jsx)(n.code,{children:"tournamentId"})," points to the ",(0,i.jsx)(n.code,{children:"tournamentRecord"})," that\n",(0,i.jsx)(n.code,{children:"tournamentEngine"})," methods will mutate."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { tournamentId, tournamentRecords } = competitionEngine.getState({\n  convertExtensions, // optional - convert extensions to '_' prefixed attributes\n  removeExtensions, // optional - strip all extensions out of tournamentRecord\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getschedulingprofile",children:"getSchedulingProfile"}),"\n",(0,i.jsxs)(n.p,{children:["Returns a ",(0,i.jsx)(n.code,{children:"schedulingProfile"})," (if present). Checks the integrity of the profile to account for any ",(0,i.jsx)(n.code,{children:"venues"})," or ",(0,i.jsx)(n.code,{children:"drawDefinitions"})," which have been deleted."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { schedulingProfile } = competitionEngine.getSchedulingProfile();\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getschedulingprofileissues",children:"getSchedulingProfileIssues"}),"\n",(0,i.jsxs)(n.p,{children:["Analyzes the ",(0,i.jsx)(n.code,{children:"schedulingProfile"})," (if any) that is attached to the ",(0,i.jsx)(n.code,{children:"tournamentRecord(s)"})," and reports any issues with the ordering of rounds."]}),"\n",(0,i.jsxs)(n.p,{children:["The analysis for each ",(0,i.jsx)(n.code,{children:"scheduleDate"})," only includes ",(0,i.jsx)(n.code,{children:"matchUps"})," to be scheduled on that date.\nIn other words, the method only reports on scheduling issues relative to the group of ",(0,i.jsx)(n.code,{children:"matchUpIds"})," derived from rounds which are being scheduled for each date."]}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["In some cases it is valid to schedule a second round, for instance, before a first round, because there may be some second round ",(0,i.jsx)(n.code,{children:"matchUps"})," which are ready to be played... possibly due to ",(0,i.jsx)(n.code,{children:"participants"})," advancing via first round BYEs or WALKOVERs."]}),(0,i.jsxs)(n.p,{children:["Regardless of issues reported, ",(0,i.jsx)(n.code,{children:"competitionEngine.scheduleProfileRounds()"})," will attempt to follow the desired order, but will not schedule ",(0,i.jsx)(n.code,{children:"matchUps"})," before dependencies."]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const {\n  profileIssues: {\n    // object includes matchUpIds which are out of order\n    matchUpIdsShouldBeAfter: {\n      [matchUpId]: {\n        earlierRoundIndices: [index], // indices of scheduled rounds which must be scheduled before matchUpId\n        shouldBeAfter: [matchUpId], // array of matchUpIds which must be scheduled before matchUpId\n      },\n    },\n  },\n  // roundIndex is the index of the round to be scheduled within the schedulingProfile for a givn date\n  roundIndexShouldBeAfter: {\n    [scheduleDate]: {\n      [index]: [indexOfEarlierRound], // maps the index of the round within a date's scheduled rounds to those rounds which should be scheduled first\n    },\n  },\n} = competitionEngine.getSchedulingProfileIssues({\n  dates, // optional array of target dates\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"generatebookings",children:"generateBookings"}),"\n",(0,i.jsx)(n.p,{children:'This methods is used internally for creating a "virtual" view of court availability.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { bookings, relevantMatchUps } = competitionEngine.generateBookings({\n  defaultRecoveryMinutes, // optional\n  averageMatchUpMinutes, // optional\n  periodLength, // optional - scheduling period in minutes\n  scheduleDate, // optional - only consider matchUps scheduled on scheduleDate\n  venueIds, // optional - only consider matchUps at specific venue(s)\n  matchUps,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getvenuesandcourts",children:"getVenuesAndCourts"}),"\n",(0,i.jsxs)(n.p,{children:["Returns an aggregate view of venues and courts across all tournamentRecords loaded into ",(0,i.jsx)(n.code,{children:"competitionEngine"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { courts, venues } = competitionEngine.getVenuesAndCourts({\n  convertExtensions, // optional boolean\n  ignoreDisabled, // optional boolean\n  dates, // optional - used with ignoreDisabled - applies to courts\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"getvenuesreport",children:"getVenuesReport"}),"\n",(0,i.jsxs)(n.p,{children:["Returns a ",(0,i.jsx)(n.code,{children:"venueReports"})," array which provides details for each targt ",(0,i.jsx)(n.code,{children:"venue"})," for targt date(s)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { venuesReport } = competitionEngine.getVenuesReport({\n  dates, // optional array of target dates\n  venueIds, // optional array of target venueIds\n  ignoreDisabled, // optional boolean, defaults to true - ignore disabled venues/courts\n});\n\nconst {\n  availableCourts, // how many courts are available for date\n  availableMinutes, // total courts minutes available for date\n  scheduledMinutes, // minutes of court time that are scheduled for matchUps\n  scheduledMatchUpsCount, // number of scheduled matchUps\n  percentUtilization, // percent of available minutes utilized by scheduled matchUps\n} = venuesReport[0].venueReport[date];\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"linktournaments",children:"linkTournaments"}),"\n",(0,i.jsxs)(n.p,{children:["Links all tournaments currently loaded in ",(0,i.jsx)(n.code,{children:"competitionEngine"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.linkTournaments();\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"matchupactions",children:"matchUpActions"}),"\n",(0,i.jsxs)(n.p,{children:["Convenience pass through to ",(0,i.jsx)(n.code,{children:"tournamentEngine.matchUpActions"})," for use in contexts where multiple tournamentRecords are loaded into ",(0,i.jsx)(n.code,{children:"competitionEngine"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { matchUpActions } = competitionEngine.matchUpActions({\n  tournamentId,\n  matchUpId,\n  eventId,\n  drawId,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"matchupschedulechange",children:"matchUpScheduleChange"}),"\n",(0,i.jsx)(n.p,{children:"Swaps the schedule details of two scheduled matchUps."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.matchUpScheduleChange({\n  courtDayDate: dateSelected,\n  sourceMatchUpContextIds,\n  targetMatchUpContextIds,\n  sourceCourtId,\n  targetCourtId,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"modifycourt",children:"modifyCourt"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.modifyCourt({\n  courtId,\n  force, // applies only to dateAvailability, will remove scheduling information from matchUps where court is no longer available\n  modifications: {\n    courtName,\n    dateAvailability,\n    courtDimensions,\n    onlineResources,\n    surfaceCategory,\n    surfacedDate,\n    surfaceType,\n    altitude,\n    latitude,\n    longitude,\n    notes,\n    pace,\n  },\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"modifycollectiondefinition",children:"modifyCollectionDefinition"}),"\n",(0,i.jsxs)(n.p,{children:["Modifies the ",(0,i.jsx)(n.code,{children:"collectionName"})," and/or ",(0,i.jsx)(n.code,{children:"matchUpFormat"})," for targeted ",(0,i.jsx)(n.code,{children:"collectionId"})," within the ",(0,i.jsx)(n.code,{children:"tieFormat"})," specified by ",(0,i.jsx)(n.code,{children:"eventId"}),", ",(0,i.jsx)(n.code,{children:"drawId"}),", ",(0,i.jsx)(n.code,{children:"structureId"})," or ",(0,i.jsx)(n.code,{children:"matchUpId"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.modifyCollectionDefinition({\n  collectionName, // optional\n  matchUpFormat, // optional\n  tournamentId, // required\n  collectionId, // required\n  structureId, // required if modifying tieFormat for a structure\n  matchUpId, // required if modifying tieFormat for a matchUp\n  eventId, // required if modifying tieFormat for a event\n  drawId, // required if modifying tieFormat for a drawDefinition or a structure\n  gender, // optional\n\n  // value assignment, only one is allowed to have a value\n  collectionValueProfiles, // optional - [{ collectionPosition: 1, value: 2 }] - there must be a value provided for all matchUp positions\n  collectionValue, // optional - value awarded for winning more than half of the matchUps in the collection\n  matchUpValue, // optional - value awarded for each matchUp won\n  scoreValue, // optional - value awarded for each game or point won (points for tiebreak sets)\n  setValue, // optional - value awarded for each set won\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"modifyeventmatchupformattiming",children:"modifyEventMatchUpFormatTiming"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.modifyEventMatchUpFormatTiming({\n  recoveryMinutes,\n  averageMinutes,\n  matchUpFormat,\n  eventId,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"modifymatchupformattiming",children:"modifyMatchUpFormatTiming"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.modifyMatchUpFormatTiming({\n  matchUpFormat: 'SET3-S:6/TB7',\n  averageTimes: [\n    {\n      categoryNames: [U12, U14],\n      minutes: { [DOUBLES]: 110, default: 130 },\n    },\n    {\n      categoryNames: [U16, U18],\n      minutes: { [DOUBLES]: 100, default: 120 },\n    },\n  ],\n  recoveryTimes: [\n    { categoryNames: [], minutes: { default: 15, [DOUBLES]: 15 } },\n  ],\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"modifypersonrequests",children:"modifyPersonRequests"}),"\n",(0,i.jsx)(n.p,{children:"Modifies existing person requests."}),"\n",(0,i.jsxs)(n.p,{children:["Any requests without a ",(0,i.jsx)(n.code,{children:"requestId"})," will be ",(0,i.jsx)(n.strong,{children:"added"}),". Any requests without ",(0,i.jsx)(n.code,{children:"requestType"})," will be ",(0,i.jsx)(n.strong,{children:"removed"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.modifyPersonRequests({\n  personId, // optional - scope to single personId; avoid brute-force updates\n  requests: [\n    {\n      requestType,\n      requestId, // if requestId is not present, will attempt to added\n      startTime,\n      endTime,\n      date,\n    },\n  ],\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"modifypenalty",children:"modifyPenalty"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const notes = 'Hit ball into spectator';\nconst modifications = { notes };\ncompetitionEngine.modifyPenalty({ penaltyId, modifications });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"modifytieformat",children:"modifyTieFormat"}),"\n",(0,i.jsxs)(n.p,{children:["Both modifies the ",(0,i.jsx)(n.code,{children:"tieFormat"})," on the target ",(0,i.jsx)(n.code,{children:"event"}),", ",(0,i.jsx)(n.code,{children:"drawDefinition"}),", ",(0,i.jsx)(n.code,{children:"structure"})," or ",(0,i.jsx)(n.code,{children:"matchUp"})," and adds/deletes ",(0,i.jsx)(n.code,{children:"tieMatchUps"})," as necessary."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.modifyTieFormat({\n  modifiedTieFormat, // will be compared to existing tieFormat that is targeted and differences calculated\n  tournamentId, // required\n  structureId, // required if modifying tieFormat for a structure\n  matchUpId, // required if modifying tieFormat for a matchUp\n  eventId, // required if modifying tieFormat for a event\n  drawId, // required if modifying tieFormat for a drawDefinition or a structure\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"modifyvenue",children:"modifyVenue"}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/docs/concepts/scheduling",children:"Scheduling"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const modifications = {\n  venueName,\n  onlineResources,\n  venueAbbreviation,\n  courts: [\n    {\n      courtId: 'b9df6177-e430-4a70-ba47-9b9ff60258cb',\n      courtName: 'Custom Court 1',\n      dateAvailability: [\n        {\n          date: '2020-01-01', // if no date is provided then `startTime` and `endTime` will be considered default values\n          startTime: '16:30',\n          endTime: '17:30',\n        },\n      ],\n    },\n  ],\n};\ncompetitionEngine.modifyVenue({ venueId, modifications });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"ordercollectiondefinitions",children:"orderCollectionDefinitions"}),"\n",(0,i.jsxs)(n.p,{children:["Modify the array order of ",(0,i.jsx)(n.code,{children:"tieFormat.collectionDefinitions"})," for an ",(0,i.jsx)(n.code,{children:"event"}),", a ",(0,i.jsx)(n.code,{children:"drawDefinition"}),", ",(0,i.jsx)(n.code,{children:"structure"}),", or ",(0,i.jsx)(n.code,{children:"matchUp"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.orderCollectionDefinitions({\n  orderMap: { collectionId1: 1, collectionId2: 2 },\n  tournamentId, // required\n  structureId, // required if modifying tieFormat for a structure\n  matchUpId, // required if modifying tieFormat for a matchUp\n  eventId, // required if modifying tieFormat for a event\n  drawId, // required if modifying tieFormat for a drawDefinition or a structure\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"publishorderofplay",children:"publishOrderOfPlay"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.publishOrderOfPlay({\n  removePriorValues, // optional boolean - when true will delete prior timeItems\n  scheduledDates, // optional - if not provided will publish all scheduledDates\n  eventIds, // optional - if not provided will publish all eventIds\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"removecollectiondefinition",children:"removeCollectionDefinition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.removeCollectionDefinition({\n  updateInProgressMatchUps, // optional; defaults to true\n  tieFormatComparison, // optional; defaults to false; when true will not delete unique collections on unscored matchUps\n  tieFormatName, // any time a collectionDefinition is modified a new name must be provided\n  tournamentId, // required\n  collectionId, // required - id of collectionDefinition to be removed\n  structureId, // optional - if removing from tieFormat associated with a specific structure\n  matchUpId, // optional - if removing from tieFormat asscoiated with a specific matchUp\n  eventId, // optional - if removing from tieFormat asscoiated with an event\n  drawId, // required if structureId is specified or if tieFormat associated with drawDefinition is to be modified\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"removecollectiongroup",children:"removeCollectionGroup"}),"\n",(0,i.jsxs)(n.p,{children:["Removes a ",(0,i.jsx)(n.code,{children:"collectionGroup"})," from the ",(0,i.jsx)(n.code,{children:"tieFormat"})," found for the ",(0,i.jsx)(n.code,{children:"event"}),", ",(0,i.jsx)(n.code,{children:"drawDefinition"}),", ",(0,i.jsx)(n.code,{children:"structure"})," or ",(0,i.jsx)(n.code,{children:"matchUp"}),"; recalculates"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.removeCollectionGroup({\n  updateInProgressMatchUps, // optional - defaults to true\n  tieFormatName: 'New tieFormat', // if no name is provided then there will be no name\n  collectionGroupNumber: 1,\n  tournamentId, // required\n  structureId, // optional\n  matchUpId, // optional\n  eventId, // optional\n  drawId, // optional; required if structureId is targeted\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"removeeventmatchupformattiming",children:"removeEventMatchUpFormatTiming"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.removeEventMatchUpFormatTiming({ eventId });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"removeextension",children:"removeExtension"}),"\n",(0,i.jsxs)(n.p,{children:["Removes an extension from all ",(0,i.jsx)(n.code,{children:"tournamentRecords"})," loaded into ",(0,i.jsx)(n.code,{children:"competitionEngine"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.removeExtension({ name });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"removematchupcourtassignment",children:"removeMatchUpCourtAssignment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.removeMatchUpCourtAssignment({\n  tournamentId,\n  courtDayDate,\n  matchUpId,\n  drawId,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"removepersonrequests",children:"removePersonRequests"}),"\n",(0,i.jsxs)(n.p,{children:["Removes person requests matching passed values. If no paramaters are provided, removes ",(0,i.jsx)(n.strong,{children:"all"})," person requests."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"result = competitionEngine.removePersonRequests({\n  personId, // optional - scope to personId\n  requestType, // optioanl - scope to requestType\n  requestId, // optional - scope to a single requestId\n  date, // optional - scope to a specific date\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"removepenalty",children:"removePenalty"}),"\n",(0,i.jsx)(n.p,{children:"Removes a penalty from all relevant tournament participants."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.removePenalty({ penaltyId });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"removetournamentrecord",children:"removeTournamentRecord"}),"\n",(0,i.jsxs)(n.p,{children:["Removes a tournamentRecord from ",(0,i.jsx)(n.code,{children:"competitionEngine"})," state."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.removeTournamentRecord(tournamentId);\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"removeunlinkedtournamentrecords",children:"removeUnlinkedTournamentRecords"}),"\n",(0,i.jsxs)(n.p,{children:["Removes all tournamentRecords from ",(0,i.jsx)(n.code,{children:"competitionEngine"})," state that are unlinked."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.removeUnlinkedTournamentRecords();\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"reorderupcomingmatchups",children:"reorderUpcomingMatchUps"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const matchUpContextIds = [{ tournamentId, drawId, matchUpId }];\ncompetitionEngine.reorderUpcomingMatchUps({\n  matchUpContextIds,\n  firstToLast, // boolean - direction of reorder\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"resetscorecard",children:"resetScorecard"}),"\n",(0,i.jsxs)(n.p,{children:["Removes all scores from ",(0,i.jsx)(n.code,{children:"tieMatchUps"})," within a TEAM ",(0,i.jsx)(n.code,{children:"matchUp"}),"; preserves ",(0,i.jsx)(n.code,{children:"lineUps"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.resetScorecard({\n  tiebreakReset, // optional boolean - check for tiebreak scenarios and reset tieFormat\n  tournamentId, // required\n  matchUpId, // required - must be a TEAM matchUp\n  drawId, // required\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"resettieformat",children:"resetTieFormat"}),"\n",(0,i.jsxs)(n.p,{children:["Remove the ",(0,i.jsx)(n.code,{children:"tieFormat"})," from a TEAM ",(0,i.jsx)(n.code,{children:"matchUp"})," if there is a ",(0,i.jsx)(n.code,{children:"tieFormat"})," further up the hierarchy; modifies ",(0,i.jsx)(n.code,{children:"matchUp.tieMatchUps"})," to correspond."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.resetTieFormat({\n  tournamentId, // required\n  matchUpId, // must be a TEAM matchUp\n  drawId, // required\n  uuids, // optional - in client/server scenarios generated matchUps must have equivalent matchUpIds\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"schedulematchups",children:"scheduleMatchUps"}),"\n",(0,i.jsx)(n.p,{children:"Auto schedule matchUps on a given date using the Garman formula."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'competitionEngine.scheduleMatchUps({\n  scheduleDate, // date string in the format `YYYY-MM-DD`\n  startTime, // optional - if not provided will be derived from court availability for the tiven date\n  endTime, // optional - if not provided will be derived from court availability for the tiven date\n  venueIds, // optional - defaults to all known; if a single venueId is provided then all matchUps will be scheduled for that venue\n  matchUpIds, // array of matchUpIds; if no schedulingProfile is present will be auto-sorted by draw size and roundNumbers\n  periodLength = 30, // optional - size of scheduling blocks\n  averageMatchUpMinutes = 90, // optional - defaults to 90\n  recoveryMinutes = 0, // optional - amount of time participants are given to recover between matchUps\n  matchUpDailyLimits, // optional - policy declaration; SINGLES, DOUBLES and total limits per individual participant\n  checkPotentialRequestConflicts, // boolean - defaults to true - consider individual requests when matchUp participants are "potential"\n});\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"scheduleprofilerounds",children:"scheduleProfileRounds"}),"\n",(0,i.jsxs)(n.p,{children:["Auto-schedules all rounds which have been specified in a ",(0,i.jsx)(n.code,{children:"schedulingProfile"})," which has been saved to the tournamentRecord using ",(0,i.jsx)(n.code,{children:"competitionEngine.setSchedulingProfile"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["SINGLES and DOUBLES ",(0,i.jsx)(n.code,{children:"matchUps"})," will be scheduled, but not TEAM ",(0,i.jsx)(n.code,{children:"matchUps"}),"."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const result = competitionEngine.scheduleProfileRounds({\n  checkPotentialRequestConflicts, // boolean - defaults to true - consider individual requests when matchUp participants are "potential"\n  periodLength = 30, // optional - size of scheduling blocks\n  clearScheduleDates, // optional - boolean: true to clear ALL dates, otherwise array of scheduleDates to clear\n  scheduleDates, // optional array of dates to schedule\n  dryRun, // boolean - only report what would happen without making modifications\n  pro: // boolean - defaults to false; schedule specific courts without using garman\n});\n\nconst {\n  scheduledDates, // dates for which matchUps have been scheduled\n  scheduledMatchUpIds, // array of matchUpIds which have been scheduled\n  noTimeMatchUpIds, // array of matchUpids which have NOT been scheduled\n  overLimitMatchUpIds, // matchUps not scheduled because of participant daily limits\n  requestConflicts, // array of { date, conflicts } objects for each date in schedulingProfile\n} = result;\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"setmatchupdailylimits",children:"setMatchUpDailyLimits"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.setMatchUpDailyLimits({\n  dailyLimits: { SINGLES: 2, DOUBLES: 1, total: 3 },\n  tournamentId, // optional - scope to a specific tournamentId\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"setmatchupstatus",children:"setMatchUpStatus"}),"\n",(0,i.jsx)(n.p,{children:"Sets either matchUpStatus or score and winningSide; values to be set are passed in outcome object. Handles any winner/loser participant movements within or across structures."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const outcome = {\n  matchUpStatus, // optional\n  winningSide, // optional\n  score, // optional\n};\n\ncompetitionEngine.setMatchUpStatus({\n  disableScoreValidation, // optional boolean\n  allowChangePropagation, // optional boolean - allow winner/loser to be swapped and propgate change throughout draw structures\n  disableAutoCalc, // optional - applies only to { matchUpType: TEAM }\n  enableAutoCalc, // optional - applies only to { matchUpType: TEAM }\n  tournamentId,\n  matchUpTieId, // optional - if part of a TIE matchUp\n  matchUpId,\n  drawId,\n  outcome, // optional\n  schedule: {\n    // optional - set schedule items\n    courtIds, // optional - applies only to TEAM matchUps => creates .allocatedCourts\n    courtId, // requires scheduledDate\n    venueId,\n    scheduledDate,\n    scheduledTime,\n    startTime,\n    endTime,\n  },\n  notes, // optional - add note (string) to matchUp object\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"setstate",children:"setState"}),"\n",(0,i.jsx)(n.p,{children:"Loads tournament records into competitionEngine; supports both an array of tournamentRecords and an object with tournamentId keys."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const tournamentRecords = [tournamentRecord];\n// or const tournamentRecords = { [tournamentId]: tournamentRecord }\n\ncompetitionEngine.setsState(tournamentRecords, deepCopy, deepCopyConfig);\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["By default a deep copy of the ",(0,i.jsx)(n.code,{children:"tournamentRecords"})," is made so that mutations made by ",(0,i.jsx)(n.code,{children:"competitionEngine"})," do not affect the source objects. An optional boolean parameter, ",(0,i.jsx)(n.em,{children:"deepCopy"})," can be set to false to override this default behavior."]})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"deepCopyConfig"})," is an optional configuration for ",(0,i.jsx)(n.code,{children:"makeDeepCopy"}),". In server configurations when ",(0,i.jsx)(n.code,{children:"deepCopy"})," is FALSE and ",(0,i.jsx)(n.code,{children:"tournamentRecords"})," are retrieved from Mongo, for instance, there are scenarios where nodes of the JSON structure contain prototypes which cannot be converted."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const deepCopyConfig = {\n  ignore, // optional - either an array of attributes to ignore or a function which processes attributes to determine whether to ignore them\n  toJSON, // optional - an array of attributes to convert to JSON if the attribute in question is an object with .toJSON property\n  stringify, // optional - an array of attributes to stringify\n  modulate, // optional - function to process every attribute and return custom values, or undefined, which continues normal processing\n};\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"setschedulingprofile",children:"setSchedulingProfile"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.setSchedulingProfile({ schedulingProfile });\n"})}),"\n",(0,i.jsx)(n.h2,{id:"settournamentrecord",children:"setTournamentRecord"}),"\n",(0,i.jsxs)(n.p,{children:["Adds a tournamentRecord to ",(0,i.jsx)(n.code,{children:"competitionEngine"})," state, or overwrite/replace an existing ",(0,i.jsx)(n.code,{children:"tournamentRecord"})," with the same ",(0,i.jsx)(n.code,{children:"tournamentId"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.setTournamentRecord(tournamentRecord);\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"toggleparticipantcheckinstate",children:"toggleParticipantCheckInState"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.toggleParticipantCheckInState({\n  drawId,\n  matchUpId,\n  tournamentId,\n  participantId,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"unlinktournament",children:"unlinkTournament"}),"\n",(0,i.jsxs)(n.p,{children:["Unlink the tournament specified by ",(0,i.jsx)(n.code,{children:"tournamentId"})," from other tournaments loaded in ",(0,i.jsx)(n.code,{children:"compeitionEngine"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.unlinkTournament({ tournamentId });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"unlinktournaments",children:"unlinkTournaments"}),"\n",(0,i.jsxs)(n.p,{children:["Removes links between all tournaments currently loaded in ",(0,i.jsx)(n.code,{children:"competitionEngine"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.unlinkTournaments();\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"unpublishorderofplay",children:"unPublishOrderOfPlay"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.unPublishOrderOfPlay({\n  removePriorValues, // optional boolean - when true will delete prior timeItems\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"updatetiematchupscore",children:"updateTieMatchUpScore"}),"\n",(0,i.jsx)(n.p,{children:"Trigger automatic calculation of the score of a TEAM matchUp."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"competitionEngine.updateTieMatchUpScore({\n  tournamentId,\n  matchUpId,\n  drawId,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"validateschedulingprofile",children:"validateSchedulingProfile"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { valid, error } = competitionEngine.validateSchedulingProfile({\n  schedulingProfile,\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"version",children:"version"}),"\n",(0,i.jsx)(n.p,{children:"Returns NPM package version. Can be used in configurations that utilize Competition Factory engines on both client and server to ensure equivalency."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const version = competitionEngine.version();\n"})}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,a.ah)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},7942:(e,n,t)=>{t.d(n,{ah:()=>c});var i=t(959);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=i.createContext({}),c=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,h=r(e,["components","mdxType","originalType","parentName"]),u=c(t),p=a,m=u["".concat(d,".").concat(p)]||u[p]||l[p]||o;return t?i.createElement(m,s(s({ref:n},h),{},{components:t})):i.createElement(m,s({ref:n},h))}));h.displayName="MDXCreateElement"}}]);