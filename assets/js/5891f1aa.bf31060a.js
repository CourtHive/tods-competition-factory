"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3324],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,g=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6917:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={title:"State Engines"},i=void 0,s={unversionedId:"state-engines",id:"state-engines",title:"State Engines",description:"Competition Factory engines manage different concerns within a tournament and may be used either synchronously or asynchronously.",source:"@site/docs/state-engines.mdx",sourceDirName:".",slug:"/state-engines",permalink:"/tods-competition-factory/docs/state-engines",draft:!1,tags:[],version:"current",frontMatter:{title:"State Engines"},sidebar:"docs",previous:{title:"Introduction",permalink:"/tods-competition-factory/docs/"},next:{title:"Features",permalink:"/tods-competition-factory/docs/features"}},c={},l=[{value:"Core Engines",id:"core-engines",level:2},{value:"Other Utilities",id:"other-utilities",level:2}],p={toc:l};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Competition Factory engines manage different concerns within a tournament and may be used either synchronously or asynchronously."),(0,a.kt)("h2",{id:"core-engines"},"Core Engines"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"./apis/competition-engine-api"},(0,a.kt)("strong",{parentName:"a"},"competitionEngine"))," - manages resources which may be shared across multiple linked tournaments, such as venues (courts & other locations); includes advanced scheduling and cross-tournament reporting."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"./apis/tournament-engine-api"},(0,a.kt)("strong",{parentName:"a"},"tournamentEngine")),' - manages tournament metadata, participants, events (including the generation of complex draw types and "flights" within events), and reporting.'),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"./apis/draw-engine-api"},(0,a.kt)("strong",{parentName:"a"},"drawEngine"))," - generates drawDefinitions and matchUp results; manages participant seeding and movement within and between draw structures."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"./apis/matchUp-engine-api"},(0,a.kt)("strong",{parentName:"a"},"matchUpEngine"))," - methods to manipulate tieFormats, analyze arrays of matchUps, and report on matchUp scores.")),(0,a.kt)("h2",{id:"other-utilities"},"Other Utilities"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"./apis/mocks-engine-api"},(0,a.kt)("strong",{parentName:"a"},"mocksEngine"))," - generates complete tournament objects, or tournamentRecords, as well as mock persons, participants and matchUp outcomes.\nIt is used extensively in the ~1000 test suites that are run against the factory methods before every package release."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"./scoreGovernor"},(0,a.kt)("strong",{parentName:"a"},"scoreGovernor"))," - is a collection of scoring related utilities which provide analysis/validation or generate values, but do not make any mutations."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"./codes/matchup-format"},(0,a.kt)("strong",{parentName:"a"},"matchUpFormatCode"))," - is an ITF matchUp format code parser, stringifier, and validator."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"./codes/age-category"},(0,a.kt)("strong",{parentName:"a"},"ageCategoryCode"))," - is an ITF ageCategoryCode parser.")))}m.isMDXComponent=!0}}]);