"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[797],{1391:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var o=t(1527),r=t(7942);const i={title:"JSON2CSV"},a=void 0,c={id:"utilities/json-to-csv",title:"JSON2CSV",description:"Converts an array of JSON objects into CSV.",source:"@site/docs/utilities/json-to-csv.mdx",sourceDirName:"utilities",slug:"/utilities/json-to-csv",permalink:"/tods-competition-factory/docs/utilities/json-to-csv",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"JSON2CSV"},sidebar:"docs",previous:{title:"structureSort",permalink:"/tods-competition-factory/docs/utilities/structure-sort"},next:{title:"utilities API",permalink:"/tods-competition-factory/docs/utilities/utilities-api"}},s={},l=[{value:"Example converting matchUps",id:"example-converting-matchups",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.ah)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Converts an array of ",(0,o.jsx)(n.strong,{children:"JSON"})," objects into ",(0,o.jsx)(n.strong,{children:"CSV"}),".\nProvides custom mapping of column names and merging of column values (resolves to first found in priority order), as well as custom delimiter and column/row/key joiners.\nContext attributes can be added to all rows and column-specific value replacements may be defined."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { utilities } from 'tods-competition-factory';\n\nconst config = {\n  includeTransformAccessors, // optional boolean - transform accessors are included with columnAccessors\n  removeEmptyColumns, // optional boolean - remove columns which contain no values\n  columnAccessors, // optional - array of column accessors to include [ 'includeThis', 'andThis' ]\n  columnTransform, // optional - multiple generated column names can resolve to a single custom column, e.g. { 'newColumnName': ['oldColumn1', 'oldColumn2' ]}\n  columnMap, // optional - simple mapping from generated columnName to custom columnName, e.g. { 'columnName': 'newColumnName' }\n  functionMap, // optional - transform values, e.g. { 'columnName': (value) => value }\n  valuesMap, // optional - map values for specified columns, e.g. { 'columnName': { 'value': 'mappedValue '}}\n  sortOrder // optional - e.g. ['columnName1', 'columnName2'] // determine order of csv columns\n  context, // optional - object defining values which should be added to all rows, e.g. { 'columnName': 'columnValue '}\n  delimiter, // optional - defaults to '\"'\n  columnJoiner, // optional - defines how CSV columns are joined; defaults to ','\n  rowJoiner, // optional - defines how CSV lines are joined; defaults to '\\r\\n'\n  keyJoiner, // optional - defines how flattened column names are constructed; defaults to '.'\n};\nconst arrayOfJSON = [{ a: 1 }, { b: 2 }];\nconst csv = utilities.JSON2CSV(arrayOfJSON, config);\n"})}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"columnTransform"})," mapped array elements are sensitive to order and will resolve to the first matching value"]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"columnMap"})," should not contain new columnName(s) that are ",(0,o.jsx)(n.code,{children:"columnTransform"})," keys"]})]}),"\n",(0,o.jsx)(n.h2,{id:"example-converting-matchups",children:"Example converting matchUps"}),"\n",(0,o.jsxs)(n.p,{children:["In the following example ",(0,o.jsx)(n.strong,{children:"SINGLES"})," and ",(0,o.jsx)(n.strong,{children:"DOUBLES"})," draws are generated and all ",(0,o.jsx)(n.code,{children:"matchUps"})," are completed.\nThe ",(0,o.jsx)(n.code,{children:"config"})," object defines how ",(0,o.jsx)(n.code,{children:"participants"})," for each ",(0,o.jsx)(n.code,{children:"side"})," of each ",(0,o.jsx)(n.code,{children:"matchUp"})," are to be extracted,\nprioritizing the ",(0,o.jsx)(n.code,{children:"accessor"})," for extracting ",(0,o.jsx)(n.code,{children:"{ participantType: PAIR }"}),", and falling back on the ",(0,o.jsx)(n.code,{children:"accessor"})," for ",(0,o.jsx)(n.code,{children:"participantName"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:"function MocksEngineDemo(props) {\n  const drawProfiles = [\n    { drawSize: 8, eventType: 'DOUBLES', matchUpFormat: 'SET3-S:4/TB7-F:TB10' },\n    { drawSize: 8, drawType: 'ROUND_ROBIN' },\n  ];\n  const { tournamentRecord } = mocksEngine.generateTournamentRecord({\n    completeAllMatchUps: true,\n    drawProfiles,\n  });\n\n  const { matchUps } = tournamentEngine\n    .setState(tournamentRecord)\n    .allTournamentMatchUps();\n\n  const rowJoiner = '|';\n  const config = {\n    rowJoiner,\n    delimiter: '',\n    includeTransformAccessors: true,\n    columnAccessors: ['matchUpType', 'matchUpFormat', 'endDate', 'roundName'],\n    columnTransform: {\n      scoreString: ['score.scoreStringSide1'],\n      side1Participant1: [\n        'sides.0.participant.individualParticipants.0.participantName',\n        'sides.0.participant.participantName',\n      ],\n      side1Participant2: [\n        'sides.0.participant.individualParticipants.1.participantName',\n      ],\n      side2Participant1: [\n        'sides.1.participant.individualParticipants.0.participantName',\n        'sides.1.participant.participantName',\n      ],\n      side2Participant2: [\n        'sides.1.participant.individualParticipants.1.participantName',\n      ],\n    },\n  };\n\n  const csvMatchUps = utilities.JSON2CSV(matchUps, config);\n  return <RenderCSV data={csvMatchUps} rowJoiner={rowJoiner} />;\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.ah)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},7942:(e,n,t)=>{t.d(n,{ah:()=>l});var o=t(959);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),l=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=l(t),u=r,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return t?o.createElement(f,a(a({ref:n},p),{},{components:t})):o.createElement(f,a({ref:n},p))}));p.displayName="MDXCreateElement"}}]);