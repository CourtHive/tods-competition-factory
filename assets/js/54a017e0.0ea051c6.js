(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[528],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return m}});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=i.createContext({}),p=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=p(e.components);return i.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return t?i.createElement(h,r(r({ref:n},s),{},{components:t})):i.createElement(h,r({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<a;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6665:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var i=t(4034),o=t(9973),a=(t(7294),t(3905)),r=["components"],l={title:"matchUpEngine API"},c={unversionedId:"apis/matchup-engine-api",id:"apis/matchup-engine-api",isDocsHomePage:!1,title:"matchUpEngine API",description:"All matchUpEngine methods which make a mutation return either { success: true } or { error }",source:"@site/docs/apis/matchup-engine-api.md",sourceDirName:"apis",slug:"/apis/matchup-engine-api",permalink:"/tods-competition-factory/docs/apis/matchup-engine-api",version:"current",frontMatter:{title:"matchUpEngine API"},sidebar:"docs",previous:{title:"Overview",permalink:"/tods-competition-factory/docs/engines/matchup-engine-overview"},next:{title:"Score Governor",permalink:"/tods-competition-factory/docs/scoreGovernor"}},p=[{value:"addCollectionDefinition",id:"addcollectiondefinition",children:[]},{value:"addCollectionGroup",id:"addcollectiongroup",children:[{value:"analyzeMatchUp",id:"analyzematchup",children:[]}]},{value:"modifyCollectionDefinition",id:"modifycollectiondefinition",children:[]},{value:"orderCollectionDefinitions",id:"ordercollectiondefinitions",children:[]},{value:"removeCollectionDefinition",id:"removecollectiondefinition",children:[]},{value:"removeCollectionGroup",id:"removecollectiongroup",children:[]},{value:"scoreHasValue",id:"scorehasvalue",children:[]},{value:"tallyParticipantResults",id:"tallyparticipantresults",children:[]}],s={toc:p};function d(e){var n=e.components,t=(0,o.Z)(e,r);return(0,a.kt)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"All ",(0,a.kt)("strong",{parentName:"p"},"matchUpEngine")," methods which make a mutation return either ",(0,a.kt)("inlineCode",{parentName:"p"},"{ success: true }")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"{ error }")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"addcollectiondefinition"},"addCollectionDefinition"),(0,a.kt)("p",null,"Adds a ",(0,a.kt)("inlineCode",{parentName:"p"},"collectionDefinition")," to the specified target, either ",(0,a.kt)("inlineCode",{parentName:"p"},"matchUp"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"structure"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"drawDefinition")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"event"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"matchUpEngine.addCollectionDefinition({\n  updateInProgressMatchUps, // defaults to true; in progress matchUps have matchUpStatus: IN_PROGRESS\n  collectionDefinition, // will be validated\n  tieFormatName, // if not provided, existing tieFormatName will be deleted\n  uuids, // optional - array of UUIDs to use for newly created matchUps\n});\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"addcollectiongroup"},"addCollectionGroup"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"matchUpEngine.addCollectionGroup({\n  tieFormatName: 'Swelled',\n  groupDefinition,\n  collectionIds,\n});\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"analyzematchup"},"analyzeMatchUp"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let analysis = matchUpEngine.analyzeMatchUp({ matchUp });\n\nconst {\n  isActiveSet,\n  isExistingSet,\n  existingValue,\n  hasExistingValue,\n  isValidSideNumber,\n  completedSetsCount,\n  isCompletedMatchUp,\n  isLastSetWithValues,\n  validMatchUpOutcome,\n  matchUpScoringFormat: {\n    bestOf,\n    setFormat: { setTo, tiebreakFormat, tiebreakAt },\n  },\n  calculatedWinningSide,\n  validMatchUpWinningSide,\n  completedSetsHaveValidOutcomes,\n  specifiedSetAnalysis: {\n    expectTiebreakSet,\n    expectTimedSet,\n    hasTiebreakCondition,\n    isCompletedSet,\n    isDecidingSet,\n    isTiebreakSet,\n    isValidSet,\n    isValidSetNumber,\n    isValidSetOutcome,\n    setFormat,\n    sideGameScores,\n    sideGameScoresCount,\n    sidePointScores,\n    sidePointScoresCount,\n    sideTiebreakScores,\n    sideTiebreakScoresCount,\n    winningSide,\n  },\n} = analysis;\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"modifycollectiondefinition"},"modifyCollectionDefinition"),(0,a.kt)("p",null,"Modifies the ",(0,a.kt)("inlineCode",{parentName:"p"},"collectionName")," and/or ",(0,a.kt)("inlineCode",{parentName:"p"},"matchUpFormat")," for targeted ",(0,a.kt)("inlineCode",{parentName:"p"},"collectionId")," within ",(0,a.kt)("inlineCode",{parentName:"p"},"matchUp.tieFormat"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"matchUpEngine.modifyCollectionDefinition({\n  collectionName, // optional\n  matchUpFormat, // optional\n  collectionId, // required\n\n  // value assignment, only one is allowed to have a value\n  collectionValueProfile, // optional - [{ collectionPosition: 1, value: 2 }] - there must be a value provided for all matchUp positions\n  collectionValue, // optional - value awarded for winning more than half of the matchUps in the collection\n  matchUpValue, // optional - value awarded for each matchUp won\n  scoreValue, // optional - value awarded for each game or point won (points for tiebreak sets)\n  setValue, // optional - value awarded for each set won\n});\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"ordercollectiondefinitions"},"orderCollectionDefinitions"),(0,a.kt)("p",null,"Modify the array order of ",(0,a.kt)("inlineCode",{parentName:"p"},"tieFormat.collectionDefinitions")," for an ",(0,a.kt)("inlineCode",{parentName:"p"},"event"),", a ",(0,a.kt)("inlineCode",{parentName:"p"},"drawDefinition"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"structure"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"matchUp"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"matchUpEngine.orderCollectionDefinitions({\n  orderMap: { collectionId1: 1, collectionId2: 2 },\n});\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"removecollectiondefinition"},"removeCollectionDefinition"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"matchUpEngine.removeCollectionDefinition({\n  tieFormatName, // any time a collectionDefinition is modified a new name must be provided\n  collectionId, // required - id of collectionDefinition to be removed\n});\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"removecollectiongroup"},"removeCollectionGroup"),(0,a.kt)("p",null,"Removes a ",(0,a.kt)("inlineCode",{parentName:"p"},"collectionGroup")," from the ",(0,a.kt)("inlineCode",{parentName:"p"},"tieFormat")," found for the ",(0,a.kt)("inlineCode",{parentName:"p"},"event"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"drawDefinition"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"structure")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"matchUp"),"; recalculates"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"matchUpEngine.removeCollectionGroup({\n  updateInProgressMatchUps, // optional - defaults to true\n  tieFormatName: 'New tieFormat', // if no name is provided then there will be no name\n  collectionGroupNumber: 1,\n});\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"scorehasvalue"},"scoreHasValue"),(0,a.kt)("p",null,"Returns boolean whether or not a ",(0,a.kt)("inlineCode",{parentName:"p"},"matchUp.score")," contains a point, game or set value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const result = matchUpEngine.scoreHasValue(); // use matchUp that is in state\nconst result = matchUpEngine.scoreHasValue({ matchUp }); // pass matchUp\nconst result = matchUpEngine.scoreHasValue({ score }); // pass score\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"tallyparticipantresults"},"tallyParticipantResults"),(0,a.kt)("p",null,"Processes ",(0,a.kt)("inlineCode",{parentName:"p"},"matchUps")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"{ drawType: 'ROUND_ROBIN' }")," from a single grouping within a ROUND_ROBIN structure and produces a detailed tally of particpant metrics."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { participantResults } = matchUpEngine.tallyParticipantResults({\n  policyDefinitions, // optional - can configure determination of winner when tied values\n  matchUpFormat, // required for accurate calculations\n  subOrderMap, // map { [participantId]: subOrder } // manual determination of order when ties cannot be broken\n  matchUps, // optional - array of Group matchUps; will use matchUps in state when not provided\n});\n")),(0,a.kt)("hr",null))}d.isMDXComponent=!0}}]);